
singen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08007970  08007970  00017970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c70  08007c70  00020550  2**0
                  CONTENTS
  4 .ARM          00000000  08007c70  08007c70  00020550  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c70  08007c70  00020550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000550  20000000  08007c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001910  20000550  080081c8  00020550  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e60  080081c8  00021e60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020550  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d0b  00000000  00000000  00020580  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b3d  00000000  00000000  0003a28b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009348  00000000  00000000  0003ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c30  00000000  00000000  00047110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b20  00000000  00000000  00047d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00026533  00000000  00000000  00048860  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f305  00000000  00000000  0006ed93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d5a64  00000000  00000000  0007e098  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00153afc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ac0  00000000  00000000  00153b78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000550 	.word	0x20000550
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007954 	.word	0x08007954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000554 	.word	0x20000554
 80001cc:	08007954 	.word	0x08007954

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b500      	push	{lr}
 8000c8a:	b08b      	sub	sp, #44	; 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	9306      	str	r3, [sp, #24]
 8000c90:	9307      	str	r3, [sp, #28]
 8000c92:	9308      	str	r3, [sp, #32]
 8000c94:	9309      	str	r3, [sp, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_GPIO_Init+0x60>)
 8000c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c9e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ca2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000ca6:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000ca8:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cac:	f042 0201 	orr.w	r2, r2, #1
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cb4:	f002 0201 	and.w	r2, r2, #1
 8000cb8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000cba:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cbe:	f042 0210 	orr.w	r2, r2, #16
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0310 	and.w	r3, r3, #16
 8000cca:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ccc:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cce:	4807      	ldr	r0, [pc, #28]	; (8000cec <MX_GPIO_Init+0x64>)
 8000cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd4:	6183      	str	r3, [r0, #24]

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cda:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	a904      	add	r1, sp, #16
 8000cde:	f001 f976 	bl	8001fce <LL_GPIO_Init>

}
 8000ce2:	b00b      	add	sp, #44	; 0x2c
 8000ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40021000 	.word	0x40021000

08000cf0 <MX_DAC_Init>:
{
 8000cf0:	b510      	push	{r4, lr}
 8000cf2:	b08c      	sub	sp, #48	; 0x30
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8000cf4:	2400      	movs	r4, #0
 8000cf6:	9408      	str	r4, [sp, #32]
 8000cf8:	9409      	str	r4, [sp, #36]	; 0x24
 8000cfa:	940a      	str	r4, [sp, #40]	; 0x28
 8000cfc:	940b      	str	r4, [sp, #44]	; 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	9404      	str	r4, [sp, #16]
 8000d00:	9405      	str	r4, [sp, #20]
 8000d02:	9406      	str	r4, [sp, #24]
 8000d04:	9407      	str	r4, [sp, #28]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <MX_DAC_Init+0x90>)
 8000d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000d0e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d12:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000d16:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000d18:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d1c:	f042 0201 	orr.w	r2, r2, #1
 8000d20:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000d2a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8000d2c:	2330      	movs	r3, #48	; 0x30
 8000d2e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d30:	2303      	movs	r3, #3
 8000d32:	9303      	str	r3, [sp, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	a902      	add	r1, sp, #8
 8000d36:	4813      	ldr	r0, [pc, #76]	; (8000d84 <MX_DAC_Init+0x94>)
 8000d38:	f001 f949 	bl	8001fce <LL_GPIO_Init>
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_EXT_TIM2_TRGO;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	9308      	str	r3, [sp, #32]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8000d40:	9409      	str	r4, [sp, #36]	; 0x24
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_DISABLE;
 8000d42:	2302      	movs	r3, #2
 8000d44:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000d46:	4c10      	ldr	r4, [pc, #64]	; (8000d88 <MX_DAC_Init+0x98>)
 8000d48:	aa08      	add	r2, sp, #32
 8000d4a:	4910      	ldr	r1, [pc, #64]	; (8000d8c <MX_DAC_Init+0x9c>)
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f001 f911 	bl	8001f74 <LL_DAC_Init>
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8000d52:	aa08      	add	r2, sp, #32
 8000d54:	490e      	ldr	r1, [pc, #56]	; (8000d90 <MX_DAC_Init+0xa0>)
 8000d56:	4620      	mov	r0, r4
 8000d58:	f001 f90c 	bl	8001f74 <LL_DAC_Init>
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6023      	str	r3, [r4, #0]
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6a:	6023      	str	r3, [r4, #0]
  SET_BIT(DACx->CR,
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6023      	str	r3, [r4, #0]
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7a:	6023      	str	r3, [r4, #0]
}
 8000d7c:	b00c      	add	sp, #48	; 0x30
 8000d7e:	bd10      	pop	{r4, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40007400 	.word	0x40007400
 8000d8c:	02100001 	.word	0x02100001
 8000d90:	15430012 	.word	0x15430012

08000d94 <MX_TIM2_Init>:
{
 8000d94:	b500      	push	{lr}
 8000d96:	b087      	sub	sp, #28
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d98:	2300      	movs	r3, #0
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	9302      	str	r3, [sp, #8]
 8000d9e:	9303      	str	r3, [sp, #12]
 8000da0:	9304      	str	r3, [sp, #16]
 8000da2:	9305      	str	r3, [sp, #20]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000da4:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <MX_TIM2_Init+0x7c>)
 8000da6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000da8:	f041 0101 	orr.w	r1, r1, #1
 8000dac:	6411      	str	r1, [r2, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000dae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000db0:	f002 0201 	and.w	r2, r2, #1
 8000db4:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8000db6:	9a00      	ldr	r2, [sp, #0]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <MX_TIM2_Init+0x80>)
 8000dba:	68d2      	ldr	r2, [r2, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	4a16      	ldr	r2, [pc, #88]	; (8000e18 <MX_TIM2_Init+0x84>)
 8000dbe:	f882 331c 	strb.w	r3, [r2, #796]	; 0x31c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8000dc6:	6011      	str	r1, [r2, #0]
  TIM_InitStruct.Prescaler = 0;
 8000dc8:	f8ad 3004 	strh.w	r3, [sp, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000dcc:	9302      	str	r3, [sp, #8]
  TIM_InitStruct.Autoreload = 167;
 8000dce:	22a7      	movs	r2, #167	; 0xa7
 8000dd0:	9203      	str	r2, [sp, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000dd2:	9304      	str	r3, [sp, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000dd4:	a901      	add	r1, sp, #4
 8000dd6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dda:	f001 f98f 	bl	80020fc <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000de8:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000df0:	f022 0207 	bic.w	r2, r2, #7
 8000df4:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000dfc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000e00:	605a      	str	r2, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e08:	609a      	str	r2, [r3, #8]
}
 8000e0a:	b007      	add	sp, #28
 8000e0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e10:	40023800 	.word	0x40023800
 8000e14:	e000ed00 	.word	0xe000ed00
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
 8000e1e:	e7fe      	b.n	8000e1e <Error_Handler+0x2>

08000e20 <SystemClock_Config>:
{
 8000e20:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e22:	4a2f      	ldr	r2, [pc, #188]	; (8000ee0 <SystemClock_Config+0xc0>)
 8000e24:	6813      	ldr	r3, [r2, #0]
 8000e26:	f023 030f 	bic.w	r3, r3, #15
 8000e2a:	f043 0305 	orr.w	r3, r3, #5
 8000e2e:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <SystemClock_Config+0xc0>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 030f 	and.w	r3, r3, #15
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d1f9      	bne.n	8000e30 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000e3c:	4a29      	ldr	r2, [pc, #164]	; (8000ee4 <SystemClock_Config+0xc4>)
 8000e3e:	6813      	ldr	r3, [r2, #0]
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e44:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e46:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <SystemClock_Config+0xc8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSE_IsReady() != 1)
 8000e56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e5a:	d0fa      	beq.n	8000e52 <SystemClock_Config+0x32>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <SystemClock_Config+0xc8>)
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4922      	ldr	r1, [pc, #136]	; (8000eec <SystemClock_Config+0xcc>)
 8000e62:	4011      	ands	r1, r2
 8000e64:	4a22      	ldr	r2, [pc, #136]	; (8000ef0 <SystemClock_Config+0xd0>)
 8000e66:	430a      	orrs	r2, r1
 8000e68:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000e70:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	491f      	ldr	r1, [pc, #124]	; (8000ef4 <SystemClock_Config+0xd4>)
 8000e76:	4011      	ands	r1, r2
 8000e78:	4a1f      	ldr	r2, [pc, #124]	; (8000ef8 <SystemClock_Config+0xd8>)
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e84:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <SystemClock_Config+0xc8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8000e8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e8e:	d0fa      	beq.n	8000e86 <SystemClock_Config+0x66>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <SystemClock_Config+0xc8>)
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e98:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000ea0:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000ea4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000eac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eb0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	f022 0203 	bic.w	r2, r2, #3
 8000eb8:	f042 0202 	orr.w	r2, r2, #2
 8000ebc:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <SystemClock_Config+0xc8>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ec6:	2b08      	cmp	r3, #8
 8000ec8:	d1f9      	bne.n	8000ebe <SystemClock_Config+0x9e>
  LL_SetSystemCoreClock(168000000);
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <SystemClock_Config+0xdc>)
 8000ecc:	f001 fef8 	bl	8002cc0 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 f8ef 	bl	80010b4 <HAL_InitTick>
 8000ed6:	b900      	cbnz	r0, 8000eda <SystemClock_Config+0xba>
}
 8000ed8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000eda:	f7ff ff9f 	bl	8000e1c <Error_Handler>
 8000ede:	bf00      	nop
 8000ee0:	40023c00 	.word	0x40023c00
 8000ee4:	40007000 	.word	0x40007000
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	ffbf8000 	.word	0xffbf8000
 8000ef0:	00402a04 	.word	0x00402a04
 8000ef4:	f0bf8000 	.word	0xf0bf8000
 8000ef8:	07402a04 	.word	0x07402a04
 8000efc:	0a037a00 	.word	0x0a037a00

08000f00 <main>:
{
 8000f00:	b508      	push	{r3, lr}
  HAL_Init();
 8000f02:	f000 f8fd 	bl	8001100 <HAL_Init>
  SystemClock_Config();
 8000f06:	f7ff ff8b 	bl	8000e20 <SystemClock_Config>
  MX_GPIO_Init();
 8000f0a:	f7ff febd 	bl	8000c88 <MX_GPIO_Init>
  MX_DAC_Init();
 8000f0e:	f7ff feef 	bl	8000cf0 <MX_DAC_Init>
  MX_USB_DEVICE_Init();
 8000f12:	f002 fd79 	bl	8003a08 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000f16:	f7ff ff3d 	bl	8000d94 <MX_TIM2_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000f1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	f042 0201 	orr.w	r2, r2, #1
 8000f24:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f042 0201 	orr.w	r2, r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f2e:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <main+0x38>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	619a      	str	r2, [r3, #24]
 8000f34:	e7fb      	b.n	8000f2e <main+0x2e>
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2100      	movs	r1, #0
 8000f40:	9100      	str	r1, [sp, #0]
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_MspInit+0x34>)
 8000f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f4a:	645a      	str	r2, [r3, #68]	; 0x44
 8000f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f4e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f52:	9200      	str	r2, [sp, #0]
 8000f54:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	9101      	str	r1, [sp, #4]
 8000f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	b002      	add	sp, #8
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler>

08000f7e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	4770      	bx	lr

08000f80 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	4770      	bx	lr

08000f82 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	4770      	bx	lr

08000f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f86:	f000 f8d5 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8a:	bd08      	pop	{r3, pc}

08000f8c <TIM2_IRQHandler>:
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <TIM2_IRQHandler+0x4c>)
 8000f8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f92:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	f013 0f01 	tst.w	r3, #1
 8000f9e:	d019      	beq.n	8000fd4 <TIM2_IRQHandler+0x48>
	q15_t sine,sine1;
	LL_GPIO_ResetOutputPin(LED_GPIO_Port,LED_Pin);
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2) != RESET)
	{

		angle_acc += 3435973;
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <TIM2_IRQHandler+0x50>)
 8000fa2:	6811      	ldr	r1, [r2, #0]
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <TIM2_IRQHandler+0x54>)
 8000fa6:	440b      	add	r3, r1
 8000fa8:	6013      	str	r3, [r2, #0]

		sine = sine16b[(angle_acc>>24)&0xff];
 8000faa:	0e1a      	lsrs	r2, r3, #24
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <TIM2_IRQHandler+0x58>)
 8000fae:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
		sine1 = sine16b[((angle_acc>>24)+0x40)&0xff];
 8000fb2:	161b      	asrs	r3, r3, #24
 8000fb4:	3340      	adds	r3, #64	; 0x40
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]

		DAC->DHR12L1 =sine^0x8000;
 8000fbc:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 8000fc0:	4909      	ldr	r1, [pc, #36]	; (8000fe8 <TIM2_IRQHandler+0x5c>)
 8000fc2:	60ca      	str	r2, [r1, #12]
		DAC->DHR12L2 =sine1^0x8000;
 8000fc4:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8000fc8:	618b      	str	r3, [r1, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fce:	f06f 0201 	mvn.w	r2, #1
 8000fd2:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	2000056c 	.word	0x2000056c
 8000fe0:	00346dc5 	.word	0x00346dc5
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	40007400 	.word	0x40007400

08000fec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fee:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <OTG_FS_IRQHandler+0xc>)
 8000ff0:	f000 fbd8 	bl	80017a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ff4:	bd08      	pop	{r3, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20001a54 	.word	0x20001a54

08000ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ffc:	b510      	push	{r4, lr}
 8000ffe:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <_sbrk+0x38>)
 8001002:	490d      	ldr	r1, [pc, #52]	; (8001038 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <_sbrk+0x40>)
 8001006:	6800      	ldr	r0, [r0, #0]
 8001008:	b140      	cbz	r0, 800101c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <_sbrk+0x40>)
 800100c:	6800      	ldr	r0, [r0, #0]
 800100e:	4403      	add	r3, r0
 8001010:	1a52      	subs	r2, r2, r1
 8001012:	4293      	cmp	r3, r2
 8001014:	d806      	bhi.n	8001024 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001016:	4a09      	ldr	r2, [pc, #36]	; (800103c <_sbrk+0x40>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800101a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <_sbrk+0x40>)
 800101e:	4c08      	ldr	r4, [pc, #32]	; (8001040 <_sbrk+0x44>)
 8001020:	6004      	str	r4, [r0, #0]
 8001022:	e7f2      	b.n	800100a <_sbrk+0xe>
    errno = ENOMEM;
 8001024:	f002 ff24 	bl	8003e70 <__errno>
 8001028:	230c      	movs	r3, #12
 800102a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800102c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001030:	e7f3      	b.n	800101a <_sbrk+0x1e>
 8001032:	bf00      	nop
 8001034:	20020000 	.word	0x20020000
 8001038:	00000400 	.word	0x00000400
 800103c:	20000570 	.word	0x20000570
 8001040:	20001e60 	.word	0x20001e60

08001044 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SystemInit+0x18>)
 8001046:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800104a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800104e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001056:	609a      	str	r2, [r3, #8]
#endif
}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001064:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001066:	e003      	b.n	8001070 <LoopCopyDataInit>

08001068 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800106a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800106c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800106e:	3104      	adds	r1, #4

08001070 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001074:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001076:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001078:	d3f6      	bcc.n	8001068 <CopyDataInit>
  ldr  r2, =_sbss
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800107c:	e002      	b.n	8001084 <LoopFillZerobss>

0800107e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800107e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001080:	f842 3b04 	str.w	r3, [r2], #4

08001084 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001086:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001088:	d3f9      	bcc.n	800107e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800108a:	f7ff ffdb 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108e:	f002 fef5 	bl	8003e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff ff35 	bl	8000f00 <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001098:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800109c:	08007c78 	.word	0x08007c78
  ldr  r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010a4:	20000550 	.word	0x20000550
  ldr  r2, =_sbss
 80010a8:	20000550 	.word	0x20000550
  ldr  r3, = _ebss
 80010ac:	20001e60 	.word	0x20001e60

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>
	...

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b510      	push	{r4, lr}
 80010b6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_InitTick+0x40>)
 80010ba:	7818      	ldrb	r0, [r3, #0]
 80010bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80010c4:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <HAL_InitTick+0x44>)
 80010c6:	6810      	ldr	r0, [r2, #0]
 80010c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80010cc:	f000 f8ac 	bl	8001228 <HAL_SYSTICK_Config>
 80010d0:	b968      	cbnz	r0, 80010ee <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	2c0f      	cmp	r4, #15
 80010d4:	d901      	bls.n	80010da <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
 80010d8:	e00a      	b.n	80010f0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010da:	2200      	movs	r2, #0
 80010dc:	4621      	mov	r1, r4
 80010de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e2:	f000 f85f 	bl	80011a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_InitTick+0x48>)
 80010e8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80010ea:	2000      	movs	r0, #0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
}
 80010f0:	bd10      	pop	{r4, pc}
 80010f2:	bf00      	nop
 80010f4:	20000204 	.word	0x20000204
 80010f8:	20000200 	.word	0x20000200
 80010fc:	20000208 	.word	0x20000208

08001100 <HAL_Init>:
{
 8001100:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_Init+0x30>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800110a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001112:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800111a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f82f 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff ffc6 	bl	80010b4 <HAL_InitTick>
  HAL_MspInit();
 8001128:	f7ff ff08 	bl	8000f3c <HAL_MspInit>
}
 800112c:	2000      	movs	r0, #0
 800112e:	bd08      	pop	{r3, pc}
 8001130:	40023c00 	.word	0x40023c00

08001134 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001134:	4a03      	ldr	r2, [pc, #12]	; (8001144 <HAL_IncTick+0x10>)
 8001136:	6811      	ldr	r1, [r2, #0]
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_IncTick+0x14>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	440b      	add	r3, r1
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000580 	.word	0x20000580
 8001148:	20000204 	.word	0x20000204

0800114c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800114c:	4b01      	ldr	r3, [pc, #4]	; (8001154 <HAL_GetTick+0x8>)
 800114e:	6818      	ldr	r0, [r3, #0]
}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000580 	.word	0x20000580

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b538      	push	{r3, r4, r5, lr}
 800115a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff fff6 	bl	800114c <HAL_GetTick>
 8001160:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001166:	d002      	beq.n	800116e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <HAL_Delay+0x24>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116e:	f7ff ffed 	bl	800114c <HAL_GetTick>
 8001172:	1b40      	subs	r0, r0, r5
 8001174:	42a0      	cmp	r0, r4
 8001176:	d3fa      	bcc.n	800116e <HAL_Delay+0x16>
  {
  }
}
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop
 800117c:	20000204 	.word	0x20000204

08001180 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001182:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001184:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001188:	041b      	lsls	r3, r3, #16
 800118a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	0200      	lsls	r0, r0, #8
 800118e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001192:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001194:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001198:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800119c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a4:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_NVIC_SetPriority+0x60>)
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ae:	f1c3 0407 	rsb	r4, r3, #7
 80011b2:	2c04      	cmp	r4, #4
 80011b4:	bf28      	it	cs
 80011b6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b8:	1d1d      	adds	r5, r3, #4
 80011ba:	2d06      	cmp	r5, #6
 80011bc:	d918      	bls.n	80011f0 <HAL_NVIC_SetPriority+0x4c>
 80011be:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80011c4:	fa05 f404 	lsl.w	r4, r5, r4
 80011c8:	ea21 0104 	bic.w	r1, r1, r4
 80011cc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ce:	fa05 f303 	lsl.w	r3, r5, r3
 80011d2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80011d8:	2800      	cmp	r0, #0
 80011da:	db0b      	blt.n	80011f4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	0109      	lsls	r1, r1, #4
 80011de:	b2c9      	uxtb	r1, r1
 80011e0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80011e4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80011e8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011ec:	bc30      	pop	{r4, r5}
 80011ee:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f0:	2300      	movs	r3, #0
 80011f2:	e7e5      	b.n	80011c0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	f000 000f 	and.w	r0, r0, #15
 80011f8:	0109      	lsls	r1, r1, #4
 80011fa:	b2c9      	uxtb	r1, r1
 80011fc:	4b02      	ldr	r3, [pc, #8]	; (8001208 <HAL_NVIC_SetPriority+0x64>)
 80011fe:	5419      	strb	r1, [r3, r0]
 8001200:	e7f4      	b.n	80011ec <HAL_NVIC_SetPriority+0x48>
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00
 8001208:	e000ed14 	.word	0xe000ed14

0800120c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800120c:	2800      	cmp	r0, #0
 800120e:	db07      	blt.n	8001220 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001210:	f000 021f 	and.w	r2, r0, #31
 8001214:	0940      	lsrs	r0, r0, #5
 8001216:	2301      	movs	r3, #1
 8001218:	4093      	lsls	r3, r2
 800121a:	4a02      	ldr	r2, [pc, #8]	; (8001224 <HAL_NVIC_EnableIRQ+0x18>)
 800121c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100

08001228 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	3801      	subs	r0, #1
 800122a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800122e:	d20a      	bcs.n	8001246 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_SYSTICK_Config+0x24>)
 8001232:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_SYSTICK_Config+0x28>)
 8001236:	21f0      	movs	r1, #240	; 0xf0
 8001238:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	2000      	movs	r0, #0
 800123e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001254:	2300      	movs	r3, #0
 8001256:	2b0f      	cmp	r3, #15
 8001258:	f200 80d7 	bhi.w	800140a <HAL_GPIO_Init+0x1b6>
{
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	b083      	sub	sp, #12
 8001260:	e039      	b.n	80012d6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001262:	2207      	movs	r2, #7
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x14>
 8001266:	2200      	movs	r2, #0
 8001268:	40aa      	lsls	r2, r5
 800126a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800126c:	3402      	adds	r4, #2
 800126e:	4d67      	ldr	r5, [pc, #412]	; (800140c <HAL_GPIO_Init+0x1b8>)
 8001270:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4a66      	ldr	r2, [pc, #408]	; (8001410 <HAL_GPIO_Init+0x1bc>)
 8001276:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001278:	43f2      	mvns	r2, r6
 800127a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800127e:	684f      	ldr	r7, [r1, #4]
 8001280:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001284:	d001      	beq.n	800128a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001286:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 800128a:	4c61      	ldr	r4, [pc, #388]	; (8001410 <HAL_GPIO_Init+0x1bc>)
 800128c:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 800128e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001290:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001294:	684f      	ldr	r7, [r1, #4]
 8001296:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800129a:	d001      	beq.n	80012a0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 800129c:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 80012a0:	4c5b      	ldr	r4, [pc, #364]	; (8001410 <HAL_GPIO_Init+0x1bc>)
 80012a2:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012aa:	684f      	ldr	r7, [r1, #4]
 80012ac:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80012b0:	d001      	beq.n	80012b6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80012b2:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 80012b6:	4c56      	ldr	r4, [pc, #344]	; (8001410 <HAL_GPIO_Init+0x1bc>)
 80012b8:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80012ba:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012be:	684d      	ldr	r5, [r1, #4]
 80012c0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80012c4:	d001      	beq.n	80012ca <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80012c6:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 80012ca:	4c51      	ldr	r4, [pc, #324]	; (8001410 <HAL_GPIO_Init+0x1bc>)
 80012cc:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	3301      	adds	r3, #1
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	f200 8098 	bhi.w	8001406 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80012d6:	2201      	movs	r2, #1
 80012d8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012da:	680c      	ldr	r4, [r1, #0]
 80012dc:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 80012e0:	42b2      	cmp	r2, r6
 80012e2:	d1f4      	bne.n	80012ce <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e4:	684c      	ldr	r4, [r1, #4]
 80012e6:	1e65      	subs	r5, r4, #1
 80012e8:	2d01      	cmp	r5, #1
 80012ea:	d903      	bls.n	80012f4 <HAL_GPIO_Init+0xa0>
 80012ec:	2c11      	cmp	r4, #17
 80012ee:	d001      	beq.n	80012f4 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f0:	2c12      	cmp	r4, #18
 80012f2:	d112      	bne.n	800131a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 80012f4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f6:	005f      	lsls	r7, r3, #1
 80012f8:	2403      	movs	r4, #3
 80012fa:	40bc      	lsls	r4, r7
 80012fc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001300:	68cc      	ldr	r4, [r1, #12]
 8001302:	40bc      	lsls	r4, r7
 8001304:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001306:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001308:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130a:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800130e:	684c      	ldr	r4, [r1, #4]
 8001310:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001314:	409a      	lsls	r2, r3
 8001316:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001318:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800131a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131c:	005f      	lsls	r7, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	40ba      	lsls	r2, r7
 8001322:	43d2      	mvns	r2, r2
 8001324:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001326:	688d      	ldr	r5, [r1, #8]
 8001328:	40bd      	lsls	r5, r7
 800132a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 800132c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132e:	684c      	ldr	r4, [r1, #4]
 8001330:	2c02      	cmp	r4, #2
 8001332:	d001      	beq.n	8001338 <HAL_GPIO_Init+0xe4>
 8001334:	2c12      	cmp	r4, #18
 8001336:	d113      	bne.n	8001360 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8001338:	08dd      	lsrs	r5, r3, #3
 800133a:	3508      	adds	r5, #8
 800133c:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001340:	f003 0407 	and.w	r4, r3, #7
 8001344:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001348:	240f      	movs	r4, #15
 800134a:	fa04 f40c 	lsl.w	r4, r4, ip
 800134e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001352:	690c      	ldr	r4, [r1, #16]
 8001354:	fa04 f40c 	lsl.w	r4, r4, ip
 8001358:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800135c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8001360:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001362:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001364:	684c      	ldr	r4, [r1, #4]
 8001366:	f004 0403 	and.w	r4, r4, #3
 800136a:	40bc      	lsls	r4, r7
 800136c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800136e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001370:	684a      	ldr	r2, [r1, #4]
 8001372:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001376:	d0aa      	beq.n	80012ce <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001378:	2200      	movs	r2, #0
 800137a:	9201      	str	r2, [sp, #4]
 800137c:	4a25      	ldr	r2, [pc, #148]	; (8001414 <HAL_GPIO_Init+0x1c0>)
 800137e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001380:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001384:	6454      	str	r4, [r2, #68]	; 0x44
 8001386:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001388:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800138c:	9201      	str	r2, [sp, #4]
 800138e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001390:	089c      	lsrs	r4, r3, #2
 8001392:	1ca5      	adds	r5, r4, #2
 8001394:	4a1d      	ldr	r2, [pc, #116]	; (800140c <HAL_GPIO_Init+0x1b8>)
 8001396:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800139a:	f003 0203 	and.w	r2, r3, #3
 800139e:	0095      	lsls	r5, r2, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	40aa      	lsls	r2, r5
 80013a4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a8:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <HAL_GPIO_Init+0x1c4>)
 80013aa:	4290      	cmp	r0, r2
 80013ac:	f43f af5b 	beq.w	8001266 <HAL_GPIO_Init+0x12>
 80013b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013b4:	4290      	cmp	r0, r2
 80013b6:	d01a      	beq.n	80013ee <HAL_GPIO_Init+0x19a>
 80013b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013bc:	4290      	cmp	r0, r2
 80013be:	d018      	beq.n	80013f2 <HAL_GPIO_Init+0x19e>
 80013c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013c4:	4290      	cmp	r0, r2
 80013c6:	d016      	beq.n	80013f6 <HAL_GPIO_Init+0x1a2>
 80013c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013cc:	4290      	cmp	r0, r2
 80013ce:	d014      	beq.n	80013fa <HAL_GPIO_Init+0x1a6>
 80013d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013d4:	4290      	cmp	r0, r2
 80013d6:	d012      	beq.n	80013fe <HAL_GPIO_Init+0x1aa>
 80013d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013dc:	4290      	cmp	r0, r2
 80013de:	d010      	beq.n	8001402 <HAL_GPIO_Init+0x1ae>
 80013e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013e4:	4290      	cmp	r0, r2
 80013e6:	f43f af3c 	beq.w	8001262 <HAL_GPIO_Init+0xe>
 80013ea:	2208      	movs	r2, #8
 80013ec:	e73c      	b.n	8001268 <HAL_GPIO_Init+0x14>
 80013ee:	2201      	movs	r2, #1
 80013f0:	e73a      	b.n	8001268 <HAL_GPIO_Init+0x14>
 80013f2:	2202      	movs	r2, #2
 80013f4:	e738      	b.n	8001268 <HAL_GPIO_Init+0x14>
 80013f6:	2203      	movs	r2, #3
 80013f8:	e736      	b.n	8001268 <HAL_GPIO_Init+0x14>
 80013fa:	2204      	movs	r2, #4
 80013fc:	e734      	b.n	8001268 <HAL_GPIO_Init+0x14>
 80013fe:	2205      	movs	r2, #5
 8001400:	e732      	b.n	8001268 <HAL_GPIO_Init+0x14>
 8001402:	2206      	movs	r2, #6
 8001404:	e730      	b.n	8001268 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001406:	b003      	add	sp, #12
 8001408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140a:	4770      	bx	lr
 800140c:	40013800 	.word	0x40013800
 8001410:	40013c00 	.word	0x40013c00
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000

0800141c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800141c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001420:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001422:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001424:	00ca      	lsls	r2, r1, #3
 8001426:	1a52      	subs	r2, r2, r1
 8001428:	0093      	lsls	r3, r2, #2
 800142a:	4403      	add	r3, r0
 800142c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800142e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001430:	429a      	cmp	r2, r3
 8001432:	d857      	bhi.n	80014e4 <PCD_WriteEmptyTxFifo+0xc8>
 8001434:	46b8      	mov	r8, r7
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001436:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001438:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 800143c:	00a2      	lsls	r2, r4, #2
 800143e:	4402      	add	r2, r0
 8001440:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001442:	429a      	cmp	r2, r3
 8001444:	d300      	bcc.n	8001448 <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 8001446:	461a      	mov	r2, r3
 8001448:	460c      	mov	r4, r1
 800144a:	4606      	mov	r6, r0
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800144c:	f102 0a03 	add.w	sl, r2, #3
 8001450:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001454:	e016      	b.n	8001484 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001456:	f109 0a03 	add.w	sl, r9, #3
 800145a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800145e:	00e3      	lsls	r3, r4, #3
 8001460:	1b1b      	subs	r3, r3, r4
 8001462:	009d      	lsls	r5, r3, #2
 8001464:	4435      	add	r5, r6
 8001466:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001468:	7c33      	ldrb	r3, [r6, #16]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	fa1f f389 	uxth.w	r3, r9
 8001470:	b2e2      	uxtb	r2, r4
 8001472:	4638      	mov	r0, r7
 8001474:	f001 f9f2 	bl	800285c <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001478:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800147a:	444b      	add	r3, r9
 800147c:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800147e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001480:	444b      	add	r3, r9
 8001482:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001484:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 8001488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	b29b      	uxth	r3, r3
 8001490:	4553      	cmp	r3, sl
 8001492:	d313      	bcc.n	80014bc <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001494:	00e3      	lsls	r3, r4, #3
 8001496:	1b1b      	subs	r3, r3, r4
 8001498:	009a      	lsls	r2, r3, #2
 800149a:	4432      	add	r2, r6
 800149c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800149e:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80014a0:	4299      	cmp	r1, r3
 80014a2:	d20b      	bcs.n	80014bc <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80014a4:	b153      	cbz	r3, 80014bc <PCD_WriteEmptyTxFifo+0xa0>
    len = ep->xfer_len - ep->xfer_count;
 80014a6:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 80014a8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80014ac:	008a      	lsls	r2, r1, #2
 80014ae:	4432      	add	r2, r6
 80014b0:	f8d2 9044 	ldr.w	r9, [r2, #68]	; 0x44
 80014b4:	4599      	cmp	r9, r3
 80014b6:	d3ce      	bcc.n	8001456 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 80014b8:	4699      	mov	r9, r3
 80014ba:	e7cc      	b.n	8001456 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80014bc:	00e3      	lsls	r3, r4, #3
 80014be:	1b1b      	subs	r3, r3, r4
 80014c0:	0098      	lsls	r0, r3, #2
 80014c2:	4406      	add	r6, r0
 80014c4:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80014c6:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d80f      	bhi.n	80014ec <PCD_WriteEmptyTxFifo+0xd0>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014cc:	f004 040f 	and.w	r4, r4, #15
 80014d0:	2101      	movs	r1, #1
 80014d2:	40a1      	lsls	r1, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014d4:	f8d7 4834 	ldr.w	r4, [r7, #2100]	; 0x834
 80014d8:	ea24 0401 	bic.w	r4, r4, r1
 80014dc:	f8c7 4834 	str.w	r4, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 80014e0:	2000      	movs	r0, #0
 80014e2:	e000      	b.n	80014e6 <PCD_WriteEmptyTxFifo+0xca>
    return HAL_ERROR;
 80014e4:	2001      	movs	r0, #1
}
 80014e6:	b002      	add	sp, #8
 80014e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 80014ec:	2000      	movs	r0, #0
 80014ee:	e7fa      	b.n	80014e6 <PCD_WriteEmptyTxFifo+0xca>

080014f0 <HAL_PCD_Init>:
{
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80014f4:	2800      	cmp	r0, #0
 80014f6:	f000 808a 	beq.w	800160e <HAL_PCD_Init+0x11e>
 80014fa:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 80014fc:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014fe:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001502:	b323      	cbz	r3, 800154e <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001504:	2303      	movs	r3, #3
 8001506:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800150a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800150c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001510:	d101      	bne.n	8001516 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	6123      	str	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001516:	6820      	ldr	r0, [r4, #0]
 8001518:	f000 ff34 	bl	8002384 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800151c:	4625      	mov	r5, r4
 800151e:	f855 7b10 	ldr.w	r7, [r5], #16
 8001522:	466e      	mov	r6, sp
 8001524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001526:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800152c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001530:	e886 0003 	stmia.w	r6, {r0, r1}
 8001534:	1d23      	adds	r3, r4, #4
 8001536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001538:	4638      	mov	r0, r7
 800153a:	f000 fe61 	bl	8002200 <USB_CoreInit>
 800153e:	b158      	cbz	r0, 8001558 <HAL_PCD_Init+0x68>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001540:	2302      	movs	r3, #2
 8001542:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001546:	2501      	movs	r5, #1
}
 8001548:	4628      	mov	r0, r5
 800154a:	b00b      	add	sp, #44	; 0x2c
 800154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800154e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001552:	f002 fb3b 	bl	8003bcc <HAL_PCD_MspInit>
 8001556:	e7d5      	b.n	8001504 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001558:	2100      	movs	r1, #0
 800155a:	6820      	ldr	r0, [r4, #0]
 800155c:	f000 ff18 	bl	8002390 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001560:	2300      	movs	r3, #0
 8001562:	e015      	b.n	8001590 <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8001564:	00d9      	lsls	r1, r3, #3
 8001566:	1ac8      	subs	r0, r1, r3
 8001568:	0082      	lsls	r2, r0, #2
 800156a:	4422      	add	r2, r4
 800156c:	2001      	movs	r0, #1
 800156e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001572:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001576:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800157a:	2000      	movs	r0, #0
 800157c:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001580:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001582:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001584:	1aca      	subs	r2, r1, r3
 8001586:	0091      	lsls	r1, r2, #2
 8001588:	4421      	add	r1, r4
 800158a:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158c:	3301      	adds	r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	6865      	ldr	r5, [r4, #4]
 8001592:	42ab      	cmp	r3, r5
 8001594:	d3e6      	bcc.n	8001564 <HAL_PCD_Init+0x74>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	e015      	b.n	80015c6 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 800159a:	00d8      	lsls	r0, r3, #3
 800159c:	1ac1      	subs	r1, r0, r3
 800159e:	008a      	lsls	r2, r1, #2
 80015a0:	4422      	add	r2, r4
 80015a2:	2100      	movs	r1, #0
 80015a4:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80015a8:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015ac:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015b0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015b4:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015b8:	1ac2      	subs	r2, r0, r3
 80015ba:	0090      	lsls	r0, r2, #2
 80015bc:	4420      	add	r0, r4
 80015be:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c2:	3301      	adds	r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	429d      	cmp	r5, r3
 80015c8:	d8e7      	bhi.n	800159a <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ca:	4625      	mov	r5, r4
 80015cc:	f855 7b10 	ldr.w	r7, [r5], #16
 80015d0:	466e      	mov	r6, sp
 80015d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80015d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80015da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015de:	e886 0003 	stmia.w	r6, {r0, r1}
 80015e2:	1d23      	adds	r3, r4, #4
 80015e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e6:	4638      	mov	r0, r7
 80015e8:	f000 ff18 	bl	800241c <USB_DevInit>
 80015ec:	4605      	mov	r5, r0
 80015ee:	b120      	cbz	r0, 80015fa <HAL_PCD_Init+0x10a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80015f6:	2501      	movs	r5, #1
 80015f8:	e7a6      	b.n	8001548 <HAL_PCD_Init+0x58>
  hpcd->USB_Address = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001600:	2301      	movs	r3, #1
 8001602:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001606:	6820      	ldr	r0, [r4, #0]
 8001608:	f001 fad7 	bl	8002bba <USB_DevDisconnect>
  return HAL_OK;
 800160c:	e79c      	b.n	8001548 <HAL_PCD_Init+0x58>
    return HAL_ERROR;
 800160e:	2501      	movs	r5, #1
 8001610:	e79a      	b.n	8001548 <HAL_PCD_Init+0x58>

08001612 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001612:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8001614:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001618:	2b01      	cmp	r3, #1
 800161a:	d019      	beq.n	8001650 <HAL_PCD_Start+0x3e>
{
 800161c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800161e:	2301      	movs	r3, #1
 8001620:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001624:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001626:	2b01      	cmp	r3, #1
 8001628:	d00a      	beq.n	8001640 <HAL_PCD_Start+0x2e>
 800162a:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800162c:	6800      	ldr	r0, [r0, #0]
 800162e:	f000 fea3 	bl	8002378 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001632:	6820      	ldr	r0, [r4, #0]
 8001634:	f001 fab3 	bl	8002b9e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001638:	2000      	movs	r0, #0
 800163a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800163e:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001640:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001642:	2b01      	cmp	r3, #1
 8001644:	d0f1      	beq.n	800162a <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001646:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6393      	str	r3, [r2, #56]	; 0x38
 800164e:	e7ec      	b.n	800162a <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 8001650:	2002      	movs	r0, #2
}
 8001652:	4770      	bx	lr

08001654 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	4604      	mov	r4, r0
 8001658:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800165a:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800165c:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800165e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8001662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001666:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001668:	6921      	ldr	r1, [r4, #16]
 800166a:	2901      	cmp	r1, #1
 800166c:	d011      	beq.n	8001692 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800166e:	4937      	ldr	r1, [pc, #220]	; (800174c <PCD_EP_OutXfrComplete_int+0xf8>)
 8001670:	428e      	cmp	r6, r1
 8001672:	d054      	beq.n	800171e <PCD_EP_OutXfrComplete_int+0xca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001674:	b93d      	cbnz	r5, 8001686 <PCD_EP_OutXfrComplete_int+0x32>
 8001676:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 800167a:	0093      	lsls	r3, r2, #2
 800167c:	4423      	add	r3, r4
 800167e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001682:	2b00      	cmp	r3, #0
 8001684:	d05c      	beq.n	8001740 <PCD_EP_OutXfrComplete_int+0xec>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001686:	b2e9      	uxtb	r1, r5
 8001688:	4620      	mov	r0, r4
 800168a:	f002 fae9 	bl	8003c60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800168e:	2000      	movs	r0, #0
 8001690:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001692:	f012 0f08 	tst.w	r2, #8
 8001696:	d009      	beq.n	80016ac <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001698:	492d      	ldr	r1, [pc, #180]	; (8001750 <PCD_EP_OutXfrComplete_int+0xfc>)
 800169a:	428e      	cmp	r6, r1
 800169c:	d9f7      	bls.n	800168e <PCD_EP_OutXfrComplete_int+0x3a>
 800169e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80016a2:	d0f4      	beq.n	800168e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80016a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	e7f0      	b.n	800168e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80016ac:	f012 0f20 	tst.w	r2, #32
 80016b0:	d128      	bne.n	8001704 <PCD_EP_OutXfrComplete_int+0xb0>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80016b2:	f012 0f28 	tst.w	r2, #40	; 0x28
 80016b6:	d1ea      	bne.n	800168e <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80016b8:	4925      	ldr	r1, [pc, #148]	; (8001750 <PCD_EP_OutXfrComplete_int+0xfc>)
 80016ba:	428e      	cmp	r6, r1
 80016bc:	d902      	bls.n	80016c4 <PCD_EP_OutXfrComplete_int+0x70>
 80016be:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80016c2:	d122      	bne.n	800170a <PCD_EP_OutXfrComplete_int+0xb6>
          hpcd->OUT_ep[epnum].maxpacket -
 80016c4:	00e9      	lsls	r1, r5, #3
 80016c6:	1b49      	subs	r1, r1, r5
 80016c8:	008a      	lsls	r2, r1, #2
 80016ca:	4422      	add	r2, r4
 80016cc:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80016d6:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80016d8:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80016dc:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80016e0:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 80016e4:	440b      	add	r3, r1
 80016e6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80016ea:	b935      	cbnz	r5, 80016fa <PCD_EP_OutXfrComplete_int+0xa6>
 80016ec:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 80016f0:	0093      	lsls	r3, r2, #2
 80016f2:	4423      	add	r3, r4
 80016f4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80016f8:	b15b      	cbz	r3, 8001712 <PCD_EP_OutXfrComplete_int+0xbe>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80016fa:	b2e9      	uxtb	r1, r5
 80016fc:	4620      	mov	r0, r4
 80016fe:	f002 faaf 	bl	8003c60 <HAL_PCD_DataOutStageCallback>
 8001702:	e7c4      	b.n	800168e <PCD_EP_OutXfrComplete_int+0x3a>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001704:	2220      	movs	r2, #32
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	e7c1      	b.n	800168e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800170a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	e7bd      	b.n	800168e <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001712:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001716:	2101      	movs	r1, #1
 8001718:	f001 faa2 	bl	8002c60 <USB_EP0_OutStart>
 800171c:	e7ed      	b.n	80016fa <PCD_EP_OutXfrComplete_int+0xa6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800171e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001722:	d109      	bne.n	8001738 <PCD_EP_OutXfrComplete_int+0xe4>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001724:	f012 0f20 	tst.w	r2, #32
 8001728:	d001      	beq.n	800172e <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800172a:	2220      	movs	r2, #32
 800172c:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800172e:	b2e9      	uxtb	r1, r5
 8001730:	4620      	mov	r0, r4
 8001732:	f002 fa95 	bl	8003c60 <HAL_PCD_DataOutStageCallback>
 8001736:	e7aa      	b.n	800168e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001738:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	e7a6      	b.n	800168e <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001740:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001744:	2100      	movs	r1, #0
 8001746:	f001 fa8b 	bl	8002c60 <USB_EP0_OutStart>
 800174a:	e79c      	b.n	8001686 <PCD_EP_OutXfrComplete_int+0x32>
 800174c:	4f54310a 	.word	0x4f54310a
 8001750:	4f54300a 	.word	0x4f54300a

08001754 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001754:	b538      	push	{r3, r4, r5, lr}
 8001756:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001758:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800175a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800175c:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8001760:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001766:	429d      	cmp	r5, r3
 8001768:	d907      	bls.n	800177a <PCD_EP_OutSetupPacket_int+0x26>
 800176a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800176e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001772:	d002      	beq.n	800177a <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001778:	608b      	str	r3, [r1, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800177a:	4620      	mov	r0, r4
 800177c:	f002 fa68 	bl	8003c50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001782:	429d      	cmp	r5, r3
 8001784:	d902      	bls.n	800178c <PCD_EP_OutSetupPacket_int+0x38>
 8001786:	6923      	ldr	r3, [r4, #16]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d001      	beq.n	8001790 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 800178c:	2000      	movs	r0, #0
 800178e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001790:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001794:	2101      	movs	r1, #1
 8001796:	6820      	ldr	r0, [r4, #0]
 8001798:	f001 fa62 	bl	8002c60 <USB_EP0_OutStart>
 800179c:	e7f6      	b.n	800178c <PCD_EP_OutSetupPacket_int+0x38>
 800179e:	bf00      	nop
 80017a0:	4f54300a 	.word	0x4f54300a

080017a4 <HAL_PCD_IRQHandler>:
{
 80017a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a8:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017aa:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017ac:	4628      	mov	r0, r5
 80017ae:	f001 fa43 	bl	8002c38 <USB_GetMode>
 80017b2:	b108      	cbz	r0, 80017b8 <HAL_PCD_IRQHandler+0x14>
}
 80017b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017b8:	462f      	mov	r7, r5
 80017ba:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017bc:	6820      	ldr	r0, [r4, #0]
 80017be:	f001 fa0a 	bl	8002bd6 <USB_ReadInterrupts>
 80017c2:	2800      	cmp	r0, #0
 80017c4:	d0f6      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017c6:	6820      	ldr	r0, [r4, #0]
 80017c8:	f001 fa05 	bl	8002bd6 <USB_ReadInterrupts>
 80017cc:	f010 0f02 	tst.w	r0, #2
 80017d0:	d004      	beq.n	80017dc <HAL_PCD_IRQHandler+0x38>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017d2:	6822      	ldr	r2, [r4, #0]
 80017d4:	6953      	ldr	r3, [r2, #20]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017dc:	6820      	ldr	r0, [r4, #0]
 80017de:	f001 f9fa 	bl	8002bd6 <USB_ReadInterrupts>
 80017e2:	f010 0f10 	tst.w	r0, #16
 80017e6:	d014      	beq.n	8001812 <HAL_PCD_IRQHandler+0x6e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017e8:	6822      	ldr	r2, [r4, #0]
 80017ea:	6993      	ldr	r3, [r2, #24]
 80017ec:	f023 0310 	bic.w	r3, r3, #16
 80017f0:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 80017f2:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017f6:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017fa:	f3c8 4343 	ubfx	r3, r8, #17, #4
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d068      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x130>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001802:	2b06      	cmp	r3, #6
 8001804:	f000 8088 	beq.w	8001918 <HAL_PCD_IRQHandler+0x174>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001808:	6822      	ldr	r2, [r4, #0]
 800180a:	6993      	ldr	r3, [r2, #24]
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001812:	6820      	ldr	r0, [r4, #0]
 8001814:	f001 f9df 	bl	8002bd6 <USB_ReadInterrupts>
 8001818:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800181c:	f040 8090 	bne.w	8001940 <HAL_PCD_IRQHandler+0x19c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001820:	6820      	ldr	r0, [r4, #0]
 8001822:	f001 f9d8 	bl	8002bd6 <USB_ReadInterrupts>
 8001826:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800182a:	f040 80d4 	bne.w	80019d6 <HAL_PCD_IRQHandler+0x232>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	f001 f9d1 	bl	8002bd6 <USB_ReadInterrupts>
 8001834:	2800      	cmp	r0, #0
 8001836:	f2c0 8142 	blt.w	8001abe <HAL_PCD_IRQHandler+0x31a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800183a:	6820      	ldr	r0, [r4, #0]
 800183c:	f001 f9cb 	bl	8002bd6 <USB_ReadInterrupts>
 8001840:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001844:	d00a      	beq.n	800185c <HAL_PCD_IRQHandler+0xb8>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001846:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 800184a:	f013 0f01 	tst.w	r3, #1
 800184e:	f040 8150 	bne.w	8001af2 <HAL_PCD_IRQHandler+0x34e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001852:	6822      	ldr	r2, [r4, #0]
 8001854:	6953      	ldr	r3, [r2, #20]
 8001856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800185a:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800185c:	6820      	ldr	r0, [r4, #0]
 800185e:	f001 f9ba 	bl	8002bd6 <USB_ReadInterrupts>
 8001862:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001866:	f040 8148 	bne.w	8001afa <HAL_PCD_IRQHandler+0x356>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800186a:	6820      	ldr	r0, [r4, #0]
 800186c:	f001 f9b3 	bl	8002bd6 <USB_ReadInterrupts>
 8001870:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001874:	f040 81a7 	bne.w	8001bc6 <HAL_PCD_IRQHandler+0x422>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001878:	6820      	ldr	r0, [r4, #0]
 800187a:	f001 f9ac 	bl	8002bd6 <USB_ReadInterrupts>
 800187e:	f010 0f08 	tst.w	r0, #8
 8001882:	f040 81b8 	bne.w	8001bf6 <HAL_PCD_IRQHandler+0x452>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001886:	6820      	ldr	r0, [r4, #0]
 8001888:	f001 f9a5 	bl	8002bd6 <USB_ReadInterrupts>
 800188c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001890:	f040 81ba 	bne.w	8001c08 <HAL_PCD_IRQHandler+0x464>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001894:	6820      	ldr	r0, [r4, #0]
 8001896:	f001 f99e 	bl	8002bd6 <USB_ReadInterrupts>
 800189a:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 800189e:	f040 81bd 	bne.w	8001c1c <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018a2:	6820      	ldr	r0, [r4, #0]
 80018a4:	f001 f997 	bl	8002bd6 <USB_ReadInterrupts>
 80018a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80018ac:	f040 81c0 	bne.w	8001c30 <HAL_PCD_IRQHandler+0x48c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018b0:	6820      	ldr	r0, [r4, #0]
 80018b2:	f001 f990 	bl	8002bd6 <USB_ReadInterrupts>
 80018b6:	f010 0f04 	tst.w	r0, #4
 80018ba:	f43f af7b 	beq.w	80017b4 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80018c2:	f015 0f04 	tst.w	r5, #4
 80018c6:	f040 81bc 	bne.w	8001c42 <HAL_PCD_IRQHandler+0x49e>
      hpcd->Instance->GOTGINT |= temp;
 80018ca:	6822      	ldr	r2, [r4, #0]
 80018cc:	6853      	ldr	r3, [r2, #4]
 80018ce:	432b      	orrs	r3, r5
 80018d0:	6053      	str	r3, [r2, #4]
 80018d2:	e76f      	b.n	80017b4 <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018d4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80018d8:	ea18 0f03 	tst.w	r8, r3
 80018dc:	d094      	beq.n	8001808 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018de:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
 80018e2:	ebab 0309 	sub.w	r3, fp, r9
 80018e6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80018ea:	44a2      	add	sl, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80018ec:	ea4f 1818 	mov.w	r8, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018f0:	f3c8 020a 	ubfx	r2, r8, #0, #11
 80018f4:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 80018f8:	4628      	mov	r0, r5
 80018fa:	f001 f8d1 	bl	8002aa0 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018fe:	f3c8 080a 	ubfx	r8, r8, #0, #11
 8001902:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8001906:	4443      	add	r3, r8
 8001908:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800190c:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
 8001910:	4443      	add	r3, r8
 8001912:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8001916:	e777      	b.n	8001808 <HAL_PCD_IRQHandler+0x64>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001918:	2208      	movs	r2, #8
 800191a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800191e:	4628      	mov	r0, r5
 8001920:	f001 f8be 	bl	8002aa0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001924:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001928:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800192c:	eba3 0109 	sub.w	r1, r3, r9
 8001930:	008a      	lsls	r2, r1, #2
 8001932:	4422      	add	r2, r4
 8001934:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001938:	4443      	add	r3, r8
 800193a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800193e:	e763      	b.n	8001808 <HAL_PCD_IRQHandler+0x64>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001940:	6820      	ldr	r0, [r4, #0]
 8001942:	f001 f94c 	bl	8002bde <USB_ReadDevAllOutEpInterrupt>
 8001946:	4680      	mov	r8, r0
      epnum = 0U;
 8001948:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800194a:	e017      	b.n	800197c <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800194c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001950:	2201      	movs	r2, #1
 8001952:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001956:	4649      	mov	r1, r9
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff fe7b 	bl	8001654 <PCD_EP_OutXfrComplete_int>
 800195e:	e01d      	b.n	800199c <HAL_PCD_IRQHandler+0x1f8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001960:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001964:	2208      	movs	r2, #8
 8001966:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800196a:	4649      	mov	r1, r9
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff fef1 	bl	8001754 <PCD_EP_OutSetupPacket_int>
 8001972:	e016      	b.n	80019a2 <HAL_PCD_IRQHandler+0x1fe>
        epnum++;
 8001974:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001978:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 800197c:	f1b8 0f00 	cmp.w	r8, #0
 8001980:	f43f af4e 	beq.w	8001820 <HAL_PCD_IRQHandler+0x7c>
        if ((ep_intr & 0x1U) != 0U)
 8001984:	f018 0f01 	tst.w	r8, #1
 8001988:	d0f4      	beq.n	8001974 <HAL_PCD_IRQHandler+0x1d0>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800198a:	fa5f f189 	uxtb.w	r1, r9
 800198e:	6820      	ldr	r0, [r4, #0]
 8001990:	f001 f935 	bl	8002bfe <USB_ReadDevOutEPInterrupt>
 8001994:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001996:	f010 0f01 	tst.w	r0, #1
 800199a:	d1d7      	bne.n	800194c <HAL_PCD_IRQHandler+0x1a8>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800199c:	f01a 0f08 	tst.w	sl, #8
 80019a0:	d1de      	bne.n	8001960 <HAL_PCD_IRQHandler+0x1bc>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019a2:	f01a 0f10 	tst.w	sl, #16
 80019a6:	d004      	beq.n	80019b2 <HAL_PCD_IRQHandler+0x20e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019a8:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80019ac:	2210      	movs	r2, #16
 80019ae:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019b2:	f01a 0f20 	tst.w	sl, #32
 80019b6:	d004      	beq.n	80019c2 <HAL_PCD_IRQHandler+0x21e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019b8:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80019bc:	2220      	movs	r2, #32
 80019be:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80019c2:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 80019c6:	d0d5      	beq.n	8001974 <HAL_PCD_IRQHandler+0x1d0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80019c8:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80019cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d0:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 80019d4:	e7ce      	b.n	8001974 <HAL_PCD_IRQHandler+0x1d0>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80019d6:	6820      	ldr	r0, [r4, #0]
 80019d8:	f001 f909 	bl	8002bee <USB_ReadDevAllInEpInterrupt>
 80019dc:	4680      	mov	r8, r0
      epnum = 0U;
 80019de:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80019e0:	e02a      	b.n	8001a38 <HAL_PCD_IRQHandler+0x294>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019e2:	4659      	mov	r1, fp
 80019e4:	4620      	mov	r0, r4
 80019e6:	f002 f947 	bl	8003c78 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80019ea:	f01a 0f08 	tst.w	sl, #8
 80019ee:	d004      	beq.n	80019fa <HAL_PCD_IRQHandler+0x256>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80019f0:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80019f4:	2208      	movs	r2, #8
 80019f6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019fa:	f01a 0f10 	tst.w	sl, #16
 80019fe:	d004      	beq.n	8001a0a <HAL_PCD_IRQHandler+0x266>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a00:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001a04:	2210      	movs	r2, #16
 8001a06:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a0a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8001a0e:	d004      	beq.n	8001a1a <HAL_PCD_IRQHandler+0x276>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a10:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001a14:	2240      	movs	r2, #64	; 0x40
 8001a16:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a1a:	f01a 0f02 	tst.w	sl, #2
 8001a1e:	d004      	beq.n	8001a2a <HAL_PCD_IRQHandler+0x286>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a20:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001a24:	2202      	movs	r2, #2
 8001a26:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a2a:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8001a2e:	d141      	bne.n	8001ab4 <HAL_PCD_IRQHandler+0x310>
        epnum++;
 8001a30:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001a34:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001a38:	f1b8 0f00 	cmp.w	r8, #0
 8001a3c:	f43f aef7 	beq.w	800182e <HAL_PCD_IRQHandler+0x8a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a40:	f018 0f01 	tst.w	r8, #1
 8001a44:	d0f4      	beq.n	8001a30 <HAL_PCD_IRQHandler+0x28c>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a46:	fa5f fb89 	uxtb.w	fp, r9
 8001a4a:	4659      	mov	r1, fp
 8001a4c:	6820      	ldr	r0, [r4, #0]
 8001a4e:	f001 f8df 	bl	8002c10 <USB_ReadDevInEPInterrupt>
 8001a52:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a54:	f010 0f01 	tst.w	r0, #1
 8001a58:	d0c7      	beq.n	80019ea <HAL_PCD_IRQHandler+0x246>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a5a:	f009 030f 	and.w	r3, r9, #15
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a64:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8001a68:	ea23 0302 	bic.w	r3, r3, r2
 8001a6c:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a70:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001a74:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001a78:	6923      	ldr	r3, [r4, #16]
 8001a7a:	428b      	cmp	r3, r1
 8001a7c:	d1b1      	bne.n	80019e2 <HAL_PCD_IRQHandler+0x23e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001a82:	eba2 0209 	sub.w	r2, r2, r9
 8001a86:	0093      	lsls	r3, r2, #2
 8001a88:	4423      	add	r3, r4
 8001a8a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a8e:	440a      	add	r2, r1
 8001a90:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a92:	f1b9 0f00 	cmp.w	r9, #0
 8001a96:	d1a4      	bne.n	80019e2 <HAL_PCD_IRQHandler+0x23e>
 8001a98:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8001a9c:	0093      	lsls	r3, r2, #2
 8001a9e:	4423      	add	r3, r4
 8001aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d19d      	bne.n	80019e2 <HAL_PCD_IRQHandler+0x23e>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001aa6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001aaa:	2101      	movs	r1, #1
 8001aac:	6820      	ldr	r0, [r4, #0]
 8001aae:	f001 f8d7 	bl	8002c60 <USB_EP0_OutStart>
 8001ab2:	e796      	b.n	80019e2 <HAL_PCD_IRQHandler+0x23e>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ab4:	4649      	mov	r1, r9
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	f7ff fcb0 	bl	800141c <PCD_WriteEmptyTxFifo>
 8001abc:	e7b8      	b.n	8001a30 <HAL_PCD_IRQHandler+0x28c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001abe:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8001aca:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d008      	beq.n	8001ae4 <HAL_PCD_IRQHandler+0x340>
        HAL_PCD_ResumeCallback(hpcd);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f002 f910 	bl	8003cf8 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ad8:	6822      	ldr	r2, [r4, #0]
 8001ada:	6953      	ldr	r3, [r2, #20]
 8001adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ae0:	6153      	str	r3, [r2, #20]
 8001ae2:	e6aa      	b.n	800183a <HAL_PCD_IRQHandler+0x96>
        hpcd->LPM_State = LPM_L0;
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001aea:	4620      	mov	r0, r4
 8001aec:	f000 fa3a 	bl	8001f64 <HAL_PCDEx_LPM_Callback>
 8001af0:	e7f2      	b.n	8001ad8 <HAL_PCD_IRQHandler+0x334>
        HAL_PCD_SuspendCallback(hpcd);
 8001af2:	4620      	mov	r0, r4
 8001af4:	f002 f8e8 	bl	8003cc8 <HAL_PCD_SuspendCallback>
 8001af8:	e6ab      	b.n	8001852 <HAL_PCD_IRQHandler+0xae>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001afa:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8001afe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	6820      	ldr	r0, [r4, #0]
 8001b0e:	f000 fc57 	bl	80023c0 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b12:	e020      	b.n	8001b56 <HAL_PCD_IRQHandler+0x3b2>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b14:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8001b18:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8001b1c:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b20:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001b24:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001b28:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001b2c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001b30:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001b34:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b38:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b3c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001b40:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001b44:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b48:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001b4c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001b50:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b54:	3601      	adds	r6, #1
 8001b56:	6863      	ldr	r3, [r4, #4]
 8001b58:	42b3      	cmp	r3, r6
 8001b5a:	d8db      	bhi.n	8001b14 <HAL_PCD_IRQHandler+0x370>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b5c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8001b60:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b64:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b6a:	b1eb      	cbz	r3, 8001ba8 <HAL_PCD_IRQHandler+0x404>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b6c:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8001b70:	f043 030b 	orr.w	r3, r3, #11
 8001b74:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b78:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001b7c:	f043 030b 	orr.w	r3, r3, #11
 8001b80:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b84:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8001b88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b8c:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b90:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001b94:	7c21      	ldrb	r1, [r4, #16]
 8001b96:	6820      	ldr	r0, [r4, #0]
 8001b98:	f001 f862 	bl	8002c60 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b9c:	6822      	ldr	r2, [r4, #0]
 8001b9e:	6953      	ldr	r3, [r2, #20]
 8001ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba4:	6153      	str	r3, [r2, #20]
 8001ba6:	e660      	b.n	800186a <HAL_PCD_IRQHandler+0xc6>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ba8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001bac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bb0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001bb4:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bb8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001bbc:	f043 030b 	orr.w	r3, r3, #11
 8001bc0:	f8c8 3010 	str.w	r3, [r8, #16]
 8001bc4:	e7de      	b.n	8001b84 <HAL_PCD_IRQHandler+0x3e0>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001bc6:	6820      	ldr	r0, [r4, #0]
 8001bc8:	f001 f83a 	bl	8002c40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bcc:	6820      	ldr	r0, [r4, #0]
 8001bce:	f000 fced 	bl	80025ac <USB_GetDevSpeed>
 8001bd2:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bd4:	6825      	ldr	r5, [r4, #0]
 8001bd6:	f000 f9c7 	bl	8001f68 <HAL_RCC_GetHCLKFreq>
 8001bda:	7b22      	ldrb	r2, [r4, #12]
 8001bdc:	4601      	mov	r1, r0
 8001bde:	4628      	mov	r0, r5
 8001be0:	f000 fb54 	bl	800228c <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001be4:	4620      	mov	r0, r4
 8001be6:	f002 f858 	bl	8003c9a <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001bea:	6822      	ldr	r2, [r4, #0]
 8001bec:	6953      	ldr	r3, [r2, #20]
 8001bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf2:	6153      	str	r3, [r2, #20]
 8001bf4:	e640      	b.n	8001878 <HAL_PCD_IRQHandler+0xd4>
      HAL_PCD_SOFCallback(hpcd);
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f002 f849 	bl	8003c8e <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bfc:	6822      	ldr	r2, [r4, #0]
 8001bfe:	6953      	ldr	r3, [r2, #20]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	6153      	str	r3, [r2, #20]
 8001c06:	e63e      	b.n	8001886 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f002 f880 	bl	8003d10 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c10:	6822      	ldr	r2, [r4, #0]
 8001c12:	6953      	ldr	r3, [r2, #20]
 8001c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c18:	6153      	str	r3, [r2, #20]
 8001c1a:	e63b      	b.n	8001894 <HAL_PCD_IRQHandler+0xf0>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f002 f870 	bl	8003d04 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c24:	6822      	ldr	r2, [r4, #0]
 8001c26:	6953      	ldr	r3, [r2, #20]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	6153      	str	r3, [r2, #20]
 8001c2e:	e638      	b.n	80018a2 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_ConnectCallback(hpcd);
 8001c30:	4620      	mov	r0, r4
 8001c32:	f002 f873 	bl	8003d1c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c36:	6822      	ldr	r2, [r4, #0]
 8001c38:	6953      	ldr	r3, [r2, #20]
 8001c3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c3e:	6153      	str	r3, [r2, #20]
 8001c40:	e636      	b.n	80018b0 <HAL_PCD_IRQHandler+0x10c>
        HAL_PCD_DisconnectCallback(hpcd);
 8001c42:	4620      	mov	r0, r4
 8001c44:	f002 f870 	bl	8003d28 <HAL_PCD_DisconnectCallback>
 8001c48:	e63f      	b.n	80018ca <HAL_PCD_IRQHandler+0x126>

08001c4a <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001c4a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d00d      	beq.n	8001c6e <HAL_PCD_SetAddress+0x24>
{
 8001c52:	b510      	push	{r4, lr}
 8001c54:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001c56:	2301      	movs	r3, #1
 8001c58:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c5c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c60:	6800      	ldr	r0, [r0, #0]
 8001c62:	f000 ff8c 	bl	8002b7e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001c6c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001c6e:	2002      	movs	r0, #2
}
 8001c70:	4770      	bx	lr

08001c72 <HAL_PCD_EP_Open>:
{
 8001c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8001c74:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c78:	d128      	bne.n	8001ccc <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7a:	f001 060f 	and.w	r6, r1, #15
 8001c7e:	00f5      	lsls	r5, r6, #3
 8001c80:	1baf      	subs	r7, r5, r6
 8001c82:	00bc      	lsls	r4, r7, #2
 8001c84:	4627      	mov	r7, r4
 8001c86:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001c8a:	4404      	add	r4, r0
 8001c8c:	3404      	adds	r4, #4
    ep->is_in = 0U;
 8001c8e:	463e      	mov	r6, r7
 8001c90:	4406      	add	r6, r0
 8001c92:	2500      	movs	r5, #0
 8001c94:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c98:	f001 010f 	and.w	r1, r1, #15
 8001c9c:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 8001c9e:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 8001ca0:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 8001ca2:	7862      	ldrb	r2, [r4, #1]
 8001ca4:	b102      	cbz	r2, 8001ca8 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8001ca6:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK)
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d01e      	beq.n	8001cea <HAL_PCD_EP_Open+0x78>
  __HAL_LOCK(hpcd);
 8001cac:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d01d      	beq.n	8001cf0 <HAL_PCD_EP_Open+0x7e>
 8001cb4:	4605      	mov	r5, r0
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	6800      	ldr	r0, [r0, #0]
 8001cc0:	f000 fc85 	bl	80025ce <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8001cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	f001 060f 	and.w	r6, r1, #15
 8001cd0:	00f5      	lsls	r5, r6, #3
 8001cd2:	1baf      	subs	r7, r5, r6
 8001cd4:	00bc      	lsls	r4, r7, #2
 8001cd6:	4627      	mov	r7, r4
 8001cd8:	3438      	adds	r4, #56	; 0x38
 8001cda:	4404      	add	r4, r0
 8001cdc:	3404      	adds	r4, #4
    ep->is_in = 1U;
 8001cde:	463e      	mov	r6, r7
 8001ce0:	4406      	add	r6, r0
 8001ce2:	2501      	movs	r5, #1
 8001ce4:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 8001ce8:	e7d6      	b.n	8001c98 <HAL_PCD_EP_Open+0x26>
    ep->data_pid_start = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	7123      	strb	r3, [r4, #4]
 8001cee:	e7dd      	b.n	8001cac <HAL_PCD_EP_Open+0x3a>
  __HAL_LOCK(hpcd);
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	e7ea      	b.n	8001cca <HAL_PCD_EP_Open+0x58>

08001cf4 <HAL_PCD_EP_Close>:
{
 8001cf4:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8001cf6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001cfa:	d121      	bne.n	8001d40 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfc:	f001 050f 	and.w	r5, r1, #15
 8001d00:	00ea      	lsls	r2, r5, #3
 8001d02:	1b54      	subs	r4, r2, r5
 8001d04:	00a3      	lsls	r3, r4, #2
 8001d06:	461c      	mov	r4, r3
 8001d08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d0c:	4403      	add	r3, r0
 8001d0e:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8001d10:	4625      	mov	r5, r4
 8001d12:	4405      	add	r5, r0
 8001d14:	2200      	movs	r2, #0
 8001d16:	f885 21fd 	strb.w	r2, [r5, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d1a:	f001 010f 	and.w	r1, r1, #15
 8001d1e:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 8001d20:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001d24:	2a01      	cmp	r2, #1
 8001d26:	d01a      	beq.n	8001d5e <HAL_PCD_EP_Close+0x6a>
 8001d28:	4604      	mov	r4, r0
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d30:	4619      	mov	r1, r3
 8001d32:	6800      	ldr	r0, [r0, #0]
 8001d34:	f000 fc96 	bl	8002664 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001d3e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d40:	f001 040f 	and.w	r4, r1, #15
 8001d44:	00e2      	lsls	r2, r4, #3
 8001d46:	1b15      	subs	r5, r2, r4
 8001d48:	00ab      	lsls	r3, r5, #2
 8001d4a:	461d      	mov	r5, r3
 8001d4c:	3338      	adds	r3, #56	; 0x38
 8001d4e:	4403      	add	r3, r0
 8001d50:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8001d52:	462c      	mov	r4, r5
 8001d54:	4404      	add	r4, r0
 8001d56:	2201      	movs	r2, #1
 8001d58:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001d5c:	e7dd      	b.n	8001d1a <HAL_PCD_EP_Close+0x26>
  __HAL_LOCK(hpcd);
 8001d5e:	2002      	movs	r0, #2
 8001d60:	e7ed      	b.n	8001d3e <HAL_PCD_EP_Close+0x4a>

08001d62 <HAL_PCD_EP_Receive>:
{
 8001d62:	b570      	push	{r4, r5, r6, lr}
 8001d64:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d68:	00ee      	lsls	r6, r5, #3
 8001d6a:	1b71      	subs	r1, r6, r5
 8001d6c:	008c      	lsls	r4, r1, #2
 8001d6e:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001d72:	4404      	add	r4, r0
 8001d74:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8001d76:	1b76      	subs	r6, r6, r5
 8001d78:	00b4      	lsls	r4, r6, #2
 8001d7a:	4404      	add	r4, r0
 8001d7c:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8001d80:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001d8a:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8e:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8001d92:	6903      	ldr	r3, [r0, #16]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d006      	beq.n	8001da6 <HAL_PCD_EP_Receive+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d98:	b165      	cbz	r5, 8001db4 <HAL_PCD_EP_Receive+0x52>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	6800      	ldr	r0, [r0, #0]
 8001d9e:	f000 fd71 	bl	8002884 <USB_EPStartXfer>
}
 8001da2:	2000      	movs	r0, #0
 8001da4:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001da6:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001daa:	00b4      	lsls	r4, r6, #2
 8001dac:	4404      	add	r4, r0
 8001dae:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 8001db2:	e7f1      	b.n	8001d98 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	6800      	ldr	r0, [r0, #0]
 8001db8:	f000 fcc2 	bl	8002740 <USB_EP0StartXfer>
 8001dbc:	e7f1      	b.n	8001da2 <HAL_PCD_EP_Receive+0x40>

08001dbe <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dbe:	f001 010f 	and.w	r1, r1, #15
 8001dc2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001dc6:	008b      	lsls	r3, r1, #2
 8001dc8:	4418      	add	r0, r3
}
 8001dca:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8001dce:	4770      	bx	lr

08001dd0 <HAL_PCD_EP_Transmit>:
{
 8001dd0:	b570      	push	{r4, r5, r6, lr}
 8001dd2:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd6:	00ee      	lsls	r6, r5, #3
 8001dd8:	1b71      	subs	r1, r6, r5
 8001dda:	008c      	lsls	r4, r1, #2
 8001ddc:	3438      	adds	r4, #56	; 0x38
 8001dde:	4404      	add	r4, r0
 8001de0:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8001de2:	1b76      	subs	r6, r6, r5
 8001de4:	00b4      	lsls	r4, r6, #2
 8001de6:	4404      	add	r4, r0
 8001de8:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8001dea:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8001dfa:	6903      	ldr	r3, [r0, #16]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d006      	beq.n	8001e0e <HAL_PCD_EP_Transmit+0x3e>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e00:	b15d      	cbz	r5, 8001e1a <HAL_PCD_EP_Transmit+0x4a>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	6800      	ldr	r0, [r0, #0]
 8001e06:	f000 fd3d 	bl	8002884 <USB_EPStartXfer>
}
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001e0e:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001e12:	00b4      	lsls	r4, r6, #2
 8001e14:	4404      	add	r4, r0
 8001e16:	64e2      	str	r2, [r4, #76]	; 0x4c
 8001e18:	e7f2      	b.n	8001e00 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	6800      	ldr	r0, [r0, #0]
 8001e1e:	f000 fc8f 	bl	8002740 <USB_EP0StartXfer>
 8001e22:	e7f2      	b.n	8001e0a <HAL_PCD_EP_Transmit+0x3a>

08001e24 <HAL_PCD_EP_SetStall>:
{
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e2a:	6843      	ldr	r3, [r0, #4]
 8001e2c:	429d      	cmp	r5, r3
 8001e2e:	d836      	bhi.n	8001e9e <HAL_PCD_EP_SetStall+0x7a>
  if ((0x80U & ep_addr) == 0x80U)
 8001e30:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e34:	d120      	bne.n	8001e78 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8001e36:	00ca      	lsls	r2, r1, #3
 8001e38:	1a54      	subs	r4, r2, r1
 8001e3a:	00a3      	lsls	r3, r4, #2
 8001e3c:	461c      	mov	r4, r3
 8001e3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e42:	4403      	add	r3, r0
 8001e44:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8001e46:	4622      	mov	r2, r4
 8001e48:	4402      	add	r2, r0
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  ep->is_stall = 1U;
 8001e50:	2201      	movs	r2, #1
 8001e52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e54:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001e56:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001e5a:	2a01      	cmp	r2, #1
 8001e5c:	d021      	beq.n	8001ea2 <HAL_PCD_EP_SetStall+0x7e>
 8001e5e:	4604      	mov	r4, r0
 8001e60:	2201      	movs	r2, #1
 8001e62:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e66:	4619      	mov	r1, r3
 8001e68:	6800      	ldr	r0, [r0, #0]
 8001e6a:	f000 fe2d 	bl	8002ac8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e6e:	b17d      	cbz	r5, 8001e90 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001e76:	e013      	b.n	8001ea0 <HAL_PCD_EP_SetStall+0x7c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e78:	00ea      	lsls	r2, r5, #3
 8001e7a:	1b51      	subs	r1, r2, r5
 8001e7c:	008b      	lsls	r3, r1, #2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	3338      	adds	r3, #56	; 0x38
 8001e82:	4403      	add	r3, r0
 8001e84:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8001e86:	4401      	add	r1, r0
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 8001e8e:	e7df      	b.n	8001e50 <HAL_PCD_EP_SetStall+0x2c>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e90:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001e94:	7c21      	ldrb	r1, [r4, #16]
 8001e96:	6820      	ldr	r0, [r4, #0]
 8001e98:	f000 fee2 	bl	8002c60 <USB_EP0_OutStart>
 8001e9c:	e7e8      	b.n	8001e70 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8001e9e:	2001      	movs	r0, #1
}
 8001ea0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	e7fc      	b.n	8001ea0 <HAL_PCD_EP_SetStall+0x7c>

08001ea6 <HAL_PCD_EP_ClrStall>:
{
 8001ea6:	b510      	push	{r4, lr}
 8001ea8:	f001 040f 	and.w	r4, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001eac:	6843      	ldr	r3, [r0, #4]
 8001eae:	429c      	cmp	r4, r3
 8001eb0:	d82c      	bhi.n	8001f0c <HAL_PCD_EP_ClrStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8001eb2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001eb6:	d11d      	bne.n	8001ef4 <HAL_PCD_EP_ClrStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb8:	00e3      	lsls	r3, r4, #3
 8001eba:	1b1a      	subs	r2, r3, r4
 8001ebc:	0091      	lsls	r1, r2, #2
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001ec4:	4401      	add	r1, r0
 8001ec6:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001ec8:	4402      	add	r2, r0
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed4:	700c      	strb	r4, [r1, #0]
  __HAL_LOCK(hpcd);
 8001ed6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d018      	beq.n	8001f10 <HAL_PCD_EP_ClrStall+0x6a>
 8001ede:	4604      	mov	r4, r0
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ee6:	6800      	ldr	r0, [r0, #0]
 8001ee8:	f000 fe1b 	bl	8002b22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001ef2:	e00c      	b.n	8001f0e <HAL_PCD_EP_ClrStall+0x68>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef4:	00e3      	lsls	r3, r4, #3
 8001ef6:	1b1a      	subs	r2, r3, r4
 8001ef8:	0091      	lsls	r1, r2, #2
 8001efa:	460a      	mov	r2, r1
 8001efc:	3138      	adds	r1, #56	; 0x38
 8001efe:	4401      	add	r1, r0
 8001f00:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001f02:	4402      	add	r2, r0
 8001f04:	2301      	movs	r3, #1
 8001f06:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
 8001f0a:	e7e1      	b.n	8001ed0 <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8001f0c:	2001      	movs	r0, #1
}
 8001f0e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001f10:	2002      	movs	r0, #2
 8001f12:	e7fc      	b.n	8001f0e <HAL_PCD_EP_ClrStall+0x68>

08001f14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001f14:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001f16:	6804      	ldr	r4, [r0, #0]
 8001f18:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001f1a:	b129      	cbz	r1, 8001f28 <HAL_PCDEx_SetTxFiFo+0x14>
 8001f1c:	460d      	mov	r5, r1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001f1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f20:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	e00c      	b.n	8001f42 <HAL_PCDEx_SetTxFiFo+0x2e>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001f28:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001f2c:	62a0      	str	r0, [r4, #40]	; 0x28
 8001f2e:	e012      	b.n	8001f56 <HAL_PCDEx_SetTxFiFo+0x42>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f30:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001f34:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001f38:	6849      	ldr	r1, [r1, #4]
 8001f3a:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	1e69      	subs	r1, r5, #1
 8001f44:	428b      	cmp	r3, r1
 8001f46:	d3f3      	bcc.n	8001f30 <HAL_PCDEx_SetTxFiFo+0x1c>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001f48:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001f4c:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8001f50:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001f54:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8001f56:	2000      	movs	r0, #0
 8001f58:	bc30      	pop	{r4, r5}
 8001f5a:	4770      	bx	lr

08001f5c <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001f5c:	6803      	ldr	r3, [r0, #0]
 8001f5e:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8001f60:	2000      	movs	r0, #0
 8001f62:	4770      	bx	lr

08001f64 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001f68:	4b01      	ldr	r3, [pc, #4]	; (8001f70 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000200 	.word	0x20000200

08001f74 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8001f74:	b430      	push	{r4, r5}
  assert_param(IS_DAC_ALL_INSTANCE(DACx));
  assert_param(IS_LL_DAC_CHANNEL(DACx, DAC_Channel));
  assert_param(IS_LL_DAC_TRIGGER_SOURCE(DAC_InitStruct->TriggerSource));
  assert_param(IS_LL_DAC_OUTPUT_BUFFER(DAC_InitStruct->OutputBuffer));
  assert_param(IS_LL_DAC_WAVE_AUTO_GENER_MODE(DAC_InitStruct->WaveAutoGeneration));
  if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8001f76:	6853      	ldr	r3, [r2, #4]
  return (READ_BIT(DACx->CR,
 8001f78:	6805      	ldr	r5, [r0, #0]
 8001f7a:	f001 0110 	and.w	r1, r1, #16
 8001f7e:	2401      	movs	r4, #1
 8001f80:	408c      	lsls	r4, r1
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8001f82:	43ac      	bics	r4, r5
 8001f84:	d021      	beq.n	8001fca <LL_DAC_Init+0x56>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8001f86:	b973      	cbnz	r3, 8001fa6 <LL_DAC_Init+0x32>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8001f88:	6803      	ldr	r3, [r0, #0]
 8001f8a:	24fa      	movs	r4, #250	; 0xfa
 8001f8c:	408c      	lsls	r4, r1
 8001f8e:	ea23 0304 	bic.w	r3, r3, r4
 8001f92:	6814      	ldr	r4, [r2, #0]
 8001f94:	68d2      	ldr	r2, [r2, #12]
 8001f96:	4322      	orrs	r2, r4
 8001f98:	fa02 f101 	lsl.w	r1, r2, r1
 8001f9c:	4319      	orrs	r1, r3
 8001f9e:	6001      	str	r1, [r0, #0]
  ErrorStatus status = SUCCESS;
 8001fa0:	2000      	movs	r0, #0
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
  }
  return status;
}
 8001fa2:	bc30      	pop	{r4, r5}
 8001fa4:	4770      	bx	lr
      MODIFY_REG(DACx->CR,
 8001fa6:	6804      	ldr	r4, [r0, #0]
 8001fa8:	f640 75fa 	movw	r5, #4090	; 0xffa
 8001fac:	408d      	lsls	r5, r1
 8001fae:	ea24 0405 	bic.w	r4, r4, r5
 8001fb2:	6815      	ldr	r5, [r2, #0]
 8001fb4:	432b      	orrs	r3, r5
 8001fb6:	6895      	ldr	r5, [r2, #8]
 8001fb8:	432b      	orrs	r3, r5
 8001fba:	68d2      	ldr	r2, [r2, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	fa03 f101 	lsl.w	r1, r3, r1
 8001fc2:	4321      	orrs	r1, r4
 8001fc4:	6001      	str	r1, [r0, #0]
  ErrorStatus status = SUCCESS;
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	e7eb      	b.n	8001fa2 <LL_DAC_Init+0x2e>
    status = ERROR;
 8001fca:	2001      	movs	r0, #1
 8001fcc:	e7e9      	b.n	8001fa2 <LL_DAC_Init+0x2e>

08001fce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001fce:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001fd0:	680a      	ldr	r2, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	fab2 f282 	clz	r2, r2
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001fda:	e02d      	b.n	8002038 <LL_GPIO_Init+0x6a>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001fdc:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001fde:	68c4      	ldr	r4, [r0, #12]
 8001fe0:	fa93 f5a3 	rbit	r5, r3
 8001fe4:	fab5 f585 	clz	r5, r5
 8001fe8:	006d      	lsls	r5, r5, #1
 8001fea:	2703      	movs	r7, #3
 8001fec:	fa07 f505 	lsl.w	r5, r7, r5
 8001ff0:	ea24 0405 	bic.w	r4, r4, r5
 8001ff4:	fa93 f5a3 	rbit	r5, r3
 8001ff8:	fab5 f585 	clz	r5, r5
 8001ffc:	006d      	lsls	r5, r5, #1
 8001ffe:	fa06 f505 	lsl.w	r5, r6, r5
 8002002:	432c      	orrs	r4, r5
 8002004:	60c4      	str	r4, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002006:	684c      	ldr	r4, [r1, #4]
 8002008:	2c02      	cmp	r4, #2
 800200a:	d03f      	beq.n	800208c <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800200c:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800200e:	6805      	ldr	r5, [r0, #0]
 8002010:	fa93 f6a3 	rbit	r6, r3
 8002014:	fab6 f686 	clz	r6, r6
 8002018:	0076      	lsls	r6, r6, #1
 800201a:	2703      	movs	r7, #3
 800201c:	fa07 f606 	lsl.w	r6, r7, r6
 8002020:	ea25 0506 	bic.w	r5, r5, r6
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa04 f303 	lsl.w	r3, r4, r3
 8002032:	432b      	orrs	r3, r5
 8002034:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8002036:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002038:	680b      	ldr	r3, [r1, #0]
 800203a:	fa33 f402 	lsrs.w	r4, r3, r2
 800203e:	d059      	beq.n	80020f4 <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002040:	2401      	movs	r4, #1
 8002042:	4094      	lsls	r4, r2
    if (currentpin)
 8002044:	4023      	ands	r3, r4
 8002046:	d0f6      	beq.n	8002036 <LL_GPIO_Init+0x68>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002048:	684c      	ldr	r4, [r1, #4]
 800204a:	3c01      	subs	r4, #1
 800204c:	2c01      	cmp	r4, #1
 800204e:	d8c5      	bhi.n	8001fdc <LL_GPIO_Init+0xe>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002050:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002052:	6884      	ldr	r4, [r0, #8]
 8002054:	fa93 f5a3 	rbit	r5, r3
 8002058:	fab5 f585 	clz	r5, r5
 800205c:	006d      	lsls	r5, r5, #1
 800205e:	2703      	movs	r7, #3
 8002060:	fa07 f505 	lsl.w	r5, r7, r5
 8002064:	ea24 0405 	bic.w	r4, r4, r5
 8002068:	fa93 f5a3 	rbit	r5, r3
 800206c:	fab5 f585 	clz	r5, r5
 8002070:	006d      	lsls	r5, r5, #1
 8002072:	fa06 f505 	lsl.w	r5, r6, r5
 8002076:	432c      	orrs	r4, r5
 8002078:	6084      	str	r4, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800207a:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800207c:	6844      	ldr	r4, [r0, #4]
 800207e:	ea24 0403 	bic.w	r4, r4, r3
 8002082:	fb03 f505 	mul.w	r5, r3, r5
 8002086:	432c      	orrs	r4, r5
 8002088:	6044      	str	r4, [r0, #4]
 800208a:	e7a7      	b.n	8001fdc <LL_GPIO_Init+0xe>
 800208c:	fa93 f4a3 	rbit	r4, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002090:	fab4 f484 	clz	r4, r4
 8002094:	2c07      	cmp	r4, #7
 8002096:	d815      	bhi.n	80020c4 <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002098:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800209a:	6a04      	ldr	r4, [r0, #32]
 800209c:	fa93 f5a3 	rbit	r5, r3
 80020a0:	fab5 f585 	clz	r5, r5
 80020a4:	00ad      	lsls	r5, r5, #2
 80020a6:	270f      	movs	r7, #15
 80020a8:	fa07 f505 	lsl.w	r5, r7, r5
 80020ac:	ea24 0405 	bic.w	r4, r4, r5
 80020b0:	fa93 f5a3 	rbit	r5, r3
 80020b4:	fab5 f585 	clz	r5, r5
 80020b8:	00ad      	lsls	r5, r5, #2
 80020ba:	fa06 f505 	lsl.w	r5, r6, r5
 80020be:	432c      	orrs	r4, r5
 80020c0:	6204      	str	r4, [r0, #32]
 80020c2:	e7a3      	b.n	800200c <LL_GPIO_Init+0x3e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020c4:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80020c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80020c8:	0a1c      	lsrs	r4, r3, #8
 80020ca:	fa94 f7a4 	rbit	r7, r4
 80020ce:	fab7 f787 	clz	r7, r7
 80020d2:	00bf      	lsls	r7, r7, #2
 80020d4:	f04f 0c0f 	mov.w	ip, #15
 80020d8:	fa0c f707 	lsl.w	r7, ip, r7
 80020dc:	ea26 0607 	bic.w	r6, r6, r7
 80020e0:	fa94 f4a4 	rbit	r4, r4
 80020e4:	fab4 f484 	clz	r4, r4
 80020e8:	00a4      	lsls	r4, r4, #2
 80020ea:	fa05 f404 	lsl.w	r4, r5, r4
 80020ee:	4334      	orrs	r4, r6
 80020f0:	6244      	str	r4, [r0, #36]	; 0x24
 80020f2:	e78b      	b.n	800200c <LL_GPIO_Init+0x3e>
  }

  return (SUCCESS);
}
 80020f4:	2000      	movs	r0, #0
 80020f6:	bcf0      	pop	{r4, r5, r6, r7}
 80020f8:	4770      	bx	lr
	...

080020fc <LL_TIM_Init>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80020fc:	6803      	ldr	r3, [r0, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020fe:	4a30      	ldr	r2, [pc, #192]	; (80021c0 <LL_TIM_Init+0xc4>)
 8002100:	4290      	cmp	r0, r2
 8002102:	d012      	beq.n	800212a <LL_TIM_Init+0x2e>
 8002104:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002108:	d00f      	beq.n	800212a <LL_TIM_Init+0x2e>
 800210a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800210e:	4290      	cmp	r0, r2
 8002110:	d00b      	beq.n	800212a <LL_TIM_Init+0x2e>
 8002112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002116:	4290      	cmp	r0, r2
 8002118:	d007      	beq.n	800212a <LL_TIM_Init+0x2e>
 800211a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800211e:	4290      	cmp	r0, r2
 8002120:	d003      	beq.n	800212a <LL_TIM_Init+0x2e>
 8002122:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002126:	4290      	cmp	r0, r2
 8002128:	d103      	bne.n	8002132 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	684a      	ldr	r2, [r1, #4]
 8002130:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002132:	4a23      	ldr	r2, [pc, #140]	; (80021c0 <LL_TIM_Init+0xc4>)
 8002134:	4290      	cmp	r0, r2
 8002136:	d02a      	beq.n	800218e <LL_TIM_Init+0x92>
 8002138:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800213c:	d027      	beq.n	800218e <LL_TIM_Init+0x92>
 800213e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002142:	4290      	cmp	r0, r2
 8002144:	d023      	beq.n	800218e <LL_TIM_Init+0x92>
 8002146:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800214a:	4290      	cmp	r0, r2
 800214c:	d01f      	beq.n	800218e <LL_TIM_Init+0x92>
 800214e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002152:	4290      	cmp	r0, r2
 8002154:	d01b      	beq.n	800218e <LL_TIM_Init+0x92>
 8002156:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800215a:	4290      	cmp	r0, r2
 800215c:	d017      	beq.n	800218e <LL_TIM_Init+0x92>
 800215e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002162:	4290      	cmp	r0, r2
 8002164:	d013      	beq.n	800218e <LL_TIM_Init+0x92>
 8002166:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800216a:	4290      	cmp	r0, r2
 800216c:	d00f      	beq.n	800218e <LL_TIM_Init+0x92>
 800216e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002172:	4290      	cmp	r0, r2
 8002174:	d00b      	beq.n	800218e <LL_TIM_Init+0x92>
 8002176:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800217a:	4290      	cmp	r0, r2
 800217c:	d007      	beq.n	800218e <LL_TIM_Init+0x92>
 800217e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002182:	4290      	cmp	r0, r2
 8002184:	d003      	beq.n	800218e <LL_TIM_Init+0x92>
 8002186:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800218a:	4290      	cmp	r0, r2
 800218c:	d103      	bne.n	8002196 <LL_TIM_Init+0x9a>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800218e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002192:	68ca      	ldr	r2, [r1, #12]
 8002194:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002196:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002198:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800219a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800219c:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800219e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <LL_TIM_Init+0xc4>)
 80021a2:	4298      	cmp	r0, r3
 80021a4:	d003      	beq.n	80021ae <LL_TIM_Init+0xb2>
 80021a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021aa:	4298      	cmp	r0, r3
 80021ac:	d101      	bne.n	80021b2 <LL_TIM_Init+0xb6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80021ae:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80021b0:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80021b2:	6943      	ldr	r3, [r0, #20]
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80021ba:	2000      	movs	r0, #0
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40010000 	.word	0x40010000

080021c4 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80021c4:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80021c6:	3301      	adds	r3, #1
 80021c8:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <USB_CoreReset+0x38>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d811      	bhi.n	80021f2 <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80021ce:	6902      	ldr	r2, [r0, #16]
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	daf8      	bge.n	80021c6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80021d4:	6903      	ldr	r3, [r0, #16]
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6103      	str	r3, [r0, #16]
  count = 0U;
 80021dc:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80021de:	3301      	adds	r3, #1
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <USB_CoreReset+0x38>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d807      	bhi.n	80021f6 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80021e6:	6902      	ldr	r2, [r0, #16]
 80021e8:	f012 0f01 	tst.w	r2, #1
 80021ec:	d1f7      	bne.n	80021de <USB_CoreReset+0x1a>

  return HAL_OK;
 80021ee:	2000      	movs	r0, #0
 80021f0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80021f2:	2003      	movs	r0, #3
 80021f4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80021f6:	2003      	movs	r0, #3
}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	00030d40 	.word	0x00030d40

08002200 <USB_CoreInit>:
{
 8002200:	b084      	sub	sp, #16
 8002202:	b510      	push	{r4, lr}
 8002204:	4604      	mov	r4, r0
 8002206:	a803      	add	r0, sp, #12
 8002208:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800220c:	9b08      	ldr	r3, [sp, #32]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d11f      	bne.n	8002252 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002212:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800221a:	68e3      	ldr	r3, [r4, #12]
 800221c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002224:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002226:	68e3      	ldr	r3, [r4, #12]
 8002228:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800222c:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 800222e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002230:	2b01      	cmp	r3, #1
 8002232:	d009      	beq.n	8002248 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff ffc5 	bl	80021c4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800223a:	9b06      	ldr	r3, [sp, #24]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d01b      	beq.n	8002278 <USB_CoreInit+0x78>
}
 8002240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002244:	b004      	add	sp, #16
 8002246:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002248:	68e3      	ldr	r3, [r4, #12]
 800224a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800224e:	60e3      	str	r3, [r4, #12]
 8002250:	e7f0      	b.n	8002234 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002252:	68e3      	ldr	r3, [r4, #12]
 8002254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002258:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800225a:	4620      	mov	r0, r4
 800225c:	f7ff ffb2 	bl	80021c4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002262:	b923      	cbnz	r3, 800226e <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	63a3      	str	r3, [r4, #56]	; 0x38
 800226c:	e7e5      	b.n	800223a <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800226e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002274:	63a3      	str	r3, [r4, #56]	; 0x38
 8002276:	e7e0      	b.n	800223a <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002278:	68a3      	ldr	r3, [r4, #8]
 800227a:	f043 0306 	orr.w	r3, r3, #6
 800227e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002280:	68a3      	ldr	r3, [r4, #8]
 8002282:	f043 0320 	orr.w	r3, r3, #32
 8002286:	60a3      	str	r3, [r4, #8]
 8002288:	e7da      	b.n	8002240 <USB_CoreInit+0x40>
	...

0800228c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800228c:	2a02      	cmp	r2, #2
 800228e:	d00a      	beq.n	80022a6 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002290:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002292:	68c2      	ldr	r2, [r0, #12]
 8002294:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8002298:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800229a:	68c3      	ldr	r3, [r0, #12]
 800229c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80022a0:	60c3      	str	r3, [r0, #12]
}
 80022a2:	2000      	movs	r0, #0
 80022a4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <USB_SetTurnaroundTime+0xc4>)
 80022a8:	440b      	add	r3, r1
 80022aa:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <USB_SetTurnaroundTime+0xc8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d93f      	bls.n	8002330 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <USB_SetTurnaroundTime+0xcc>)
 80022b2:	440b      	add	r3, r1
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <USB_SetTurnaroundTime+0xd0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d93c      	bls.n	8002334 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80022ba:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80022be:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80022c2:	4a27      	ldr	r2, [pc, #156]	; (8002360 <USB_SetTurnaroundTime+0xd4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d937      	bls.n	8002338 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80022c8:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80022cc:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80022d0:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80022d4:	32a0      	adds	r2, #160	; 0xa0
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d930      	bls.n	800233c <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80022da:	4b22      	ldr	r3, [pc, #136]	; (8002364 <USB_SetTurnaroundTime+0xd8>)
 80022dc:	440b      	add	r3, r1
 80022de:	4a22      	ldr	r2, [pc, #136]	; (8002368 <USB_SetTurnaroundTime+0xdc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d92d      	bls.n	8002340 <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <USB_SetTurnaroundTime+0xe0>)
 80022e6:	440b      	add	r3, r1
 80022e8:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 80022ec:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d927      	bls.n	8002344 <USB_SetTurnaroundTime+0xb8>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <USB_SetTurnaroundTime+0xe4>)
 80022f6:	440b      	add	r3, r1
 80022f8:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 80022fc:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8002300:	4293      	cmp	r3, r2
 8002302:	d921      	bls.n	8002348 <USB_SetTurnaroundTime+0xbc>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002304:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8002308:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 800230c:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8002310:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8002314:	4293      	cmp	r3, r2
 8002316:	d919      	bls.n	800234c <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <USB_SetTurnaroundTime+0xe8>)
 800231a:	440b      	add	r3, r1
 800231c:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 8002320:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <USB_SetTurnaroundTime+0xa0>
      UsbTrd = 0x6U;
 8002328:	2106      	movs	r1, #6
 800232a:	e7b2      	b.n	8002292 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x7U;
 800232c:	2107      	movs	r1, #7
 800232e:	e7b0      	b.n	8002292 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 8002330:	210f      	movs	r1, #15
 8002332:	e7ae      	b.n	8002292 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8002334:	210e      	movs	r1, #14
 8002336:	e7ac      	b.n	8002292 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8002338:	210d      	movs	r1, #13
 800233a:	e7aa      	b.n	8002292 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 800233c:	210c      	movs	r1, #12
 800233e:	e7a8      	b.n	8002292 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 8002340:	210b      	movs	r1, #11
 8002342:	e7a6      	b.n	8002292 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8002344:	210a      	movs	r1, #10
 8002346:	e7a4      	b.n	8002292 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8002348:	2109      	movs	r1, #9
 800234a:	e7a2      	b.n	8002292 <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 800234c:	2108      	movs	r1, #8
 800234e:	e7a0      	b.n	8002292 <USB_SetTurnaroundTime+0x6>
 8002350:	ff275340 	.word	0xff275340
 8002354:	000c34ff 	.word	0x000c34ff
 8002358:	ff1b1e40 	.word	0xff1b1e40
 800235c:	000f423f 	.word	0x000f423f
 8002360:	00124f7f 	.word	0x00124f7f
 8002364:	fee5b660 	.word	0xfee5b660
 8002368:	0016e35f 	.word	0x0016e35f
 800236c:	feced300 	.word	0xfeced300
 8002370:	feb35bc0 	.word	0xfeb35bc0
 8002374:	fe5954e0 	.word	0xfe5954e0

08002378 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002378:	6883      	ldr	r3, [r0, #8]
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6083      	str	r3, [r0, #8]
}
 8002380:	2000      	movs	r0, #0
 8002382:	4770      	bx	lr

08002384 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002384:	6883      	ldr	r3, [r0, #8]
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	6083      	str	r3, [r0, #8]
}
 800238c:	2000      	movs	r0, #0
 800238e:	4770      	bx	lr

08002390 <USB_SetCurrentMode>:
{
 8002390:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002392:	68c3      	ldr	r3, [r0, #12]
 8002394:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002398:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800239a:	2901      	cmp	r1, #1
 800239c:	d009      	beq.n	80023b2 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 800239e:	b969      	cbnz	r1, 80023bc <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80023a0:	68c3      	ldr	r3, [r0, #12]
 80023a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023a6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80023a8:	2032      	movs	r0, #50	; 0x32
 80023aa:	f7fe fed5 	bl	8001158 <HAL_Delay>
  return HAL_OK;
 80023ae:	2000      	movs	r0, #0
}
 80023b0:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80023b2:	68c3      	ldr	r3, [r0, #12]
 80023b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023b8:	60c3      	str	r3, [r0, #12]
 80023ba:	e7f5      	b.n	80023a8 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 80023bc:	2001      	movs	r0, #1
 80023be:	e7f7      	b.n	80023b0 <USB_SetCurrentMode+0x20>

080023c0 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80023c0:	0189      	lsls	r1, r1, #6
 80023c2:	f041 0120 	orr.w	r1, r1, #32
 80023c6:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 80023c8:	2300      	movs	r3, #0
    if (++count > 200000U)
 80023ca:	3301      	adds	r3, #1
 80023cc:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <USB_FlushTxFifo+0x24>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d805      	bhi.n	80023de <USB_FlushTxFifo+0x1e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80023d2:	6902      	ldr	r2, [r0, #16]
 80023d4:	f012 0f20 	tst.w	r2, #32
 80023d8:	d1f7      	bne.n	80023ca <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80023da:	2000      	movs	r0, #0
 80023dc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80023de:	2003      	movs	r0, #3
}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	00030d40 	.word	0x00030d40

080023e8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80023e8:	2310      	movs	r3, #16
 80023ea:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 80023ec:	2300      	movs	r3, #0
    if (++count > 200000U)
 80023ee:	3301      	adds	r3, #1
 80023f0:	4a05      	ldr	r2, [pc, #20]	; (8002408 <USB_FlushRxFifo+0x20>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d805      	bhi.n	8002402 <USB_FlushRxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80023f6:	6902      	ldr	r2, [r0, #16]
 80023f8:	f012 0f10 	tst.w	r2, #16
 80023fc:	d1f7      	bne.n	80023ee <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80023fe:	2000      	movs	r0, #0
 8002400:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002402:	2003      	movs	r0, #3
}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	00030d40 	.word	0x00030d40

0800240c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800240c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002410:	4319      	orrs	r1, r3
 8002412:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002416:	2000      	movs	r0, #0
 8002418:	4770      	bx	lr
	...

0800241c <USB_DevInit>:
{
 800241c:	b084      	sub	sp, #16
 800241e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002422:	4604      	mov	r4, r0
 8002424:	a807      	add	r0, sp, #28
 8002426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242a:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 800242c:	2300      	movs	r3, #0
 800242e:	e006      	b.n	800243e <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8002430:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002434:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002438:	2100      	movs	r1, #0
 800243a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 800243c:	3301      	adds	r3, #1
 800243e:	2b0e      	cmp	r3, #14
 8002440:	d9f6      	bls.n	8002430 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8002442:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002444:	bb23      	cbnz	r3, 8002490 <USB_DevInit+0x74>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002446:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800244a:	f043 0302 	orr.w	r3, r3, #2
 800244e:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002458:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800245a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800245c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002460:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002462:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002468:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002470:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8002474:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002478:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800247c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800247e:	2b01      	cmp	r3, #1
 8002480:	d114      	bne.n	80024ac <USB_DevInit+0x90>
    if (cfg.speed == USBD_HS_SPEED)
 8002482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002484:	b96b      	cbnz	r3, 80024a2 <USB_DevInit+0x86>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002486:	2100      	movs	r1, #0
 8002488:	4620      	mov	r0, r4
 800248a:	f7ff ffbf 	bl	800240c <USB_SetDevSpeed>
 800248e:	e011      	b.n	80024b4 <USB_DevInit+0x98>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002490:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002496:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002498:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800249a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800249e:	63a3      	str	r3, [r4, #56]	; 0x38
 80024a0:	e7e3      	b.n	800246a <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80024a2:	2101      	movs	r1, #1
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff ffb1 	bl	800240c <USB_SetDevSpeed>
 80024aa:	e003      	b.n	80024b4 <USB_DevInit+0x98>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80024ac:	2103      	movs	r1, #3
 80024ae:	4620      	mov	r0, r4
 80024b0:	f7ff ffac 	bl	800240c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80024b4:	2110      	movs	r1, #16
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7ff ff82 	bl	80023c0 <USB_FlushTxFifo>
 80024bc:	4680      	mov	r8, r0
 80024be:	b108      	cbz	r0, 80024c4 <USB_DevInit+0xa8>
    ret = HAL_ERROR;
 80024c0:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7ff ff8f 	bl	80023e8 <USB_FlushRxFifo>
 80024ca:	b108      	cbz	r0, 80024d0 <USB_DevInit+0xb4>
    ret = HAL_ERROR;
 80024cc:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80024d4:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80024d6:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80024d8:	e00a      	b.n	80024f0 <USB_DevInit+0xd4>
      if (i == 0U)
 80024da:	b9c3      	cbnz	r3, 800250e <USB_DevInit+0xf2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80024dc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80024e0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80024e4:	2200      	movs	r2, #0
 80024e6:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80024e8:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80024ec:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80024ee:	3301      	adds	r3, #1
 80024f0:	9907      	ldr	r1, [sp, #28]
 80024f2:	4299      	cmp	r1, r3
 80024f4:	d910      	bls.n	8002518 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80024f6:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80024fa:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 80024fe:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8002502:	2800      	cmp	r0, #0
 8002504:	dbe9      	blt.n	80024da <USB_DevInit+0xbe>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002506:	2000      	movs	r0, #0
 8002508:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 800250c:	e7ea      	b.n	80024e4 <USB_DevInit+0xc8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800250e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002512:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002516:	e7e5      	b.n	80024e4 <USB_DevInit+0xc8>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002518:	2300      	movs	r3, #0
 800251a:	e00a      	b.n	8002532 <USB_DevInit+0x116>
      if (i == 0U)
 800251c:	b1bb      	cbz	r3, 800254e <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800251e:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 8002522:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002526:	2200      	movs	r2, #0
 8002528:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800252a:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800252e:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002530:	3301      	adds	r3, #1
 8002532:	4299      	cmp	r1, r3
 8002534:	d910      	bls.n	8002558 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002536:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 800253a:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 800253e:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 8002542:	2f00      	cmp	r7, #0
 8002544:	dbea      	blt.n	800251c <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002546:	2700      	movs	r7, #0
 8002548:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 800254c:	e7eb      	b.n	8002526 <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800254e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 8002552:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002556:	e7e6      	b.n	8002526 <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002558:	6933      	ldr	r3, [r6, #16]
 800255a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800255e:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002564:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002568:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800256a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800256c:	b91b      	cbnz	r3, 8002576 <USB_DevInit+0x15a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800256e:	69a3      	ldr	r3, [r4, #24]
 8002570:	f043 0310 	orr.w	r3, r3, #16
 8002574:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002576:	69a2      	ldr	r2, [r4, #24]
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <USB_DevInit+0x18c>)
 800257a:	4313      	orrs	r3, r2
 800257c:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800257e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002580:	b11b      	cbz	r3, 800258a <USB_DevInit+0x16e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002582:	69a3      	ldr	r3, [r4, #24]
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800258a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800258c:	2b01      	cmp	r3, #1
 800258e:	d004      	beq.n	800259a <USB_DevInit+0x17e>
}
 8002590:	4640      	mov	r0, r8
 8002592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002596:	b004      	add	sp, #16
 8002598:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800259a:	69a3      	ldr	r3, [r4, #24]
 800259c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	61a3      	str	r3, [r4, #24]
 80025a6:	e7f3      	b.n	8002590 <USB_DevInit+0x174>
 80025a8:	803c3800 	.word	0x803c3800

080025ac <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80025ac:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80025b0:	f013 0306 	ands.w	r3, r3, #6
 80025b4:	d007      	beq.n	80025c6 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d007      	beq.n	80025ca <USB_GetDevSpeed+0x1e>
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d001      	beq.n	80025c2 <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 80025be:	200f      	movs	r0, #15
}
 80025c0:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 80025c2:	2002      	movs	r0, #2
 80025c4:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 80025c6:	2000      	movs	r0, #0
 80025c8:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 80025ca:	2002      	movs	r0, #2
 80025cc:	4770      	bx	lr

080025ce <USB_ActivateEndpoint>:
{
 80025ce:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 80025d0:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80025d2:	784a      	ldrb	r2, [r1, #1]
 80025d4:	2a01      	cmp	r2, #1
 80025d6:	d022      	beq.n	800261e <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80025d8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80025dc:	f003 060f 	and.w	r6, r3, #15
 80025e0:	2401      	movs	r4, #1
 80025e2:	40b4      	lsls	r4, r6
 80025e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80025e8:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80025ec:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80025f0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80025f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80025f8:	d10e      	bne.n	8002618 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80025fa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80025fe:	688a      	ldr	r2, [r1, #8]
 8002600:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002604:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002606:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 800260a:	4313      	orrs	r3, r2
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002614:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002618:	2000      	movs	r0, #0
 800261a:	bc70      	pop	{r4, r5, r6}
 800261c:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800261e:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 8002622:	f003 060f 	and.w	r6, r3, #15
 8002626:	40b2      	lsls	r2, r6
 8002628:	b292      	uxth	r2, r2
 800262a:	4322      	orrs	r2, r4
 800262c:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002630:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002634:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002638:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800263c:	d1ec      	bne.n	8002618 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800263e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002642:	688c      	ldr	r4, [r1, #8]
 8002644:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002648:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800264a:	ea44 4481 	orr.w	r4, r4, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800264e:	ea44 5383 	orr.w	r3, r4, r3, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002652:	4313      	orrs	r3, r2
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002660:	e7da      	b.n	8002618 <USB_ActivateEndpoint+0x4a>
	...

08002664 <USB_DeactivateEndpoint>:
{
 8002664:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8002666:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002668:	784a      	ldrb	r2, [r1, #1]
 800266a:	2a01      	cmp	r2, #1
 800266c:	d024      	beq.n	80026b8 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800266e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002672:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002676:	2a00      	cmp	r2, #0
 8002678:	db50      	blt.n	800271c <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800267a:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800267e:	780a      	ldrb	r2, [r1, #0]
 8002680:	f002 020f 	and.w	r2, r2, #15
 8002684:	2401      	movs	r4, #1
 8002686:	fa04 f202 	lsl.w	r2, r4, r2
 800268a:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 800268e:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002692:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8002696:	7809      	ldrb	r1, [r1, #0]
 8002698:	f001 010f 	and.w	r1, r1, #15
 800269c:	408c      	lsls	r4, r1
 800269e:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 80026a2:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80026a6:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 80026aa:	4a23      	ldr	r2, [pc, #140]	; (8002738 <USB_DeactivateEndpoint+0xd4>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80026b2:	2000      	movs	r0, #0
 80026b4:	bc30      	pop	{r4, r5}
 80026b6:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80026b8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80026bc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80026c0:	2a00      	cmp	r2, #0
 80026c2:	db1e      	blt.n	8002702 <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80026c4:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 80026c8:	780a      	ldrb	r2, [r1, #0]
 80026ca:	f002 020f 	and.w	r2, r2, #15
 80026ce:	2401      	movs	r4, #1
 80026d0:	fa04 f202 	lsl.w	r2, r4, r2
 80026d4:	b292      	uxth	r2, r2
 80026d6:	ea25 0202 	bic.w	r2, r5, r2
 80026da:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80026de:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80026e2:	7809      	ldrb	r1, [r1, #0]
 80026e4:	f001 010f 	and.w	r1, r1, #15
 80026e8:	408c      	lsls	r4, r1
 80026ea:	b2a4      	uxth	r4, r4
 80026ec:	ea22 0404 	bic.w	r4, r2, r4
 80026f0:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80026f4:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 80026f8:	4a10      	ldr	r2, [pc, #64]	; (800273c <USB_DeactivateEndpoint+0xd8>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002700:	e7d7      	b.n	80026b2 <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002702:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002706:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800270a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800270e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002712:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002716:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800271a:	e7d3      	b.n	80026c4 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800271c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002720:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002724:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8002728:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800272c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002730:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002734:	e7a1      	b.n	800267a <USB_DeactivateEndpoint+0x16>
 8002736:	bf00      	nop
 8002738:	eff37800 	.word	0xeff37800
 800273c:	ec337800 	.word	0xec337800

08002740 <USB_EP0StartXfer>:
{
 8002740:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8002742:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002744:	784c      	ldrb	r4, [r1, #1]
 8002746:	2c01      	cmp	r4, #1
 8002748:	d026      	beq.n	8002798 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800274a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800274e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8002752:	691c      	ldr	r4, [r3, #16]
 8002754:	0ce4      	lsrs	r4, r4, #19
 8002756:	04e4      	lsls	r4, r4, #19
 8002758:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800275a:	691c      	ldr	r4, [r3, #16]
 800275c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8002760:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002764:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8002766:	694c      	ldr	r4, [r1, #20]
 8002768:	b10c      	cbz	r4, 800276e <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 800276a:	688c      	ldr	r4, [r1, #8]
 800276c:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800276e:	691c      	ldr	r4, [r3, #16]
 8002770:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002774:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002776:	691c      	ldr	r4, [r3, #16]
 8002778:	688d      	ldr	r5, [r1, #8]
 800277a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800277e:	432c      	orrs	r4, r5
 8002780:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8002782:	2a01      	cmp	r2, #1
 8002784:	d065      	beq.n	8002852 <USB_EP0StartXfer+0x112>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002786:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800278a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800278e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002792:	2000      	movs	r0, #0
 8002794:	bc70      	pop	{r4, r5, r6}
 8002796:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8002798:	694c      	ldr	r4, [r1, #20]
 800279a:	bb6c      	cbnz	r4, 80027f8 <USB_EP0StartXfer+0xb8>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800279c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80027a0:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80027a4:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80027a8:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80027ac:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80027b0:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80027b4:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80027b8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80027bc:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80027c0:	0ced      	lsrs	r5, r5, #19
 80027c2:	04ed      	lsls	r5, r5, #19
 80027c4:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 80027c8:	2a01      	cmp	r2, #1
 80027ca:	d033      	beq.n	8002834 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80027cc:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80027d0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80027d4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80027d8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80027dc:	694b      	ldr	r3, [r1, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0d7      	beq.n	8002792 <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80027e2:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80027e6:	7809      	ldrb	r1, [r1, #0]
 80027e8:	f001 040f 	and.w	r4, r1, #15
 80027ec:	2101      	movs	r1, #1
 80027ee:	40a1      	lsls	r1, r4
 80027f0:	430a      	orrs	r2, r1
 80027f2:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 80027f6:	e7cc      	b.n	8002792 <USB_EP0StartXfer+0x52>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80027f8:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80027fc:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8002800:	6925      	ldr	r5, [r4, #16]
 8002802:	0ced      	lsrs	r5, r5, #19
 8002804:	04ed      	lsls	r5, r5, #19
 8002806:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002808:	6925      	ldr	r5, [r4, #16]
 800280a:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800280e:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002812:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002814:	694e      	ldr	r6, [r1, #20]
 8002816:	688d      	ldr	r5, [r1, #8]
 8002818:	42ae      	cmp	r6, r5
 800281a:	d900      	bls.n	800281e <USB_EP0StartXfer+0xde>
        ep->xfer_len = ep->maxpacket;
 800281c:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800281e:	6925      	ldr	r5, [r4, #16]
 8002820:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002824:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002826:	6925      	ldr	r5, [r4, #16]
 8002828:	694e      	ldr	r6, [r1, #20]
 800282a:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800282e:	4335      	orrs	r5, r6
 8002830:	6125      	str	r5, [r4, #16]
 8002832:	e7c9      	b.n	80027c8 <USB_EP0StartXfer+0x88>
      if ((uint32_t)ep->dma_addr != 0U)
 8002834:	690a      	ldr	r2, [r1, #16]
 8002836:	b11a      	cbz	r2, 8002840 <USB_EP0StartXfer+0x100>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002838:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 800283c:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002840:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002844:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002848:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800284c:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8002850:	e79f      	b.n	8002792 <USB_EP0StartXfer+0x52>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002852:	68ca      	ldr	r2, [r1, #12]
 8002854:	2a00      	cmp	r2, #0
 8002856:	d096      	beq.n	8002786 <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002858:	615a      	str	r2, [r3, #20]
 800285a:	e794      	b.n	8002786 <USB_EP0StartXfer+0x46>

0800285c <USB_WritePacket>:
{
 800285c:	b470      	push	{r4, r5, r6}
 800285e:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8002862:	b964      	cbnz	r4, 800287e <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002864:	3303      	adds	r3, #3
 8002866:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8002868:	e007      	b.n	800287a <USB_WritePacket+0x1e>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800286a:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800286e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002872:	f851 6b04 	ldr.w	r6, [r1], #4
 8002876:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8002878:	3401      	adds	r4, #1
 800287a:	42ac      	cmp	r4, r5
 800287c:	d3f5      	bcc.n	800286a <USB_WritePacket+0xe>
}
 800287e:	2000      	movs	r0, #0
 8002880:	bc70      	pop	{r4, r5, r6}
 8002882:	4770      	bx	lr

08002884 <USB_EPStartXfer>:
{
 8002884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002886:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8002888:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800288a:	784c      	ldrb	r4, [r1, #1]
 800288c:	2c01      	cmp	r4, #1
 800288e:	d02b      	beq.n	80028e8 <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002890:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002894:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8002898:	6925      	ldr	r5, [r4, #16]
 800289a:	0ced      	lsrs	r5, r5, #19
 800289c:	04ed      	lsls	r5, r5, #19
 800289e:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80028a0:	6925      	ldr	r5, [r4, #16]
 80028a2:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80028a6:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80028aa:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 80028ac:	694d      	ldr	r5, [r1, #20]
 80028ae:	2d00      	cmp	r5, #0
 80028b0:	f040 80c5 	bne.w	8002a3e <USB_EPStartXfer+0x1ba>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80028b4:	6925      	ldr	r5, [r4, #16]
 80028b6:	688e      	ldr	r6, [r1, #8]
 80028b8:	f3c6 0612 	ubfx	r6, r6, #0, #19
 80028bc:	4335      	orrs	r5, r6
 80028be:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80028c0:	6925      	ldr	r5, [r4, #16]
 80028c2:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80028c6:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 80028c8:	2a01      	cmp	r2, #1
 80028ca:	f000 80cd 	beq.w	8002a68 <USB_EPStartXfer+0x1e4>
    if (ep->type == EP_TYPE_ISOC)
 80028ce:	78ca      	ldrb	r2, [r1, #3]
 80028d0:	2a01      	cmp	r2, #1
 80028d2:	f000 80cf 	beq.w	8002a74 <USB_EPStartXfer+0x1f0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80028d6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80028da:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80028de:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80028e2:	2000      	movs	r0, #0
 80028e4:	b003      	add	sp, #12
 80028e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 80028e8:	694c      	ldr	r4, [r1, #20]
 80028ea:	bb84      	cbnz	r4, 800294e <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80028ec:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80028f0:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80028f4:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80028f8:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80028fc:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002900:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002904:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002908:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800290c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002910:	0ced      	lsrs	r5, r5, #19
 8002912:	04ed      	lsls	r5, r5, #19
 8002914:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8002918:	2a01      	cmp	r2, #1
 800291a:	d04c      	beq.n	80029b6 <USB_EPStartXfer+0x132>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800291c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8002920:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002924:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002928:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800292c:	78cc      	ldrb	r4, [r1, #3]
 800292e:	2c01      	cmp	r4, #1
 8002930:	d06a      	beq.n	8002a08 <USB_EPStartXfer+0x184>
        if (ep->xfer_len > 0U)
 8002932:	694b      	ldr	r3, [r1, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0d4      	beq.n	80028e2 <USB_EPStartXfer+0x5e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002938:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800293c:	7809      	ldrb	r1, [r1, #0]
 800293e:	f001 040f 	and.w	r4, r1, #15
 8002942:	2101      	movs	r1, #1
 8002944:	40a1      	lsls	r1, r4
 8002946:	430a      	orrs	r2, r1
 8002948:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 800294c:	e7c9      	b.n	80028e2 <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800294e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002952:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002956:	0ced      	lsrs	r5, r5, #19
 8002958:	04ed      	lsls	r5, r5, #19
 800295a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800295e:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002962:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002966:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800296a:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800296e:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8002972:	694d      	ldr	r5, [r1, #20]
 8002974:	688f      	ldr	r7, [r1, #8]
 8002976:	443d      	add	r5, r7
 8002978:	3d01      	subs	r5, #1
 800297a:	fbb5 f5f7 	udiv	r5, r5, r7
 800297e:	4f47      	ldr	r7, [pc, #284]	; (8002a9c <USB_EPStartXfer+0x218>)
 8002980:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8002984:	4335      	orrs	r5, r6
 8002986:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800298a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800298e:	694e      	ldr	r6, [r1, #20]
 8002990:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8002994:	4335      	orrs	r5, r6
 8002996:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800299a:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 800299e:	78cd      	ldrb	r5, [r1, #3]
 80029a0:	2d01      	cmp	r5, #1
 80029a2:	d1b9      	bne.n	8002918 <USB_EPStartXfer+0x94>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80029a4:	6925      	ldr	r5, [r4, #16]
 80029a6:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 80029aa:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80029ac:	6925      	ldr	r5, [r4, #16]
 80029ae:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80029b2:	6125      	str	r5, [r4, #16]
 80029b4:	e7b0      	b.n	8002918 <USB_EPStartXfer+0x94>
      if ((uint32_t)ep->dma_addr != 0U)
 80029b6:	690a      	ldr	r2, [r1, #16]
 80029b8:	b11a      	cbz	r2, 80029c2 <USB_EPStartXfer+0x13e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80029ba:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80029be:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 80029c2:	78ca      	ldrb	r2, [r1, #3]
 80029c4:	2a01      	cmp	r2, #1
 80029c6:	d008      	beq.n	80029da <USB_EPStartXfer+0x156>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80029c8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80029cc:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80029d0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80029d4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80029d8:	e783      	b.n	80028e2 <USB_EPStartXfer+0x5e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80029da:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80029de:	f412 7f80 	tst.w	r2, #256	; 0x100
 80029e2:	d108      	bne.n	80029f6 <USB_EPStartXfer+0x172>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80029e4:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 80029e8:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 80029ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80029f0:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 80029f4:	e7e8      	b.n	80029c8 <USB_EPStartXfer+0x144>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80029f6:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 80029fa:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 80029fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a02:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8002a06:	e7df      	b.n	80029c8 <USB_EPStartXfer+0x144>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002a08:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8002a0c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002a10:	d10e      	bne.n	8002a30 <USB_EPStartXfer+0x1ac>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002a12:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002a16:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8002a1a:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8002a1e:	4614      	mov	r4, r2
 8002a20:	460b      	mov	r3, r1
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002a22:	68c9      	ldr	r1, [r1, #12]
 8002a24:	781a      	ldrb	r2, [r3, #0]
 8002a26:	8a9b      	ldrh	r3, [r3, #20]
 8002a28:	9400      	str	r4, [sp, #0]
 8002a2a:	f7ff ff17 	bl	800285c <USB_WritePacket>
 8002a2e:	e758      	b.n	80028e2 <USB_EPStartXfer+0x5e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002a30:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002a34:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002a38:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8002a3c:	e7ef      	b.n	8002a1e <USB_EPStartXfer+0x19a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002a3e:	688e      	ldr	r6, [r1, #8]
 8002a40:	4435      	add	r5, r6
 8002a42:	3d01      	subs	r5, #1
 8002a44:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002a48:	6926      	ldr	r6, [r4, #16]
 8002a4a:	4f14      	ldr	r7, [pc, #80]	; (8002a9c <USB_EPStartXfer+0x218>)
 8002a4c:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8002a50:	433e      	orrs	r6, r7
 8002a52:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002a54:	6927      	ldr	r7, [r4, #16]
 8002a56:	688e      	ldr	r6, [r1, #8]
 8002a58:	b2ad      	uxth	r5, r5
 8002a5a:	fb06 f505 	mul.w	r5, r6, r5
 8002a5e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002a62:	433d      	orrs	r5, r7
 8002a64:	6125      	str	r5, [r4, #16]
 8002a66:	e72f      	b.n	80028c8 <USB_EPStartXfer+0x44>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002a68:	68ca      	ldr	r2, [r1, #12]
 8002a6a:	2a00      	cmp	r2, #0
 8002a6c:	f43f af2f 	beq.w	80028ce <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002a70:	6162      	str	r2, [r4, #20]
 8002a72:	e72c      	b.n	80028ce <USB_EPStartXfer+0x4a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002a74:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8002a78:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002a7c:	d106      	bne.n	8002a8c <USB_EPStartXfer+0x208>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002a7e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002a82:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a86:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002a8a:	e724      	b.n	80028d6 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002a8c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002a90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a94:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002a98:	e71d      	b.n	80028d6 <USB_EPStartXfer+0x52>
 8002a9a:	bf00      	nop
 8002a9c:	1ff80000 	.word	0x1ff80000

08002aa0 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002aa0:	3203      	adds	r2, #3
 8002aa2:	0892      	lsrs	r2, r2, #2
  for (i = 0U; i < count32b; i++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d20c      	bcs.n	8002ac4 <USB_ReadPacket+0x24>
{
 8002aaa:	b410      	push	{r4}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002aac:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8002ab0:	6824      	ldr	r4, [r4, #0]
 8002ab2:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d3f7      	bcc.n	8002aac <USB_ReadPacket+0xc>
}
 8002abc:	4608      	mov	r0, r1
 8002abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4770      	bx	lr

08002ac8 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002ac8:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002aca:	784a      	ldrb	r2, [r1, #1]
 8002acc:	2a01      	cmp	r2, #1
 8002ace:	d014      	beq.n	8002afa <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002ad0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002ad4:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	db06      	blt.n	8002aea <USB_EPSetStall+0x22>
 8002adc:	b12b      	cbz	r3, 8002aea <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002ade:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002ae2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ae6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002aea:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002af2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002af6:	2000      	movs	r0, #0
 8002af8:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002afa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002afe:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002b02:	2a00      	cmp	r2, #0
 8002b04:	db06      	blt.n	8002b14 <USB_EPSetStall+0x4c>
 8002b06:	b12b      	cbz	r3, 8002b14 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002b08:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002b0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b10:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002b14:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002b18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b1c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002b20:	e7e9      	b.n	8002af6 <USB_EPSetStall+0x2e>

08002b22 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002b22:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002b24:	784a      	ldrb	r2, [r1, #1]
 8002b26:	2a01      	cmp	r2, #1
 8002b28:	d00e      	beq.n	8002b48 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b2a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002b2e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002b32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b36:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002b3a:	78cb      	ldrb	r3, [r1, #3]
 8002b3c:	3b02      	subs	r3, #2
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d915      	bls.n	8002b70 <USB_EPClearStall+0x4e>
}
 8002b44:	2000      	movs	r0, #0
 8002b46:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b48:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002b4c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002b50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b54:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002b58:	78cb      	ldrb	r3, [r1, #3]
 8002b5a:	3b02      	subs	r3, #2
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d8f0      	bhi.n	8002b44 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002b62:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002b6e:	e7e9      	b.n	8002b44 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002b70:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b78:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002b7c:	e7e2      	b.n	8002b44 <USB_EPClearStall+0x22>

08002b7e <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002b7e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002b82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b86:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002b8a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002b8e:	0109      	lsls	r1, r1, #4
 8002b90:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002b94:	430b      	orrs	r3, r1
 8002b96:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	4770      	bx	lr

08002b9e <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002b9e:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8002ba2:	f023 0303 	bic.w	r3, r3, #3
 8002ba6:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002baa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002bae:	f023 0302 	bic.w	r3, r3, #2
 8002bb2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	4770      	bx	lr

08002bba <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002bba:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002bc6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	4770      	bx	lr

08002bd6 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002bd6:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002bd8:	6980      	ldr	r0, [r0, #24]
}
 8002bda:	4010      	ands	r0, r2
 8002bdc:	4770      	bx	lr

08002bde <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002bde:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002be2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002be6:	69c0      	ldr	r0, [r0, #28]
 8002be8:	4018      	ands	r0, r3
}
 8002bea:	0c00      	lsrs	r0, r0, #16
 8002bec:	4770      	bx	lr

08002bee <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002bee:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002bf2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002bf6:	69c0      	ldr	r0, [r0, #28]
 8002bf8:	4018      	ands	r0, r3
}
 8002bfa:	b280      	uxth	r0, r0
 8002bfc:	4770      	bx	lr

08002bfe <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002bfe:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002c02:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002c06:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8002c0a:	6940      	ldr	r0, [r0, #20]
}
 8002c0c:	4010      	ands	r0, r2
 8002c0e:	4770      	bx	lr

08002c10 <USB_ReadDevInEPInterrupt>:
{
 8002c10:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8002c12:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002c16:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002c1a:	f001 020f 	and.w	r2, r1, #15
 8002c1e:	40d3      	lsrs	r3, r2
 8002c20:	01db      	lsls	r3, r3, #7
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002c26:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8002c2a:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002c2e:	6880      	ldr	r0, [r0, #8]
}
 8002c30:	4018      	ands	r0, r3
 8002c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002c38:	6940      	ldr	r0, [r0, #20]
}
 8002c3a:	f000 0001 	and.w	r0, r0, #1
 8002c3e:	4770      	bx	lr

08002c40 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002c40:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002c44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c48:	f023 0307 	bic.w	r3, r3, #7
 8002c4c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002c50:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c58:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	4770      	bx	lr

08002c60 <USB_EP0_OutStart>:
{
 8002c60:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c62:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <USB_EP0_OutStart+0x5c>)
 8002c66:	429c      	cmp	r4, r3
 8002c68:	d903      	bls.n	8002c72 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002c6a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db16      	blt.n	8002ca0 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002c72:	2400      	movs	r4, #0
 8002c74:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002c78:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002c7c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002c80:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002c84:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002c88:	f044 0418 	orr.w	r4, r4, #24
 8002c8c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002c90:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002c94:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8002c98:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8002c9c:	2901      	cmp	r1, #1
 8002c9e:	d003      	beq.n	8002ca8 <USB_EP0_OutStart+0x48>
}
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ca6:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002ca8:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002cac:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002cb0:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8002cb4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002cb8:	e7f2      	b.n	8002ca0 <USB_EP0_OutStart+0x40>
 8002cba:	bf00      	nop
 8002cbc:	4f54300a 	.word	0x4f54300a

08002cc0 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002cc0:	4b01      	ldr	r3, [pc, #4]	; (8002cc8 <LL_SetSystemCoreClock+0x8>)
 8002cc2:	6018      	str	r0, [r3, #0]
}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000200 	.word	0x20000200

08002ccc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8002ccc:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002cce:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002cd2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002cd6:	b15b      	cbz	r3, 8002cf0 <USBD_CDC_EP0_RxReady+0x24>
 8002cd8:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002cdc:	28ff      	cmp	r0, #255	; 0xff
 8002cde:	d007      	beq.n	8002cf0 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002cea:	23ff      	movs	r3, #255	; 0xff
 8002cec:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	bd10      	pop	{r4, pc}

08002cf4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8002cf4:	2343      	movs	r3, #67	; 0x43
 8002cf6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8002cf8:	4800      	ldr	r0, [pc, #0]	; (8002cfc <USBD_CDC_GetFSCfgDesc+0x8>)
 8002cfa:	4770      	bx	lr
 8002cfc:	20000244 	.word	0x20000244

08002d00 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8002d00:	2343      	movs	r3, #67	; 0x43
 8002d02:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8002d04:	4800      	ldr	r0, [pc, #0]	; (8002d08 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002d06:	4770      	bx	lr
 8002d08:	20000288 	.word	0x20000288

08002d0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8002d0c:	2343      	movs	r3, #67	; 0x43
 8002d0e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002d10:	4800      	ldr	r0, [pc, #0]	; (8002d14 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002d12:	4770      	bx	lr
 8002d14:	200002d8 	.word	0x200002d8

08002d18 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8002d18:	230a      	movs	r3, #10
 8002d1a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8002d1c:	4800      	ldr	r0, [pc, #0]	; (8002d20 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002d1e:	4770      	bx	lr
 8002d20:	200002cc 	.word	0x200002cc

08002d24 <USBD_CDC_DataOut>:
{
 8002d24:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002d26:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8002d2a:	b175      	cbz	r5, 8002d4a <USBD_CDC_DataOut+0x26>
 8002d2c:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002d2e:	f001 f84c 	bl	8003dca <USBD_LL_GetRxDataSize>
 8002d32:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002d36:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8002d40:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8002d44:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8002d46:	2000      	movs	r0, #0
}
 8002d48:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	e7fc      	b.n	8002d48 <USBD_CDC_DataOut+0x24>

08002d4e <USBD_CDC_DataIn>:
{
 8002d4e:	b570      	push	{r4, r5, r6, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8002d50:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8002d54:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8002d58:	b355      	cbz	r5, 8002db0 <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8002d5a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002d5e:	0093      	lsls	r3, r2, #2
 8002d60:	4403      	add	r3, r0
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	b96b      	cbnz	r3, 8002d82 <USBD_CDC_DataIn+0x34>
    hcdc->TxState = 0U;
 8002d66:	2400      	movs	r4, #0
 8002d68:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8002d6c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	460a      	mov	r2, r1
 8002d74:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8002d78:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8002d7c:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8002d7e:	4620      	mov	r0, r4
}
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002d82:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8002d86:	00b2      	lsls	r2, r6, #2
 8002d88:	4414      	add	r4, r2
 8002d8a:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8002d8c:	fbb3 f2f4 	udiv	r2, r3, r4
 8002d90:	fb04 3312 	mls	r3, r4, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1e6      	bne.n	8002d66 <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 8002d98:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002d9c:	0093      	lsls	r3, r2, #2
 8002d9e:	4403      	add	r3, r0
 8002da0:	2400      	movs	r4, #0
 8002da2:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002da4:	4623      	mov	r3, r4
 8002da6:	4622      	mov	r2, r4
 8002da8:	f001 f851 	bl	8003e4e <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8002dac:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002dae:	e7e7      	b.n	8002d80 <USBD_CDC_DataIn+0x32>
    return (uint8_t)USBD_FAIL;
 8002db0:	2003      	movs	r0, #3
 8002db2:	e7e5      	b.n	8002d80 <USBD_CDC_DataIn+0x32>

08002db4 <USBD_CDC_Setup>:
{
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	4605      	mov	r5, r0
 8002dba:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002dbc:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8002dc6:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002dca:	780b      	ldrb	r3, [r1, #0]
 8002dcc:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8002dd0:	d027      	beq.n	8002e22 <USBD_CDC_Setup+0x6e>
 8002dd2:	2a20      	cmp	r2, #32
 8002dd4:	d15b      	bne.n	8002e8e <USBD_CDC_Setup+0xda>
    if (req->wLength != 0U)
 8002dd6:	88ca      	ldrh	r2, [r1, #6]
 8002dd8:	b93a      	cbnz	r2, 8002dea <USBD_CDC_Setup+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002dda:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2200      	movs	r2, #0
 8002de2:	7848      	ldrb	r0, [r1, #1]
 8002de4:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8002de6:	2000      	movs	r0, #0
 8002de8:	e054      	b.n	8002e94 <USBD_CDC_Setup+0xe0>
      if ((req->bmRequest & 0x80U) != 0U)
 8002dea:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002dee:	d00c      	beq.n	8002e0a <USBD_CDC_Setup+0x56>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002df0:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	4631      	mov	r1, r6
 8002df8:	7860      	ldrb	r0, [r4, #1]
 8002dfa:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8002dfc:	88e2      	ldrh	r2, [r4, #6]
 8002dfe:	4631      	mov	r1, r6
 8002e00:	4628      	mov	r0, r5
 8002e02:	f000 fdbe 	bl	8003982 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8002e06:	2000      	movs	r0, #0
 8002e08:	e044      	b.n	8002e94 <USBD_CDC_Setup+0xe0>
        hcdc->CmdOpCode = req->bRequest;
 8002e0a:	784b      	ldrb	r3, [r1, #1]
 8002e0c:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8002e10:	798b      	ldrb	r3, [r1, #6]
 8002e12:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8002e16:	88ca      	ldrh	r2, [r1, #6]
 8002e18:	4631      	mov	r1, r6
 8002e1a:	f000 fdc7 	bl	80039ac <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8002e1e:	2000      	movs	r0, #0
 8002e20:	e038      	b.n	8002e94 <USBD_CDC_Setup+0xe0>
    switch (req->bRequest)
 8002e22:	784b      	ldrb	r3, [r1, #1]
 8002e24:	2b0b      	cmp	r3, #11
 8002e26:	d82e      	bhi.n	8002e86 <USBD_CDC_Setup+0xd2>
 8002e28:	e8df f003 	tbb	[pc, r3]
 8002e2c:	2d2d3606 	.word	0x2d2d3606
 8002e30:	2d2d2d2d 	.word	0x2d2d2d2d
 8002e34:	23142d2d 	.word	0x23142d2d
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e38:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d105      	bne.n	8002e4c <USBD_CDC_Setup+0x98>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8002e40:	2202      	movs	r2, #2
 8002e42:	a901      	add	r1, sp, #4
 8002e44:	f000 fd9d 	bl	8003982 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8002e48:	2000      	movs	r0, #0
 8002e4a:	e023      	b.n	8002e94 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8002e4c:	f000 fa66 	bl	800331c <USBD_CtlError>
        ret = USBD_FAIL;
 8002e50:	2003      	movs	r0, #3
 8002e52:	e01f      	b.n	8002e94 <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e54:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d106      	bne.n	8002e6a <USBD_CDC_Setup+0xb6>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f10d 0107 	add.w	r1, sp, #7
 8002e62:	f000 fd8e 	bl	8003982 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8002e66:	2000      	movs	r0, #0
 8002e68:	e014      	b.n	8002e94 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8002e6a:	f000 fa57 	bl	800331c <USBD_CtlError>
        ret = USBD_FAIL;
 8002e6e:	2003      	movs	r0, #3
 8002e70:	e010      	b.n	8002e94 <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002e72:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d101      	bne.n	8002e7e <USBD_CDC_Setup+0xca>
  USBD_StatusTypeDef ret = USBD_OK;
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	e00a      	b.n	8002e94 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8002e7e:	f000 fa4d 	bl	800331c <USBD_CtlError>
        ret = USBD_FAIL;
 8002e82:	2003      	movs	r0, #3
 8002e84:	e006      	b.n	8002e94 <USBD_CDC_Setup+0xe0>
      USBD_CtlError(pdev, req);
 8002e86:	f000 fa49 	bl	800331c <USBD_CtlError>
      ret = USBD_FAIL;
 8002e8a:	2003      	movs	r0, #3
      break;
 8002e8c:	e002      	b.n	8002e94 <USBD_CDC_Setup+0xe0>
    USBD_CtlError(pdev, req);
 8002e8e:	f000 fa45 	bl	800331c <USBD_CtlError>
    ret = USBD_FAIL;
 8002e92:	2003      	movs	r0, #3
}
 8002e94:	b002      	add	sp, #8
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8002e98:	2000      	movs	r0, #0
 8002e9a:	e7fb      	b.n	8002e94 <USBD_CDC_Setup+0xe0>

08002e9c <USBD_CDC_DeInit>:
{
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002ea0:	2181      	movs	r1, #129	; 0x81
 8002ea2:	f000 ffb4 	bl	8003e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002ea6:	2500      	movs	r5, #0
 8002ea8:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4620      	mov	r0, r4
 8002eae:	f000 ffae 	bl	8003e0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002eb2:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002eb6:	2182      	movs	r1, #130	; 0x82
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f000 ffa8 	bl	8003e0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002ebe:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8002ec2:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8002ec6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002eca:	b14b      	cbz	r3, 8002ee0 <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002ecc:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8002ed4:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8002ed8:	f000 fffc 	bl	8003ed4 <free>
    pdev->pClassData = NULL;
 8002edc:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}

08002ee4 <USBD_CDC_Init>:
{
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002ee8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002eec:	f000 ffea 	bl	8003ec4 <malloc>
  if (hcdc == NULL)
 8002ef0:	b3b0      	cbz	r0, 8002f60 <USBD_CDC_Init+0x7c>
 8002ef2:	4605      	mov	r5, r0
  pdev->pClassData = (void *)hcdc;
 8002ef4:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002ef8:	7c23      	ldrb	r3, [r4, #16]
 8002efa:	bbb3      	cbnz	r3, 8002f6a <USBD_CDC_Init+0x86>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f00:	2202      	movs	r2, #2
 8002f02:	2181      	movs	r1, #129	; 0x81
 8002f04:	4620      	mov	r0, r4
 8002f06:	f000 ff77 	bl	8003df8 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002f0a:	2601      	movs	r6, #1
 8002f0c:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f12:	2202      	movs	r2, #2
 8002f14:	4631      	mov	r1, r6
 8002f16:	4620      	mov	r0, r4
 8002f18:	f000 ff6e 	bl	8003df8 <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002f1c:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8002f20:	2310      	movs	r3, #16
 8002f22:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002f26:	2308      	movs	r3, #8
 8002f28:	2203      	movs	r2, #3
 8002f2a:	2182      	movs	r1, #130	; 0x82
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f000 ff63 	bl	8003df8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002f38:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4798      	blx	r3
  hcdc->TxState = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8002f46:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f4a:	7c23      	ldrb	r3, [r4, #16]
 8002f4c:	b30b      	cbz	r3, 8002f92 <USBD_CDC_Init+0xae>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8002f54:	2101      	movs	r1, #1
 8002f56:	4620      	mov	r0, r4
 8002f58:	f000 ff81 	bl	8003e5e <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8002f5c:	2000      	movs	r0, #0
}
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8002f66:	2002      	movs	r0, #2
 8002f68:	e7f9      	b.n	8002f5e <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002f6a:	2340      	movs	r3, #64	; 0x40
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	2181      	movs	r1, #129	; 0x81
 8002f70:	4620      	mov	r0, r4
 8002f72:	f000 ff41 	bl	8003df8 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002f76:	2601      	movs	r6, #1
 8002f78:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002f7a:	2340      	movs	r3, #64	; 0x40
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	4631      	mov	r1, r6
 8002f80:	4620      	mov	r0, r4
 8002f82:	f000 ff39 	bl	8003df8 <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002f86:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8002f90:	e7c9      	b.n	8002f26 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f96:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f000 ff5e 	bl	8003e5e <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e7db      	b.n	8002f5e <USBD_CDC_Init+0x7a>

08002fa6 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8002fa6:	b119      	cbz	r1, 8002fb0 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8002fa8:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8002fac:	2000      	movs	r0, #0
 8002fae:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8002fb0:	2003      	movs	r0, #3
}
 8002fb2:	4770      	bx	lr

08002fb4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002fb4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 8002fb8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8002fbc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	4770      	bx	lr

08002fc4 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002fc4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 8002fc8:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
}
 8002fcc:	2000      	movs	r0, #0
 8002fce:	4770      	bx	lr

08002fd0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002fd0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8002fd4:	b19a      	cbz	r2, 8002ffe <USBD_CDC_ReceivePacket+0x2e>
{
 8002fd6:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002fd8:	7c03      	ldrb	r3, [r0, #16]
 8002fda:	b13b      	cbz	r3, 8002fec <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002fdc:	2340      	movs	r3, #64	; 0x40
 8002fde:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	f000 ff3b 	bl	8003e5e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8002fe8:	2000      	movs	r0, #0
}
 8002fea:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ff0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	f000 ff32 	bl	8003e5e <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	e7f5      	b.n	8002fea <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8002ffe:	2003      	movs	r0, #3
}
 8003000:	4770      	bx	lr

08003002 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003002:	b1c0      	cbz	r0, 8003036 <USBD_Init+0x34>
{
 8003004:	b508      	push	{r3, lr}
 8003006:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8003008:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 800300c:	b110      	cbz	r0, 8003014 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 800300e:	2000      	movs	r0, #0
 8003010:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8003014:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8003018:	b110      	cbz	r0, 8003020 <USBD_Init+0x1e>
  {
    pdev->pConfDesc = NULL;
 800301a:	2000      	movs	r0, #0
 800301c:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003020:	b109      	cbz	r1, 8003026 <USBD_Init+0x24>
  {
    pdev->pDesc = pdesc;
 8003022:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
 8003026:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003028:	2301      	movs	r3, #1
 800302a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800302e:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8003030:	f000 fe80 	bl	8003d34 <USBD_LL_Init>

  return ret;
}
 8003034:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003036:	2003      	movs	r0, #3
}
 8003038:	4770      	bx	lr

0800303a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800303a:	b510      	push	{r4, lr}
 800303c:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8003044:	b159      	cbz	r1, 800305e <USBD_RegisterClass+0x24>
 8003046:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8003048:	f8c4 12b8 	str.w	r1, [r4, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800304c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800304e:	f10d 0006 	add.w	r0, sp, #6
 8003052:	4798      	blx	r3
 8003054:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8003058:	2000      	movs	r0, #0
}
 800305a:	b002      	add	sp, #8
 800305c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800305e:	2003      	movs	r0, #3
 8003060:	e7fb      	b.n	800305a <USBD_RegisterClass+0x20>

08003062 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003062:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003064:	f000 fec0 	bl	8003de8 <USBD_LL_Start>
}
 8003068:	bd08      	pop	{r3, pc}

0800306a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800306a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800306c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003070:	b113      	cbz	r3, 8003078 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4798      	blx	r3
  }

  return ret;
}
 8003076:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003078:	2003      	movs	r0, #3
 800307a:	e7fc      	b.n	8003076 <USBD_SetClassConfig+0xc>

0800307c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800307c:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800307e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003082:	b10b      	cbz	r3, 8003088 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003088:	2000      	movs	r0, #0
 800308a:	bd08      	pop	{r3, pc}

0800308c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003090:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 8003094:	4628      	mov	r0, r5
 8003096:	f000 f92d 	bl	80032f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800309a:	2301      	movs	r3, #1
 800309c:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80030a0:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 80030a4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80030a8:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 80030ac:	f001 031f 	and.w	r3, r1, #31
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d00d      	beq.n	80030d0 <USBD_LL_SetupStage+0x44>
 80030b4:	b13b      	cbz	r3, 80030c6 <USBD_LL_SetupStage+0x3a>
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d00f      	beq.n	80030da <USBD_LL_SetupStage+0x4e>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80030ba:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80030be:	4620      	mov	r0, r4
 80030c0:	f000 fead 	bl	8003e1e <USBD_LL_StallEP>
      break;
 80030c4:	e003      	b.n	80030ce <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80030c6:	4629      	mov	r1, r5
 80030c8:	4620      	mov	r0, r4
 80030ca:	f000 face 	bl	800366a <USBD_StdDevReq>
  }

  return ret;
}
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80030d0:	4629      	mov	r1, r5
 80030d2:	4620      	mov	r0, r4
 80030d4:	f000 fb04 	bl	80036e0 <USBD_StdItfReq>
      break;
 80030d8:	e7f9      	b.n	80030ce <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80030da:	4629      	mov	r1, r5
 80030dc:	4620      	mov	r0, r4
 80030de:	f000 fb33 	bl	8003748 <USBD_StdEPReq>
      break;
 80030e2:	e7f4      	b.n	80030ce <USBD_LL_SetupStage+0x42>

080030e4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80030e4:	b510      	push	{r4, lr}
 80030e6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80030e8:	bb29      	cbnz	r1, 8003136 <USBD_LL_DataOutStage+0x52>
 80030ea:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80030ec:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80030f0:	2a03      	cmp	r2, #3
 80030f2:	d001      	beq.n	80030f8 <USBD_LL_DataOutStage+0x14>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80030f4:	2000      	movs	r0, #0
 80030f6:	e029      	b.n	800314c <USBD_LL_DataOutStage+0x68>
      if (pep->rem_length > pep->maxpacket)
 80030f8:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 80030fc:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8003100:	4291      	cmp	r1, r2
 8003102:	d80d      	bhi.n	8003120 <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003104:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	b123      	cbz	r3, 8003116 <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800310c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003110:	2a03      	cmp	r2, #3
 8003112:	d100      	bne.n	8003116 <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev);
 8003114:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8003116:	4620      	mov	r0, r4
 8003118:	f000 fc5f 	bl	80039da <USBD_CtlSendStatus>
  return USBD_OK;
 800311c:	2000      	movs	r0, #0
 800311e:	e015      	b.n	800314c <USBD_LL_DataOutStage+0x68>
        pep->rem_length -= pep->maxpacket;
 8003120:	1a89      	subs	r1, r1, r2
 8003122:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003126:	428a      	cmp	r2, r1
 8003128:	bf28      	it	cs
 800312a:	460a      	movcs	r2, r1
 800312c:	4619      	mov	r1, r3
 800312e:	f000 fc4c 	bl	80039ca <USBD_CtlContinueRx>
  return USBD_OK;
 8003132:	2000      	movs	r0, #0
 8003134:	e00a      	b.n	800314c <USBD_LL_DataOutStage+0x68>
 8003136:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 8003138:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	b133      	cbz	r3, 800314e <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003140:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003144:	2903      	cmp	r1, #3
 8003146:	d104      	bne.n	8003152 <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8003148:	4611      	mov	r1, r2
 800314a:	4798      	blx	r3
}
 800314c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800314e:	2003      	movs	r0, #3
 8003150:	e7fc      	b.n	800314c <USBD_LL_DataOutStage+0x68>
 8003152:	2003      	movs	r0, #3
 8003154:	e7fa      	b.n	800314c <USBD_LL_DataOutStage+0x68>

08003156 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003156:	b510      	push	{r4, lr}
 8003158:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800315a:	2900      	cmp	r1, #0
 800315c:	d146      	bne.n	80031ec <USBD_LL_DataInStage+0x96>
 800315e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003160:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003164:	2a02      	cmp	r2, #2
 8003166:	d005      	beq.n	8003174 <USBD_LL_DataInStage+0x1e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8003168:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d039      	beq.n	80031e4 <USBD_LL_DataInStage+0x8e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003170:	2000      	movs	r0, #0
 8003172:	e046      	b.n	8003202 <USBD_LL_DataInStage+0xac>
      if (pep->rem_length > pep->maxpacket)
 8003174:	69c2      	ldr	r2, [r0, #28]
 8003176:	6a01      	ldr	r1, [r0, #32]
 8003178:	428a      	cmp	r2, r1
 800317a:	d813      	bhi.n	80031a4 <USBD_LL_DataInStage+0x4e>
        if ((pep->maxpacket == pep->rem_length) &&
 800317c:	428a      	cmp	r2, r1
 800317e:	d01d      	beq.n	80031bc <USBD_LL_DataInStage+0x66>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003180:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	b12b      	cbz	r3, 8003194 <USBD_LL_DataInStage+0x3e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003188:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800318c:	2a03      	cmp	r2, #3
 800318e:	d101      	bne.n	8003194 <USBD_LL_DataInStage+0x3e>
            pdev->pClass->EP0_TxSent(pdev);
 8003190:	4620      	mov	r0, r4
 8003192:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003194:	2180      	movs	r1, #128	; 0x80
 8003196:	4620      	mov	r0, r4
 8003198:	f000 fe41 	bl	8003e1e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800319c:	4620      	mov	r0, r4
 800319e:	f000 fc27 	bl	80039f0 <USBD_CtlReceiveStatus>
 80031a2:	e7e1      	b.n	8003168 <USBD_LL_DataInStage+0x12>
        pep->rem_length -= pep->maxpacket;
 80031a4:	1a52      	subs	r2, r2, r1
 80031a6:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80031a8:	4619      	mov	r1, r3
 80031aa:	f000 fbf7 	bl	800399c <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80031ae:	2300      	movs	r3, #0
 80031b0:	461a      	mov	r2, r3
 80031b2:	4619      	mov	r1, r3
 80031b4:	4620      	mov	r0, r4
 80031b6:	f000 fe52 	bl	8003e5e <USBD_LL_PrepareReceive>
 80031ba:	e7d5      	b.n	8003168 <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 80031bc:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80031be:	4299      	cmp	r1, r3
 80031c0:	d8de      	bhi.n	8003180 <USBD_LL_DataInStage+0x2a>
            (pep->total_length < pdev->ep0_data_len))
 80031c2:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d2da      	bcs.n	8003180 <USBD_LL_DataInStage+0x2a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80031ca:	2200      	movs	r2, #0
 80031cc:	4611      	mov	r1, r2
 80031ce:	f000 fbe5 	bl	800399c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80031d2:	2100      	movs	r1, #0
 80031d4:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80031d8:	460b      	mov	r3, r1
 80031da:	460a      	mov	r2, r1
 80031dc:	4620      	mov	r0, r4
 80031de:	f000 fe3e 	bl	8003e5e <USBD_LL_PrepareReceive>
 80031e2:	e7c1      	b.n	8003168 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0U;
 80031e4:	2000      	movs	r0, #0
 80031e6:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 80031ea:	e00a      	b.n	8003202 <USBD_LL_DataInStage+0xac>
 80031ec:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 80031ee:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	b133      	cbz	r3, 8003204 <USBD_LL_DataInStage+0xae>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80031f6:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80031fa:	2903      	cmp	r1, #3
 80031fc:	d104      	bne.n	8003208 <USBD_LL_DataInStage+0xb2>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80031fe:	4611      	mov	r1, r2
 8003200:	4798      	blx	r3
}
 8003202:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003204:	2003      	movs	r0, #3
 8003206:	e7fc      	b.n	8003202 <USBD_LL_DataInStage+0xac>
 8003208:	2003      	movs	r0, #3
 800320a:	e7fa      	b.n	8003202 <USBD_LL_DataInStage+0xac>

0800320c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003210:	2301      	movs	r3, #1
 8003212:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003216:	2300      	movs	r3, #0
 8003218:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800321c:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800321e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8003222:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003226:	b123      	cbz	r3, 8003232 <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003228:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2100      	movs	r1, #0
 8003230:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003232:	2340      	movs	r3, #64	; 0x40
 8003234:	2200      	movs	r2, #0
 8003236:	4611      	mov	r1, r2
 8003238:	4620      	mov	r0, r4
 800323a:	f000 fddd 	bl	8003df8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800323e:	2601      	movs	r6, #1
 8003240:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003244:	2540      	movs	r5, #64	; 0x40
 8003246:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800324a:	462b      	mov	r3, r5
 800324c:	2200      	movs	r2, #0
 800324e:	2180      	movs	r1, #128	; 0x80
 8003250:	4620      	mov	r0, r4
 8003252:	f000 fdd1 	bl	8003df8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003256:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003258:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 800325a:	2000      	movs	r0, #0
 800325c:	bd70      	pop	{r4, r5, r6, pc}

0800325e <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800325e:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003260:	2000      	movs	r0, #0
 8003262:	4770      	bx	lr

08003264 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8003264:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003268:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800326c:	2304      	movs	r3, #4
 800326e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003272:	2000      	movs	r0, #0
 8003274:	4770      	bx	lr

08003276 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003276:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800327a:	2b04      	cmp	r3, #4
 800327c:	d001      	beq.n	8003282 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800327e:	2000      	movs	r0, #0
 8003280:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8003282:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8003286:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 800328a:	e7f8      	b.n	800327e <USBD_LL_Resume+0x8>

0800328c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800328c:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800328e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003292:	2b03      	cmp	r3, #3
 8003294:	d001      	beq.n	800329a <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8003296:	2000      	movs	r0, #0
 8003298:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 800329a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f8      	beq.n	8003296 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80032a4:	4798      	blx	r3
 80032a6:	e7f6      	b.n	8003296 <USBD_LL_SOF+0xa>

080032a8 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80032a8:	2000      	movs	r0, #0
 80032aa:	4770      	bx	lr

080032ac <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80032ac:	2000      	movs	r0, #0
 80032ae:	4770      	bx	lr

080032b0 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80032b0:	2000      	movs	r0, #0
 80032b2:	4770      	bx	lr

080032b4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80032b4:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80032b6:	2301      	movs	r3, #1
 80032b8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80032bc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80032c0:	b113      	cbz	r3, 80032c8 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	7901      	ldrb	r1, [r0, #4]
 80032c6:	4798      	blx	r3
  }

  return USBD_OK;
}
 80032c8:	2000      	movs	r0, #0
 80032ca:	bd08      	pop	{r3, pc}

080032cc <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 80032cc:	2300      	movs	r3, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80032ce:	e002      	b.n	80032d6 <USBD_GetLen+0xa>
  {
    len++;
 80032d0:	3301      	adds	r3, #1
 80032d2:	b2db      	uxtb	r3, r3
    pbuff++;
 80032d4:	3001      	adds	r0, #1
  while (*pbuff != (uint8_t)'\0')
 80032d6:	7802      	ldrb	r2, [r0, #0]
 80032d8:	2a00      	cmp	r2, #0
 80032da:	d1f9      	bne.n	80032d0 <USBD_GetLen+0x4>
  }

  return len;
}
 80032dc:	4618      	mov	r0, r3
 80032de:	4770      	bx	lr

080032e0 <USBD_SetFeature>:
{
 80032e0:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80032e2:	884b      	ldrh	r3, [r1, #2]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d000      	beq.n	80032ea <USBD_SetFeature+0xa>
}
 80032e8:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80032ea:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80032ee:	f000 fb74 	bl	80039da <USBD_CtlSendStatus>
}
 80032f2:	e7f9      	b.n	80032e8 <USBD_SetFeature+0x8>

080032f4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80032f4:	780b      	ldrb	r3, [r1, #0]
 80032f6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80032f8:	784b      	ldrb	r3, [r1, #1]
 80032fa:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80032fc:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80032fe:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8003300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8003304:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8003306:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8003308:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800330a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800330e:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8003310:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8003312:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8003314:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8003318:	80c3      	strh	r3, [r0, #6]
}
 800331a:	4770      	bx	lr

0800331c <USBD_CtlError>:
{
 800331c:	b510      	push	{r4, lr}
 800331e:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8003320:	2180      	movs	r1, #128	; 0x80
 8003322:	f000 fd7c 	bl	8003e1e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003326:	2100      	movs	r1, #0
 8003328:	4620      	mov	r0, r4
 800332a:	f000 fd78 	bl	8003e1e <USBD_LL_StallEP>
}
 800332e:	bd10      	pop	{r4, pc}

08003330 <USBD_GetDescriptor>:
{
 8003330:	b530      	push	{r4, r5, lr}
 8003332:	b083      	sub	sp, #12
 8003334:	4604      	mov	r4, r0
 8003336:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800333e:	884a      	ldrh	r2, [r1, #2]
 8003340:	0a13      	lsrs	r3, r2, #8
 8003342:	3b01      	subs	r3, #1
 8003344:	2b06      	cmp	r3, #6
 8003346:	f200 80ab 	bhi.w	80034a0 <USBD_GetDescriptor+0x170>
 800334a:	e8df f003 	tbb	[pc, r3]
 800334e:	1f04      	.short	0x1f04
 8003350:	8da9a933 	.word	0x8da9a933
 8003354:	9a          	.byte	0x9a
 8003355:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003356:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f10d 0106 	add.w	r1, sp, #6
 8003360:	7c00      	ldrb	r0, [r0, #16]
 8003362:	4798      	blx	r3
    if (req->wLength != 0U)
 8003364:	88ea      	ldrh	r2, [r5, #6]
 8003366:	2a00      	cmp	r2, #0
 8003368:	f000 80a3 	beq.w	80034b2 <USBD_GetDescriptor+0x182>
      if (len != 0U)
 800336c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8099 	beq.w	80034a8 <USBD_GetDescriptor+0x178>
        len = MIN(len, req->wLength);
 8003376:	429a      	cmp	r2, r3
 8003378:	bf28      	it	cs
 800337a:	461a      	movcs	r2, r3
 800337c:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8003380:	4601      	mov	r1, r0
 8003382:	4620      	mov	r0, r4
 8003384:	f000 fafd 	bl	8003982 <USBD_CtlSendData>
}
 8003388:	b003      	add	sp, #12
 800338a:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800338c:	7c03      	ldrb	r3, [r0, #16]
 800338e:	b943      	cbnz	r3, 80033a2 <USBD_GetDescriptor+0x72>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003390:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	f10d 0006 	add.w	r0, sp, #6
 800339a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800339c:	2302      	movs	r3, #2
 800339e:	7043      	strb	r3, [r0, #1]
 80033a0:	e7e0      	b.n	8003364 <USBD_GetDescriptor+0x34>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80033a2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	f10d 0006 	add.w	r0, sp, #6
 80033ac:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80033ae:	2302      	movs	r3, #2
 80033b0:	7043      	strb	r3, [r0, #1]
 80033b2:	e7d7      	b.n	8003364 <USBD_GetDescriptor+0x34>
    switch ((uint8_t)(req->wValue))
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	2a05      	cmp	r2, #5
 80033b8:	d852      	bhi.n	8003460 <USBD_GetDescriptor+0x130>
 80033ba:	e8df f002 	tbb	[pc, r2]
 80033be:	1003      	.short	0x1003
 80033c0:	44372a1d 	.word	0x44372a1d
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80033c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	b123      	cbz	r3, 80033d6 <USBD_GetDescriptor+0xa6>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80033cc:	f10d 0106 	add.w	r1, sp, #6
 80033d0:	7c00      	ldrb	r0, [r0, #16]
 80033d2:	4798      	blx	r3
 80033d4:	e7c6      	b.n	8003364 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80033d6:	4629      	mov	r1, r5
 80033d8:	f7ff ffa0 	bl	800331c <USBD_CtlError>
 80033dc:	e7d4      	b.n	8003388 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80033de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	b123      	cbz	r3, 80033f0 <USBD_GetDescriptor+0xc0>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80033e6:	f10d 0106 	add.w	r1, sp, #6
 80033ea:	7c00      	ldrb	r0, [r0, #16]
 80033ec:	4798      	blx	r3
 80033ee:	e7b9      	b.n	8003364 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80033f0:	4629      	mov	r1, r5
 80033f2:	f7ff ff93 	bl	800331c <USBD_CtlError>
 80033f6:	e7c7      	b.n	8003388 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80033f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	b123      	cbz	r3, 800340a <USBD_GetDescriptor+0xda>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003400:	f10d 0106 	add.w	r1, sp, #6
 8003404:	7c00      	ldrb	r0, [r0, #16]
 8003406:	4798      	blx	r3
 8003408:	e7ac      	b.n	8003364 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800340a:	4629      	mov	r1, r5
 800340c:	f7ff ff86 	bl	800331c <USBD_CtlError>
 8003410:	e7ba      	b.n	8003388 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003412:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	b123      	cbz	r3, 8003424 <USBD_GetDescriptor+0xf4>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800341a:	f10d 0106 	add.w	r1, sp, #6
 800341e:	7c00      	ldrb	r0, [r0, #16]
 8003420:	4798      	blx	r3
 8003422:	e79f      	b.n	8003364 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003424:	4629      	mov	r1, r5
 8003426:	f7ff ff79 	bl	800331c <USBD_CtlError>
 800342a:	e7ad      	b.n	8003388 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800342c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	b123      	cbz	r3, 800343e <USBD_GetDescriptor+0x10e>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003434:	f10d 0106 	add.w	r1, sp, #6
 8003438:	7c00      	ldrb	r0, [r0, #16]
 800343a:	4798      	blx	r3
 800343c:	e792      	b.n	8003364 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800343e:	4629      	mov	r1, r5
 8003440:	f7ff ff6c 	bl	800331c <USBD_CtlError>
 8003444:	e7a0      	b.n	8003388 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003446:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	b123      	cbz	r3, 8003458 <USBD_GetDescriptor+0x128>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800344e:	f10d 0106 	add.w	r1, sp, #6
 8003452:	7c00      	ldrb	r0, [r0, #16]
 8003454:	4798      	blx	r3
 8003456:	e785      	b.n	8003364 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003458:	4629      	mov	r1, r5
 800345a:	f7ff ff5f 	bl	800331c <USBD_CtlError>
 800345e:	e793      	b.n	8003388 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8003460:	4629      	mov	r1, r5
 8003462:	f7ff ff5b 	bl	800331c <USBD_CtlError>
 8003466:	e78f      	b.n	8003388 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003468:	7c03      	ldrb	r3, [r0, #16]
 800346a:	b933      	cbnz	r3, 800347a <USBD_GetDescriptor+0x14a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800346c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003472:	f10d 0006 	add.w	r0, sp, #6
 8003476:	4798      	blx	r3
 8003478:	e774      	b.n	8003364 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 800347a:	4629      	mov	r1, r5
 800347c:	f7ff ff4e 	bl	800331c <USBD_CtlError>
 8003480:	e782      	b.n	8003388 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003482:	7c03      	ldrb	r3, [r0, #16]
 8003484:	b943      	cbnz	r3, 8003498 <USBD_GetDescriptor+0x168>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003486:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f10d 0006 	add.w	r0, sp, #6
 8003490:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003492:	2307      	movs	r3, #7
 8003494:	7043      	strb	r3, [r0, #1]
 8003496:	e765      	b.n	8003364 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 8003498:	4629      	mov	r1, r5
 800349a:	f7ff ff3f 	bl	800331c <USBD_CtlError>
 800349e:	e773      	b.n	8003388 <USBD_GetDescriptor+0x58>
    USBD_CtlError(pdev, req);
 80034a0:	4629      	mov	r1, r5
 80034a2:	f7ff ff3b 	bl	800331c <USBD_CtlError>
 80034a6:	e76f      	b.n	8003388 <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 80034a8:	4629      	mov	r1, r5
 80034aa:	4620      	mov	r0, r4
 80034ac:	f7ff ff36 	bl	800331c <USBD_CtlError>
 80034b0:	e76a      	b.n	8003388 <USBD_GetDescriptor+0x58>
      (void)USBD_CtlSendStatus(pdev);
 80034b2:	4620      	mov	r0, r4
 80034b4:	f000 fa91 	bl	80039da <USBD_CtlSendStatus>
 80034b8:	e766      	b.n	8003388 <USBD_GetDescriptor+0x58>

080034ba <USBD_SetAddress>:
{
 80034ba:	b538      	push	{r3, r4, r5, lr}
 80034bc:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80034be:	888b      	ldrh	r3, [r1, #4]
 80034c0:	b9f3      	cbnz	r3, 8003500 <USBD_SetAddress+0x46>
 80034c2:	88cb      	ldrh	r3, [r1, #6]
 80034c4:	b9e3      	cbnz	r3, 8003500 <USBD_SetAddress+0x46>
 80034c6:	884b      	ldrh	r3, [r1, #2]
 80034c8:	2b7f      	cmp	r3, #127	; 0x7f
 80034ca:	d819      	bhi.n	8003500 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80034cc:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80034d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d00c      	beq.n	80034f2 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80034d8:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80034dc:	4629      	mov	r1, r5
 80034de:	f000 fcae 	bl	8003e3e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80034e2:	4620      	mov	r0, r4
 80034e4:	f000 fa79 	bl	80039da <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80034e8:	b135      	cbz	r5, 80034f8 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80034ea:	2302      	movs	r3, #2
 80034ec:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80034f0:	e009      	b.n	8003506 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80034f2:	f7ff ff13 	bl	800331c <USBD_CtlError>
 80034f6:	e006      	b.n	8003506 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80034fe:	e002      	b.n	8003506 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8003500:	4620      	mov	r0, r4
 8003502:	f7ff ff0b 	bl	800331c <USBD_CtlError>
}
 8003506:	bd38      	pop	{r3, r4, r5, pc}

08003508 <USBD_SetConfig>:
{
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	4604      	mov	r4, r0
 800350c:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 800350e:	7889      	ldrb	r1, [r1, #2]
 8003510:	4b2e      	ldr	r3, [pc, #184]	; (80035cc <USBD_SetConfig+0xc4>)
 8003512:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003514:	2901      	cmp	r1, #1
 8003516:	d80f      	bhi.n	8003538 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8003518:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800351c:	2b02      	cmp	r3, #2
 800351e:	d011      	beq.n	8003544 <USBD_SetConfig+0x3c>
 8003520:	2b03      	cmp	r3, #3
 8003522:	d025      	beq.n	8003570 <USBD_SetConfig+0x68>
    USBD_CtlError(pdev, req);
 8003524:	4629      	mov	r1, r5
 8003526:	f7ff fef9 	bl	800331c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800352a:	4b28      	ldr	r3, [pc, #160]	; (80035cc <USBD_SetConfig+0xc4>)
 800352c:	7819      	ldrb	r1, [r3, #0]
 800352e:	4620      	mov	r0, r4
 8003530:	f7ff fda4 	bl	800307c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8003534:	2603      	movs	r6, #3
    break;
 8003536:	e003      	b.n	8003540 <USBD_SetConfig+0x38>
    USBD_CtlError(pdev, req);
 8003538:	4629      	mov	r1, r5
 800353a:	f7ff feef 	bl	800331c <USBD_CtlError>
    return USBD_FAIL;
 800353e:	2603      	movs	r6, #3
}
 8003540:	4630      	mov	r0, r6
 8003542:	bd70      	pop	{r4, r5, r6, pc}
    if (cfgidx != 0U)
 8003544:	b181      	cbz	r1, 8003568 <USBD_SetConfig+0x60>
      pdev->dev_config = cfgidx;
 8003546:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8003548:	f7ff fd8f 	bl	800306a <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800354c:	4606      	mov	r6, r0
 800354e:	b120      	cbz	r0, 800355a <USBD_SetConfig+0x52>
        USBD_CtlError(pdev, req);
 8003550:	4629      	mov	r1, r5
 8003552:	4620      	mov	r0, r4
 8003554:	f7ff fee2 	bl	800331c <USBD_CtlError>
 8003558:	e7f2      	b.n	8003540 <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 800355a:	4620      	mov	r0, r4
 800355c:	f000 fa3d 	bl	80039da <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003560:	2303      	movs	r3, #3
 8003562:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003566:	e7eb      	b.n	8003540 <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 8003568:	f000 fa37 	bl	80039da <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 800356c:	2600      	movs	r6, #0
 800356e:	e7e7      	b.n	8003540 <USBD_SetConfig+0x38>
    if (cfgidx == 0U)
 8003570:	b1c9      	cbz	r1, 80035a6 <USBD_SetConfig+0x9e>
    else if (cfgidx != pdev->dev_config)
 8003572:	6843      	ldr	r3, [r0, #4]
 8003574:	4299      	cmp	r1, r3
 8003576:	d025      	beq.n	80035c4 <USBD_SetConfig+0xbc>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003578:	b2d9      	uxtb	r1, r3
 800357a:	f7ff fd7f 	bl	800307c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800357e:	4b13      	ldr	r3, [pc, #76]	; (80035cc <USBD_SetConfig+0xc4>)
 8003580:	7819      	ldrb	r1, [r3, #0]
 8003582:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8003584:	4620      	mov	r0, r4
 8003586:	f7ff fd70 	bl	800306a <USBD_SetClassConfig>
      if (ret != USBD_OK)
 800358a:	4606      	mov	r6, r0
 800358c:	b1b0      	cbz	r0, 80035bc <USBD_SetConfig+0xb4>
        USBD_CtlError(pdev, req);
 800358e:	4629      	mov	r1, r5
 8003590:	4620      	mov	r0, r4
 8003592:	f7ff fec3 	bl	800331c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003596:	7921      	ldrb	r1, [r4, #4]
 8003598:	4620      	mov	r0, r4
 800359a:	f7ff fd6f 	bl	800307c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800359e:	2302      	movs	r3, #2
 80035a0:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80035a4:	e7cc      	b.n	8003540 <USBD_SetConfig+0x38>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80035a6:	2302      	movs	r3, #2
 80035a8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80035ac:	6041      	str	r1, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80035ae:	f7ff fd65 	bl	800307c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80035b2:	4620      	mov	r0, r4
 80035b4:	f000 fa11 	bl	80039da <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80035b8:	2600      	movs	r6, #0
 80035ba:	e7c1      	b.n	8003540 <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 80035bc:	4620      	mov	r0, r4
 80035be:	f000 fa0c 	bl	80039da <USBD_CtlSendStatus>
 80035c2:	e7bd      	b.n	8003540 <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 80035c4:	f000 fa09 	bl	80039da <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80035c8:	2600      	movs	r6, #0
 80035ca:	e7b9      	b.n	8003540 <USBD_SetConfig+0x38>
 80035cc:	20000574 	.word	0x20000574

080035d0 <USBD_GetConfig>:
{
 80035d0:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80035d2:	88cb      	ldrh	r3, [r1, #6]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d10b      	bne.n	80035f0 <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80035d8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80035dc:	b19b      	cbz	r3, 8003606 <USBD_GetConfig+0x36>
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d909      	bls.n	80035f6 <USBD_GetConfig+0x26>
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d10f      	bne.n	8003606 <USBD_GetConfig+0x36>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80035e6:	2201      	movs	r2, #1
 80035e8:	1d01      	adds	r1, r0, #4
 80035ea:	f000 f9ca 	bl	8003982 <USBD_CtlSendData>
      break;
 80035ee:	e001      	b.n	80035f4 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 80035f0:	f7ff fe94 	bl	800331c <USBD_CtlError>
}
 80035f4:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0U;
 80035f6:	4601      	mov	r1, r0
 80035f8:	2300      	movs	r3, #0
 80035fa:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80035fe:	2201      	movs	r2, #1
 8003600:	f000 f9bf 	bl	8003982 <USBD_CtlSendData>
      break;
 8003604:	e7f6      	b.n	80035f4 <USBD_GetConfig+0x24>
      USBD_CtlError(pdev, req);
 8003606:	f7ff fe89 	bl	800331c <USBD_CtlError>
}
 800360a:	e7f3      	b.n	80035f4 <USBD_GetConfig+0x24>

0800360c <USBD_GetStatus>:
{
 800360c:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800360e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003612:	3b01      	subs	r3, #1
 8003614:	2b02      	cmp	r3, #2
 8003616:	d812      	bhi.n	800363e <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 8003618:	88cb      	ldrh	r3, [r1, #6]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d10c      	bne.n	8003638 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8003622:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003626:	b10b      	cbz	r3, 800362c <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003628:	2302      	movs	r3, #2
 800362a:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800362c:	2202      	movs	r2, #2
 800362e:	f100 010c 	add.w	r1, r0, #12
 8003632:	f000 f9a6 	bl	8003982 <USBD_CtlSendData>
}
 8003636:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8003638:	f7ff fe70 	bl	800331c <USBD_CtlError>
      break;
 800363c:	e7fb      	b.n	8003636 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 800363e:	f7ff fe6d 	bl	800331c <USBD_CtlError>
}
 8003642:	e7f8      	b.n	8003636 <USBD_GetStatus+0x2a>

08003644 <USBD_ClrFeature>:
{
 8003644:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8003646:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800364a:	3b01      	subs	r3, #1
 800364c:	2b02      	cmp	r3, #2
 800364e:	d809      	bhi.n	8003664 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003650:	884b      	ldrh	r3, [r1, #2]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d000      	beq.n	8003658 <USBD_ClrFeature+0x14>
}
 8003656:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800365e:	f000 f9bc 	bl	80039da <USBD_CtlSendStatus>
 8003662:	e7f8      	b.n	8003656 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8003664:	f7ff fe5a 	bl	800331c <USBD_CtlError>
}
 8003668:	e7f5      	b.n	8003656 <USBD_ClrFeature+0x12>

0800366a <USBD_StdDevReq>:
{
 800366a:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800366c:	780b      	ldrb	r3, [r1, #0]
 800366e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003672:	2b20      	cmp	r3, #32
 8003674:	d006      	beq.n	8003684 <USBD_StdDevReq+0x1a>
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d004      	beq.n	8003684 <USBD_StdDevReq+0x1a>
 800367a:	b143      	cbz	r3, 800368e <USBD_StdDevReq+0x24>
    USBD_CtlError(pdev, req);
 800367c:	f7ff fe4e 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003680:	2000      	movs	r0, #0
    break;
 8003682:	e003      	b.n	800368c <USBD_StdDevReq+0x22>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003684:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	4798      	blx	r3
}
 800368c:	bd08      	pop	{r3, pc}
    switch (req->bRequest)
 800368e:	784b      	ldrb	r3, [r1, #1]
 8003690:	2b09      	cmp	r3, #9
 8003692:	d821      	bhi.n	80036d8 <USBD_StdDevReq+0x6e>
 8003694:	e8df f003 	tbb	[pc, r3]
 8003698:	18201c14 	.word	0x18201c14
 800369c:	20050920 	.word	0x20050920
 80036a0:	0d10      	.short	0x0d10
      USBD_GetDescriptor(pdev, req);
 80036a2:	f7ff fe45 	bl	8003330 <USBD_GetDescriptor>
  USBD_StatusTypeDef ret = USBD_OK;
 80036a6:	2000      	movs	r0, #0
      break;
 80036a8:	e7f0      	b.n	800368c <USBD_StdDevReq+0x22>
      USBD_SetAddress(pdev, req);
 80036aa:	f7ff ff06 	bl	80034ba <USBD_SetAddress>
  USBD_StatusTypeDef ret = USBD_OK;
 80036ae:	2000      	movs	r0, #0
      break;
 80036b0:	e7ec      	b.n	800368c <USBD_StdDevReq+0x22>
      ret = USBD_SetConfig(pdev, req);
 80036b2:	f7ff ff29 	bl	8003508 <USBD_SetConfig>
      break;
 80036b6:	e7e9      	b.n	800368c <USBD_StdDevReq+0x22>
      USBD_GetConfig(pdev, req);
 80036b8:	f7ff ff8a 	bl	80035d0 <USBD_GetConfig>
  USBD_StatusTypeDef ret = USBD_OK;
 80036bc:	2000      	movs	r0, #0
      break;
 80036be:	e7e5      	b.n	800368c <USBD_StdDevReq+0x22>
      USBD_GetStatus(pdev, req);
 80036c0:	f7ff ffa4 	bl	800360c <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80036c4:	2000      	movs	r0, #0
      break;
 80036c6:	e7e1      	b.n	800368c <USBD_StdDevReq+0x22>
      USBD_SetFeature(pdev, req);
 80036c8:	f7ff fe0a 	bl	80032e0 <USBD_SetFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 80036cc:	2000      	movs	r0, #0
      break;
 80036ce:	e7dd      	b.n	800368c <USBD_StdDevReq+0x22>
      USBD_ClrFeature(pdev, req);
 80036d0:	f7ff ffb8 	bl	8003644 <USBD_ClrFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 80036d4:	2000      	movs	r0, #0
      break;
 80036d6:	e7d9      	b.n	800368c <USBD_StdDevReq+0x22>
      USBD_CtlError(pdev, req);
 80036d8:	f7ff fe20 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80036dc:	2000      	movs	r0, #0
      break;
 80036de:	e7d5      	b.n	800368c <USBD_StdDevReq+0x22>

080036e0 <USBD_StdItfReq>:
{
 80036e0:	b570      	push	{r4, r5, r6, lr}
 80036e2:	4605      	mov	r5, r0
 80036e4:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80036e6:	780b      	ldrb	r3, [r1, #0]
 80036e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d007      	beq.n	8003700 <USBD_StdItfReq+0x20>
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d005      	beq.n	8003700 <USBD_StdItfReq+0x20>
 80036f4:	b123      	cbz	r3, 8003700 <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 80036f6:	f7ff fe11 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80036fa:	2600      	movs	r6, #0
}
 80036fc:	4630      	mov	r0, r6
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 8003700:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8003704:	3b01      	subs	r3, #1
 8003706:	2b02      	cmp	r3, #2
 8003708:	d818      	bhi.n	800373c <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800370a:	7923      	ldrb	r3, [r4, #4]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d80f      	bhi.n	8003730 <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003710:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	4621      	mov	r1, r4
 8003718:	4628      	mov	r0, r5
 800371a:	4798      	blx	r3
 800371c:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800371e:	88e3      	ldrh	r3, [r4, #6]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1eb      	bne.n	80036fc <USBD_StdItfReq+0x1c>
 8003724:	2800      	cmp	r0, #0
 8003726:	d1e9      	bne.n	80036fc <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 8003728:	4628      	mov	r0, r5
 800372a:	f000 f956 	bl	80039da <USBD_CtlSendStatus>
 800372e:	e7e5      	b.n	80036fc <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 8003730:	4621      	mov	r1, r4
 8003732:	4628      	mov	r0, r5
 8003734:	f7ff fdf2 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003738:	2600      	movs	r6, #0
 800373a:	e7df      	b.n	80036fc <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 800373c:	4621      	mov	r1, r4
 800373e:	4628      	mov	r0, r5
 8003740:	f7ff fdec 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003744:	2600      	movs	r6, #0
      break;
 8003746:	e7d9      	b.n	80036fc <USBD_StdItfReq+0x1c>

08003748 <USBD_StdEPReq>:
{
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	4605      	mov	r5, r0
 800374c:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800374e:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003750:	780b      	ldrb	r3, [r1, #0]
 8003752:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003756:	2b20      	cmp	r3, #32
 8003758:	d008      	beq.n	800376c <USBD_StdEPReq+0x24>
 800375a:	b2d1      	uxtb	r1, r2
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d005      	beq.n	800376c <USBD_StdEPReq+0x24>
 8003760:	b15b      	cbz	r3, 800377a <USBD_StdEPReq+0x32>
    USBD_CtlError(pdev, req);
 8003762:	4621      	mov	r1, r4
 8003764:	f7ff fdda 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003768:	2000      	movs	r0, #0
    break;
 800376a:	e005      	b.n	8003778 <USBD_StdEPReq+0x30>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800376c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	4621      	mov	r1, r4
 8003774:	4628      	mov	r0, r5
 8003776:	4798      	blx	r3
}
 8003778:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 800377a:	7863      	ldrb	r3, [r4, #1]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d02f      	beq.n	80037e0 <USBD_StdEPReq+0x98>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05e      	beq.n	8003842 <USBD_StdEPReq+0xfa>
 8003784:	2b03      	cmp	r3, #3
 8003786:	f040 80d9 	bne.w	800393c <USBD_StdEPReq+0x1f4>
      switch (pdev->dev_state)
 800378a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800378e:	2b02      	cmp	r3, #2
 8003790:	d006      	beq.n	80037a0 <USBD_StdEPReq+0x58>
 8003792:	2b03      	cmp	r3, #3
 8003794:	d015      	beq.n	80037c2 <USBD_StdEPReq+0x7a>
        USBD_CtlError(pdev, req);
 8003796:	4621      	mov	r1, r4
 8003798:	f7ff fdc0 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800379c:	2000      	movs	r0, #0
        break;
 800379e:	e7eb      	b.n	8003778 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80037a0:	b109      	cbz	r1, 80037a6 <USBD_StdEPReq+0x5e>
 80037a2:	2980      	cmp	r1, #128	; 0x80
 80037a4:	d105      	bne.n	80037b2 <USBD_StdEPReq+0x6a>
          USBD_CtlError(pdev, req);
 80037a6:	4621      	mov	r1, r4
 80037a8:	4628      	mov	r0, r5
 80037aa:	f7ff fdb7 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80037ae:	2000      	movs	r0, #0
 80037b0:	e7e2      	b.n	8003778 <USBD_StdEPReq+0x30>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80037b2:	f000 fb34 	bl	8003e1e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	4628      	mov	r0, r5
 80037ba:	f000 fb30 	bl	8003e1e <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80037be:	2000      	movs	r0, #0
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80037c0:	e7da      	b.n	8003778 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80037c2:	8863      	ldrh	r3, [r4, #2]
 80037c4:	b923      	cbnz	r3, 80037d0 <USBD_StdEPReq+0x88>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80037c6:	b119      	cbz	r1, 80037d0 <USBD_StdEPReq+0x88>
 80037c8:	2980      	cmp	r1, #128	; 0x80
 80037ca:	d001      	beq.n	80037d0 <USBD_StdEPReq+0x88>
 80037cc:	88e3      	ldrh	r3, [r4, #6]
 80037ce:	b123      	cbz	r3, 80037da <USBD_StdEPReq+0x92>
        (void)USBD_CtlSendStatus(pdev);
 80037d0:	4628      	mov	r0, r5
 80037d2:	f000 f902 	bl	80039da <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80037d6:	2000      	movs	r0, #0
        break;
 80037d8:	e7ce      	b.n	8003778 <USBD_StdEPReq+0x30>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80037da:	f000 fb20 	bl	8003e1e <USBD_LL_StallEP>
 80037de:	e7f7      	b.n	80037d0 <USBD_StdEPReq+0x88>
      switch (pdev->dev_state)
 80037e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d006      	beq.n	80037f6 <USBD_StdEPReq+0xae>
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d015      	beq.n	8003818 <USBD_StdEPReq+0xd0>
        USBD_CtlError(pdev, req);
 80037ec:	4621      	mov	r1, r4
 80037ee:	f7ff fd95 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80037f2:	2000      	movs	r0, #0
        break;
 80037f4:	e7c0      	b.n	8003778 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80037f6:	b109      	cbz	r1, 80037fc <USBD_StdEPReq+0xb4>
 80037f8:	2980      	cmp	r1, #128	; 0x80
 80037fa:	d105      	bne.n	8003808 <USBD_StdEPReq+0xc0>
          USBD_CtlError(pdev, req);
 80037fc:	4621      	mov	r1, r4
 80037fe:	4628      	mov	r0, r5
 8003800:	f7ff fd8c 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003804:	2000      	movs	r0, #0
 8003806:	e7b7      	b.n	8003778 <USBD_StdEPReq+0x30>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8003808:	f000 fb09 	bl	8003e1e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800380c:	2180      	movs	r1, #128	; 0x80
 800380e:	4628      	mov	r0, r5
 8003810:	f000 fb05 	bl	8003e1e <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8003814:	2000      	movs	r0, #0
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003816:	e7af      	b.n	8003778 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003818:	8863      	ldrh	r3, [r4, #2]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f040 8093 	bne.w	8003946 <USBD_StdEPReq+0x1fe>
          if ((ep_addr & 0x7FU) != 0x00U)
 8003820:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8003824:	d10a      	bne.n	800383c <USBD_StdEPReq+0xf4>
          (void)USBD_CtlSendStatus(pdev);
 8003826:	4628      	mov	r0, r5
 8003828:	f000 f8d7 	bl	80039da <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800382c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	4621      	mov	r1, r4
 8003834:	4628      	mov	r0, r5
 8003836:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8003838:	2000      	movs	r0, #0
 800383a:	e79d      	b.n	8003778 <USBD_StdEPReq+0x30>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800383c:	f000 faf7 	bl	8003e2e <USBD_LL_ClearStallEP>
 8003840:	e7f1      	b.n	8003826 <USBD_StdEPReq+0xde>
      switch (pdev->dev_state)
 8003842:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003846:	2b02      	cmp	r3, #2
 8003848:	d006      	beq.n	8003858 <USBD_StdEPReq+0x110>
 800384a:	2b03      	cmp	r3, #3
 800384c:	d02a      	beq.n	80038a4 <USBD_StdEPReq+0x15c>
        USBD_CtlError(pdev, req);
 800384e:	4621      	mov	r1, r4
 8003850:	f7ff fd64 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003854:	2000      	movs	r0, #0
        break;
 8003856:	e78f      	b.n	8003778 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003858:	b109      	cbz	r1, 800385e <USBD_StdEPReq+0x116>
 800385a:	2980      	cmp	r1, #128	; 0x80
 800385c:	d113      	bne.n	8003886 <USBD_StdEPReq+0x13e>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800385e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003862:	d115      	bne.n	8003890 <USBD_StdEPReq+0x148>
              &pdev->ep_out[ep_addr & 0x7FU];
 8003864:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003868:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800386c:	008b      	lsls	r3, r1, #2
 800386e:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8003872:	4429      	add	r1, r5
 8003874:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 8003876:	2400      	movs	r4, #0
 8003878:	600c      	str	r4, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800387a:	2202      	movs	r2, #2
 800387c:	4628      	mov	r0, r5
 800387e:	f000 f880 	bl	8003982 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003882:	4620      	mov	r0, r4
        break;
 8003884:	e778      	b.n	8003778 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 8003886:	4621      	mov	r1, r4
 8003888:	f7ff fd48 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800388c:	2000      	movs	r0, #0
          break;
 800388e:	e773      	b.n	8003778 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003890:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003894:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003898:	008b      	lsls	r3, r1, #2
 800389a:	f103 0110 	add.w	r1, r3, #16
 800389e:	4429      	add	r1, r5
 80038a0:	3104      	adds	r1, #4
 80038a2:	e7e8      	b.n	8003876 <USBD_StdEPReq+0x12e>
        if ((ep_addr & 0x80U) == 0x80U)
 80038a4:	b252      	sxtb	r2, r2
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	db1f      	blt.n	80038ea <USBD_StdEPReq+0x1a2>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80038aa:	f001 030f 	and.w	r3, r1, #15
 80038ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038b2:	0098      	lsls	r0, r3, #2
 80038b4:	4428      	add	r0, r5
 80038b6:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 80038ba:	b32b      	cbz	r3, 8003908 <USBD_StdEPReq+0x1c0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80038bc:	2a00      	cmp	r2, #0
 80038be:	db29      	blt.n	8003914 <USBD_StdEPReq+0x1cc>
              &pdev->ep_out[ep_addr & 0x7FU];
 80038c0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80038c4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80038c8:	0093      	lsls	r3, r2, #2
 80038ca:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 80038ce:	442c      	add	r4, r5
 80038d0:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80038d2:	b109      	cbz	r1, 80038d8 <USBD_StdEPReq+0x190>
 80038d4:	2980      	cmp	r1, #128	; 0x80
 80038d6:	d127      	bne.n	8003928 <USBD_StdEPReq+0x1e0>
            pep->status = 0x0000U;
 80038d8:	2300      	movs	r3, #0
 80038da:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80038dc:	2202      	movs	r2, #2
 80038de:	4621      	mov	r1, r4
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 f84e 	bl	8003982 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80038e6:	2000      	movs	r0, #0
          break;
 80038e8:	e746      	b.n	8003778 <USBD_StdEPReq+0x30>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80038ea:	f001 030f 	and.w	r3, r1, #15
 80038ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038f2:	0098      	lsls	r0, r3, #2
 80038f4:	4428      	add	r0, r5
 80038f6:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1df      	bne.n	80038bc <USBD_StdEPReq+0x174>
            USBD_CtlError(pdev, req);
 80038fc:	4621      	mov	r1, r4
 80038fe:	4628      	mov	r0, r5
 8003900:	f7ff fd0c 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003904:	2000      	movs	r0, #0
            break;
 8003906:	e737      	b.n	8003778 <USBD_StdEPReq+0x30>
            USBD_CtlError(pdev, req);
 8003908:	4621      	mov	r1, r4
 800390a:	4628      	mov	r0, r5
 800390c:	f7ff fd06 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003910:	2000      	movs	r0, #0
            break;
 8003912:	e731      	b.n	8003778 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003914:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8003918:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800391c:	0093      	lsls	r3, r2, #2
 800391e:	f103 0410 	add.w	r4, r3, #16
 8003922:	442c      	add	r4, r5
 8003924:	3404      	adds	r4, #4
 8003926:	e7d4      	b.n	80038d2 <USBD_StdEPReq+0x18a>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8003928:	4628      	mov	r0, r5
 800392a:	f000 fa37 	bl	8003d9c <USBD_LL_IsStallEP>
 800392e:	b110      	cbz	r0, 8003936 <USBD_StdEPReq+0x1ee>
            pep->status = 0x0001U;
 8003930:	2301      	movs	r3, #1
 8003932:	6023      	str	r3, [r4, #0]
 8003934:	e7d2      	b.n	80038dc <USBD_StdEPReq+0x194>
            pep->status = 0x0000U;
 8003936:	2300      	movs	r3, #0
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	e7cf      	b.n	80038dc <USBD_StdEPReq+0x194>
      USBD_CtlError(pdev, req);
 800393c:	4621      	mov	r1, r4
 800393e:	f7ff fced 	bl	800331c <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003942:	2000      	movs	r0, #0
      break;
 8003944:	e718      	b.n	8003778 <USBD_StdEPReq+0x30>
  USBD_StatusTypeDef ret = USBD_OK;
 8003946:	2000      	movs	r0, #0
 8003948:	e716      	b.n	8003778 <USBD_StdEPReq+0x30>

0800394a <USBD_GetString>:
  if (desc == NULL)
 800394a:	b1c8      	cbz	r0, 8003980 <USBD_GetString+0x36>
{
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	460d      	mov	r5, r1
 8003950:	4616      	mov	r6, r2
 8003952:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8003954:	f7ff fcba 	bl	80032cc <USBD_GetLen>
 8003958:	3001      	adds	r0, #1
 800395a:	0040      	lsls	r0, r0, #1
 800395c:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800395e:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8003960:	2303      	movs	r3, #3
 8003962:	706b      	strb	r3, [r5, #1]
  idx++;
 8003964:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8003966:	e007      	b.n	8003978 <USBD_GetString+0x2e>
    unicode[idx] = *pdesc;
 8003968:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 800396a:	3401      	adds	r4, #1
    idx++;
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8003970:	2100      	movs	r1, #0
 8003972:	54a9      	strb	r1, [r5, r2]
    idx++;
 8003974:	3302      	adds	r3, #2
 8003976:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8003978:	7822      	ldrb	r2, [r4, #0]
 800397a:	2a00      	cmp	r2, #0
 800397c:	d1f4      	bne.n	8003968 <USBD_GetString+0x1e>
}
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	4770      	bx	lr

08003982 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8003982:	b510      	push	{r4, lr}
 8003984:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003986:	2202      	movs	r2, #2
 8003988:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800398c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 800398e:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8003990:	460a      	mov	r2, r1
 8003992:	2100      	movs	r1, #0
 8003994:	f000 fa5b 	bl	8003e4e <USBD_LL_Transmit>

  return USBD_OK;
}
 8003998:	2000      	movs	r0, #0
 800399a:	bd10      	pop	{r4, pc}

0800399c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800399c:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800399e:	4613      	mov	r3, r2
 80039a0:	460a      	mov	r2, r1
 80039a2:	2100      	movs	r1, #0
 80039a4:	f000 fa53 	bl	8003e4e <USBD_LL_Transmit>

  return USBD_OK;
}
 80039a8:	2000      	movs	r0, #0
 80039aa:	bd08      	pop	{r3, pc}

080039ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80039ac:	b510      	push	{r4, lr}
 80039ae:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80039b0:	2203      	movs	r2, #3
 80039b2:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80039b6:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80039ba:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80039be:	460a      	mov	r2, r1
 80039c0:	2100      	movs	r1, #0
 80039c2:	f000 fa4c 	bl	8003e5e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80039c6:	2000      	movs	r0, #0
 80039c8:	bd10      	pop	{r4, pc}

080039ca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80039ca:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80039cc:	4613      	mov	r3, r2
 80039ce:	460a      	mov	r2, r1
 80039d0:	2100      	movs	r1, #0
 80039d2:	f000 fa44 	bl	8003e5e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80039d6:	2000      	movs	r0, #0
 80039d8:	bd08      	pop	{r3, pc}

080039da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80039da:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80039dc:	2304      	movs	r3, #4
 80039de:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80039e2:	2300      	movs	r3, #0
 80039e4:	461a      	mov	r2, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	f000 fa31 	bl	8003e4e <USBD_LL_Transmit>

  return USBD_OK;
}
 80039ec:	2000      	movs	r0, #0
 80039ee:	bd08      	pop	{r3, pc}

080039f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80039f0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80039f2:	2305      	movs	r3, #5
 80039f4:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80039f8:	2300      	movs	r3, #0
 80039fa:	461a      	mov	r2, r3
 80039fc:	4619      	mov	r1, r3
 80039fe:	f000 fa2e 	bl	8003e5e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003a02:	2000      	movs	r0, #0
 8003a04:	bd08      	pop	{r3, pc}
	...

08003a08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003a08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	490f      	ldr	r1, [pc, #60]	; (8003a4c <MX_USB_DEVICE_Init+0x44>)
 8003a0e:	4810      	ldr	r0, [pc, #64]	; (8003a50 <MX_USB_DEVICE_Init+0x48>)
 8003a10:	f7ff faf7 	bl	8003002 <USBD_Init>
 8003a14:	b970      	cbnz	r0, 8003a34 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003a16:	490f      	ldr	r1, [pc, #60]	; (8003a54 <MX_USB_DEVICE_Init+0x4c>)
 8003a18:	480d      	ldr	r0, [pc, #52]	; (8003a50 <MX_USB_DEVICE_Init+0x48>)
 8003a1a:	f7ff fb0e 	bl	800303a <USBD_RegisterClass>
 8003a1e:	b960      	cbnz	r0, 8003a3a <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003a20:	490d      	ldr	r1, [pc, #52]	; (8003a58 <MX_USB_DEVICE_Init+0x50>)
 8003a22:	480b      	ldr	r0, [pc, #44]	; (8003a50 <MX_USB_DEVICE_Init+0x48>)
 8003a24:	f7ff fabf 	bl	8002fa6 <USBD_CDC_RegisterInterface>
 8003a28:	b950      	cbnz	r0, 8003a40 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003a2a:	4809      	ldr	r0, [pc, #36]	; (8003a50 <MX_USB_DEVICE_Init+0x48>)
 8003a2c:	f7ff fb19 	bl	8003062 <USBD_Start>
 8003a30:	b948      	cbnz	r0, 8003a46 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003a32:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003a34:	f7fd f9f2 	bl	8000e1c <Error_Handler>
 8003a38:	e7ed      	b.n	8003a16 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8003a3a:	f7fd f9ef 	bl	8000e1c <Error_Handler>
 8003a3e:	e7ef      	b.n	8003a20 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8003a40:	f7fd f9ec 	bl	8000e1c <Error_Handler>
 8003a44:	e7f1      	b.n	8003a2a <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8003a46:	f7fd f9e9 	bl	8000e1c <Error_Handler>
}
 8003a4a:	e7f2      	b.n	8003a32 <MX_USB_DEVICE_Init+0x2a>
 8003a4c:	20000330 	.word	0x20000330
 8003a50:	20000584 	.word	0x20000584
 8003a54:	2000020c 	.word	0x2000020c
 8003a58:	2000031c 	.word	0x2000031c

08003a5c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	4770      	bx	lr

08003a60 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003a60:	2000      	movs	r0, #0
 8003a62:	4770      	bx	lr

08003a64 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8003a64:	2000      	movs	r0, #0
 8003a66:	4770      	bx	lr

08003a68 <CDC_Receive_FS>:
{
 8003a68:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003a6a:	4c05      	ldr	r4, [pc, #20]	; (8003a80 <CDC_Receive_FS+0x18>)
 8003a6c:	4601      	mov	r1, r0
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f7ff faa8 	bl	8002fc4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003a74:	4620      	mov	r0, r4
 8003a76:	f7ff faab 	bl	8002fd0 <USBD_CDC_ReceivePacket>
}
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	bd10      	pop	{r4, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000584 	.word	0x20000584

08003a84 <CDC_Init_FS>:
{
 8003a84:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003a86:	4c06      	ldr	r4, [pc, #24]	; (8003aa0 <CDC_Init_FS+0x1c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	4906      	ldr	r1, [pc, #24]	; (8003aa4 <CDC_Init_FS+0x20>)
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f7ff fa91 	bl	8002fb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003a92:	4905      	ldr	r1, [pc, #20]	; (8003aa8 <CDC_Init_FS+0x24>)
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff fa95 	bl	8002fc4 <USBD_CDC_SetRxBuffer>
}
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	bd10      	pop	{r4, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000584 	.word	0x20000584
 8003aa4:	20001054 	.word	0x20001054
 8003aa8:	20000854 	.word	0x20000854

08003aac <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003aac:	2312      	movs	r3, #18
 8003aae:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003ab0:	4800      	ldr	r0, [pc, #0]	; (8003ab4 <USBD_FS_DeviceDescriptor+0x8>)
 8003ab2:	4770      	bx	lr
 8003ab4:	2000034c 	.word	0x2000034c

08003ab8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003ab8:	2304      	movs	r3, #4
 8003aba:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003abc:	4800      	ldr	r0, [pc, #0]	; (8003ac0 <USBD_FS_LangIDStrDescriptor+0x8>)
 8003abe:	4770      	bx	lr
 8003ac0:	20000360 	.word	0x20000360

08003ac4 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d216      	bcs.n	8003af8 <IntToUnicode+0x34>
{
 8003aca:	b430      	push	{r4, r5}
 8003acc:	e00b      	b.n	8003ae6 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003ace:	3437      	adds	r4, #55	; 0x37
 8003ad0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8003ad4:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8003ad6:	005c      	lsls	r4, r3, #1
 8003ad8:	3401      	adds	r4, #1
 8003ada:	2500      	movs	r5, #0
 8003adc:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8003ade:	3301      	adds	r3, #1
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d206      	bcs.n	8003af4 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 8003ae6:	0f04      	lsrs	r4, r0, #28
 8003ae8:	2c09      	cmp	r4, #9
 8003aea:	d8f0      	bhi.n	8003ace <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8003aec:	3430      	adds	r4, #48	; 0x30
 8003aee:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8003af2:	e7ef      	b.n	8003ad4 <IntToUnicode+0x10>
  }
}
 8003af4:	bc30      	pop	{r4, r5}
 8003af6:	4770      	bx	lr
 8003af8:	4770      	bx	lr
	...

08003afc <Get_SerialNum>:
{
 8003afc:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <Get_SerialNum+0x2c>)
 8003b00:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003b02:	3304      	adds	r3, #4
 8003b04:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003b06:	3304      	adds	r3, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003b0a:	18c0      	adds	r0, r0, r3
 8003b0c:	d100      	bne.n	8003b10 <Get_SerialNum+0x14>
}
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003b10:	4d06      	ldr	r5, [pc, #24]	; (8003b2c <Get_SerialNum+0x30>)
 8003b12:	2208      	movs	r2, #8
 8003b14:	1ca9      	adds	r1, r5, #2
 8003b16:	f7ff ffd5 	bl	8003ac4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	f105 0112 	add.w	r1, r5, #18
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7ff ffcf 	bl	8003ac4 <IntToUnicode>
}
 8003b26:	e7f2      	b.n	8003b0e <Get_SerialNum+0x12>
 8003b28:	1fff7a10 	.word	0x1fff7a10
 8003b2c:	20000364 	.word	0x20000364

08003b30 <USBD_FS_SerialStrDescriptor>:
{
 8003b30:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003b32:	231a      	movs	r3, #26
 8003b34:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8003b36:	f7ff ffe1 	bl	8003afc <Get_SerialNum>
}
 8003b3a:	4801      	ldr	r0, [pc, #4]	; (8003b40 <USBD_FS_SerialStrDescriptor+0x10>)
 8003b3c:	bd08      	pop	{r3, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000364 	.word	0x20000364

08003b44 <USBD_FS_ProductStrDescriptor>:
{
 8003b44:	b508      	push	{r3, lr}
 8003b46:	460a      	mov	r2, r1
  if(speed == 0)
 8003b48:	b128      	cbz	r0, 8003b56 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003b4a:	4905      	ldr	r1, [pc, #20]	; (8003b60 <USBD_FS_ProductStrDescriptor+0x1c>)
 8003b4c:	4805      	ldr	r0, [pc, #20]	; (8003b64 <USBD_FS_ProductStrDescriptor+0x20>)
 8003b4e:	f7ff fefc 	bl	800394a <USBD_GetString>
}
 8003b52:	4803      	ldr	r0, [pc, #12]	; (8003b60 <USBD_FS_ProductStrDescriptor+0x1c>)
 8003b54:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003b56:	4902      	ldr	r1, [pc, #8]	; (8003b60 <USBD_FS_ProductStrDescriptor+0x1c>)
 8003b58:	4802      	ldr	r0, [pc, #8]	; (8003b64 <USBD_FS_ProductStrDescriptor+0x20>)
 8003b5a:	f7ff fef6 	bl	800394a <USBD_GetString>
 8003b5e:	e7f8      	b.n	8003b52 <USBD_FS_ProductStrDescriptor+0xe>
 8003b60:	20001854 	.word	0x20001854
 8003b64:	080079a0 	.word	0x080079a0

08003b68 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003b68:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003b6a:	4c04      	ldr	r4, [pc, #16]	; (8003b7c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003b6c:	460a      	mov	r2, r1
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4803      	ldr	r0, [pc, #12]	; (8003b80 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003b72:	f7ff feea 	bl	800394a <USBD_GetString>
}
 8003b76:	4620      	mov	r0, r4
 8003b78:	bd10      	pop	{r4, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20001854 	.word	0x20001854
 8003b80:	0800798c 	.word	0x0800798c

08003b84 <USBD_FS_ConfigStrDescriptor>:
{
 8003b84:	b508      	push	{r3, lr}
 8003b86:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8003b88:	b128      	cbz	r0, 8003b96 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003b8a:	4905      	ldr	r1, [pc, #20]	; (8003ba0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8003b8c:	4805      	ldr	r0, [pc, #20]	; (8003ba4 <USBD_FS_ConfigStrDescriptor+0x20>)
 8003b8e:	f7ff fedc 	bl	800394a <USBD_GetString>
}
 8003b92:	4803      	ldr	r0, [pc, #12]	; (8003ba0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8003b94:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003b96:	4902      	ldr	r1, [pc, #8]	; (8003ba0 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <USBD_FS_ConfigStrDescriptor+0x20>)
 8003b9a:	f7ff fed6 	bl	800394a <USBD_GetString>
 8003b9e:	e7f8      	b.n	8003b92 <USBD_FS_ConfigStrDescriptor+0xe>
 8003ba0:	20001854 	.word	0x20001854
 8003ba4:	08007970 	.word	0x08007970

08003ba8 <USBD_FS_InterfaceStrDescriptor>:
{
 8003ba8:	b508      	push	{r3, lr}
 8003baa:	460a      	mov	r2, r1
  if(speed == 0)
 8003bac:	b128      	cbz	r0, 8003bba <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003bae:	4905      	ldr	r1, [pc, #20]	; (8003bc4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8003bb0:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8003bb2:	f7ff feca 	bl	800394a <USBD_GetString>
}
 8003bb6:	4803      	ldr	r0, [pc, #12]	; (8003bc4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8003bb8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003bba:	4902      	ldr	r1, [pc, #8]	; (8003bc4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8003bbe:	f7ff fec4 	bl	800394a <USBD_GetString>
 8003bc2:	e7f8      	b.n	8003bb6 <USBD_FS_InterfaceStrDescriptor+0xe>
 8003bc4:	20001854 	.word	0x20001854
 8003bc8:	0800797c 	.word	0x0800797c

08003bcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003bcc:	b530      	push	{r4, r5, lr}
 8003bce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9303      	str	r3, [sp, #12]
 8003bd4:	9304      	str	r3, [sp, #16]
 8003bd6:	9305      	str	r3, [sp, #20]
 8003bd8:	9306      	str	r3, [sp, #24]
 8003bda:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8003bdc:	6803      	ldr	r3, [r0, #0]
 8003bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be2:	d001      	beq.n	8003be8 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003be4:	b009      	add	sp, #36	; 0x24
 8003be6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be8:	2500      	movs	r5, #0
 8003bea:	9501      	str	r5, [sp, #4]
 8003bec:	4c16      	ldr	r4, [pc, #88]	; (8003c48 <HAL_PCD_MspInit+0x7c>)
 8003bee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6323      	str	r3, [r4, #48]	; 0x30
 8003bf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003c04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c06:	2302      	movs	r3, #2
 8003c08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003c0e:	230a      	movs	r3, #10
 8003c10:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c12:	a903      	add	r1, sp, #12
 8003c14:	480d      	ldr	r0, [pc, #52]	; (8003c4c <HAL_PCD_MspInit+0x80>)
 8003c16:	f7fd fb1d 	bl	8001254 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003c1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c20:	6363      	str	r3, [r4, #52]	; 0x34
 8003c22:	9502      	str	r5, [sp, #8]
 8003c24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2a:	6463      	str	r3, [r4, #68]	; 0x44
 8003c2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c32:	9302      	str	r3, [sp, #8]
 8003c34:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8003c36:	462a      	mov	r2, r5
 8003c38:	2101      	movs	r1, #1
 8003c3a:	2043      	movs	r0, #67	; 0x43
 8003c3c:	f7fd fab2 	bl	80011a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003c40:	2043      	movs	r0, #67	; 0x43
 8003c42:	f7fd fae3 	bl	800120c <HAL_NVIC_EnableIRQ>
}
 8003c46:	e7cd      	b.n	8003be4 <HAL_PCD_MspInit+0x18>
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40020000 	.word	0x40020000

08003c50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003c50:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003c52:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8003c56:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c5a:	f7ff fa17 	bl	800308c <USBD_LL_SetupStage>
}
 8003c5e:	bd08      	pop	{r3, pc}

08003c60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003c60:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003c62:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8003c66:	0093      	lsls	r3, r2, #2
 8003c68:	4403      	add	r3, r0
 8003c6a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003c6e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c72:	f7ff fa37 	bl	80030e4 <USBD_LL_DataOutStage>
}
 8003c76:	bd08      	pop	{r3, pc}

08003c78 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003c78:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003c7a:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8003c7e:	0093      	lsls	r3, r2, #2
 8003c80:	4403      	add	r3, r0
 8003c82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c84:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c88:	f7ff fa65 	bl	8003156 <USBD_LL_DataInStage>
}
 8003c8c:	bd08      	pop	{r3, pc}

08003c8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003c8e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003c90:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c94:	f7ff fafa 	bl	800328c <USBD_LL_SOF>
}
 8003c98:	bd08      	pop	{r3, pc}

08003c9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003c9a:	b510      	push	{r4, lr}
 8003c9c:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8003c9e:	68c3      	ldr	r3, [r0, #12]
 8003ca0:	b12b      	cbz	r3, 8003cae <HAL_PCD_ResetCallback+0x14>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d00d      	beq.n	8003cc2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 8003ca6:	f7fd f8b9 	bl	8000e1c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8003caa:	2101      	movs	r1, #1
 8003cac:	e000      	b.n	8003cb0 <HAL_PCD_ResetCallback+0x16>
    speed = USBD_SPEED_HIGH;
 8003cae:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003cb0:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8003cb4:	f7ff fad3 	bl	800325e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003cb8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8003cbc:	f7ff faa6 	bl	800320c <USBD_LL_Reset>
}
 8003cc0:	bd10      	pop	{r4, pc}
    speed = USBD_SPEED_FULL;
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	e7f4      	b.n	8003cb0 <HAL_PCD_ResetCallback+0x16>
	...

08003cc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003ccc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003cd0:	f7ff fac8 	bl	8003264 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003cd4:	6822      	ldr	r2, [r4, #0]
 8003cd6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003ce2:	6a23      	ldr	r3, [r4, #32]
 8003ce4:	b123      	cbz	r3, 8003cf0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003ce6:	4a03      	ldr	r2, [pc, #12]	; (8003cf4 <HAL_PCD_SuspendCallback+0x2c>)
 8003ce8:	6913      	ldr	r3, [r2, #16]
 8003cea:	f043 0306 	orr.w	r3, r3, #6
 8003cee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003cf8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003cfa:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003cfe:	f7ff faba 	bl	8003276 <USBD_LL_Resume>
}
 8003d02:	bd08      	pop	{r3, pc}

08003d04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003d04:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003d06:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003d0a:	f7ff facf 	bl	80032ac <USBD_LL_IsoOUTIncomplete>
}
 8003d0e:	bd08      	pop	{r3, pc}

08003d10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003d10:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003d12:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003d16:	f7ff fac7 	bl	80032a8 <USBD_LL_IsoINIncomplete>
}
 8003d1a:	bd08      	pop	{r3, pc}

08003d1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003d1c:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003d1e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003d22:	f7ff fac5 	bl	80032b0 <USBD_LL_DevConnected>
}
 8003d26:	bd08      	pop	{r3, pc}

08003d28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003d28:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003d2a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003d2e:	f7ff fac1 	bl	80032b4 <USBD_LL_DevDisconnected>
}
 8003d32:	bd08      	pop	{r3, pc}

08003d34 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003d34:	7803      	ldrb	r3, [r0, #0]
 8003d36:	b10b      	cbz	r3, 8003d3c <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8003d38:	2000      	movs	r0, #0
 8003d3a:	4770      	bx	lr
{
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8003d40:	4815      	ldr	r0, [pc, #84]	; (8003d98 <USBD_LL_Init+0x64>)
 8003d42:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8003d46:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003d4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d4e:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003d50:	2304      	movs	r3, #4
 8003d52:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003d54:	2202      	movs	r2, #2
 8003d56:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003d5c:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003d5e:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003d60:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003d62:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003d64:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003d66:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003d68:	f7fd fbc2 	bl	80014f0 <HAL_PCD_Init>
 8003d6c:	b980      	cbnz	r0, 8003d90 <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003d6e:	4c0a      	ldr	r4, [pc, #40]	; (8003d98 <USBD_LL_Init+0x64>)
 8003d70:	2180      	movs	r1, #128	; 0x80
 8003d72:	4620      	mov	r0, r4
 8003d74:	f7fe f8f2 	bl	8001f5c <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003d78:	2240      	movs	r2, #64	; 0x40
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f7fe f8c9 	bl	8001f14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	2101      	movs	r1, #1
 8003d86:	4620      	mov	r0, r4
 8003d88:	f7fe f8c4 	bl	8001f14 <HAL_PCDEx_SetTxFiFo>
}
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8003d90:	f7fd f844 	bl	8000e1c <Error_Handler>
 8003d94:	e7eb      	b.n	8003d6e <USBD_LL_Init+0x3a>
 8003d96:	bf00      	nop
 8003d98:	20001a54 	.word	0x20001a54

08003d9c <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003d9c:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 8003da0:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003da4:	d108      	bne.n	8003db8 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003da6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003daa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003dae:	008a      	lsls	r2, r1, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 8003db6:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003db8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003dbc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003dc0:	008a      	lsls	r2, r1, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8003dc8:	4770      	bx	lr

08003dca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003dca:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003dcc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003dd0:	f7fd fff5 	bl	8001dbe <HAL_PCD_EP_GetRxCount>
}
 8003dd4:	bd08      	pop	{r3, pc}

08003dd6 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003dd6:	b118      	cbz	r0, 8003de0 <USBD_Get_USB_Status+0xa>
 8003dd8:	2802      	cmp	r0, #2
 8003dda:	d003      	beq.n	8003de4 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8003ddc:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003dde:	4770      	bx	lr
      usb_status = USBD_OK;
 8003de0:	2000      	movs	r0, #0
 8003de2:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8003de4:	2001      	movs	r0, #1
    break;
 8003de6:	4770      	bx	lr

08003de8 <USBD_LL_Start>:
{
 8003de8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003dea:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003dee:	f7fd fc10 	bl	8001612 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003df2:	f7ff fff0 	bl	8003dd6 <USBD_Get_USB_Status>
}
 8003df6:	bd08      	pop	{r3, pc}

08003df8 <USBD_LL_OpenEP>:
{
 8003df8:	b510      	push	{r4, lr}
 8003dfa:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	4622      	mov	r2, r4
 8003e00:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e04:	f7fd ff35 	bl	8001c72 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e08:	f7ff ffe5 	bl	8003dd6 <USBD_Get_USB_Status>
}
 8003e0c:	bd10      	pop	{r4, pc}

08003e0e <USBD_LL_CloseEP>:
{
 8003e0e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003e10:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e14:	f7fd ff6e 	bl	8001cf4 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e18:	f7ff ffdd 	bl	8003dd6 <USBD_Get_USB_Status>
}
 8003e1c:	bd08      	pop	{r3, pc}

08003e1e <USBD_LL_StallEP>:
{
 8003e1e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003e20:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e24:	f7fd fffe 	bl	8001e24 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e28:	f7ff ffd5 	bl	8003dd6 <USBD_Get_USB_Status>
}
 8003e2c:	bd08      	pop	{r3, pc}

08003e2e <USBD_LL_ClearStallEP>:
{
 8003e2e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003e30:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e34:	f7fe f837 	bl	8001ea6 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e38:	f7ff ffcd 	bl	8003dd6 <USBD_Get_USB_Status>
}
 8003e3c:	bd08      	pop	{r3, pc}

08003e3e <USBD_LL_SetUSBAddress>:
{
 8003e3e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003e40:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e44:	f7fd ff01 	bl	8001c4a <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e48:	f7ff ffc5 	bl	8003dd6 <USBD_Get_USB_Status>
}
 8003e4c:	bd08      	pop	{r3, pc}

08003e4e <USBD_LL_Transmit>:
{
 8003e4e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003e50:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e54:	f7fd ffbc 	bl	8001dd0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e58:	f7ff ffbd 	bl	8003dd6 <USBD_Get_USB_Status>
}
 8003e5c:	bd08      	pop	{r3, pc}

08003e5e <USBD_LL_PrepareReceive>:
{
 8003e5e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003e60:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e64:	f7fd ff7d 	bl	8001d62 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e68:	f7ff ffb5 	bl	8003dd6 <USBD_Get_USB_Status>
}
 8003e6c:	bd08      	pop	{r3, pc}
	...

08003e70 <__errno>:
 8003e70:	4b01      	ldr	r3, [pc, #4]	; (8003e78 <__errno+0x8>)
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000380 	.word	0x20000380

08003e7c <__libc_init_array>:
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	4e0d      	ldr	r6, [pc, #52]	; (8003eb4 <__libc_init_array+0x38>)
 8003e80:	4c0d      	ldr	r4, [pc, #52]	; (8003eb8 <__libc_init_array+0x3c>)
 8003e82:	1ba4      	subs	r4, r4, r6
 8003e84:	10a4      	asrs	r4, r4, #2
 8003e86:	2500      	movs	r5, #0
 8003e88:	42a5      	cmp	r5, r4
 8003e8a:	d109      	bne.n	8003ea0 <__libc_init_array+0x24>
 8003e8c:	4e0b      	ldr	r6, [pc, #44]	; (8003ebc <__libc_init_array+0x40>)
 8003e8e:	4c0c      	ldr	r4, [pc, #48]	; (8003ec0 <__libc_init_array+0x44>)
 8003e90:	f003 fd60 	bl	8007954 <_init>
 8003e94:	1ba4      	subs	r4, r4, r6
 8003e96:	10a4      	asrs	r4, r4, #2
 8003e98:	2500      	movs	r5, #0
 8003e9a:	42a5      	cmp	r5, r4
 8003e9c:	d105      	bne.n	8003eaa <__libc_init_array+0x2e>
 8003e9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ea4:	4798      	blx	r3
 8003ea6:	3501      	adds	r5, #1
 8003ea8:	e7ee      	b.n	8003e88 <__libc_init_array+0xc>
 8003eaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eae:	4798      	blx	r3
 8003eb0:	3501      	adds	r5, #1
 8003eb2:	e7f2      	b.n	8003e9a <__libc_init_array+0x1e>
 8003eb4:	08007c70 	.word	0x08007c70
 8003eb8:	08007c70 	.word	0x08007c70
 8003ebc:	08007c70 	.word	0x08007c70
 8003ec0:	08007c74 	.word	0x08007c74

08003ec4 <malloc>:
 8003ec4:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <malloc+0xc>)
 8003ec6:	4601      	mov	r1, r0
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	f000 b861 	b.w	8003f90 <_malloc_r>
 8003ece:	bf00      	nop
 8003ed0:	20000380 	.word	0x20000380

08003ed4 <free>:
 8003ed4:	4b02      	ldr	r3, [pc, #8]	; (8003ee0 <free+0xc>)
 8003ed6:	4601      	mov	r1, r0
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	f000 b80b 	b.w	8003ef4 <_free_r>
 8003ede:	bf00      	nop
 8003ee0:	20000380 	.word	0x20000380

08003ee4 <memset>:
 8003ee4:	4402      	add	r2, r0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d100      	bne.n	8003eee <memset+0xa>
 8003eec:	4770      	bx	lr
 8003eee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef2:	e7f9      	b.n	8003ee8 <memset+0x4>

08003ef4 <_free_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4605      	mov	r5, r0
 8003ef8:	2900      	cmp	r1, #0
 8003efa:	d045      	beq.n	8003f88 <_free_r+0x94>
 8003efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f00:	1f0c      	subs	r4, r1, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bfb8      	it	lt
 8003f06:	18e4      	addlt	r4, r4, r3
 8003f08:	f002 ff5d 	bl	8006dc6 <__malloc_lock>
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <_free_r+0x98>)
 8003f0e:	6813      	ldr	r3, [r2, #0]
 8003f10:	4610      	mov	r0, r2
 8003f12:	b933      	cbnz	r3, 8003f22 <_free_r+0x2e>
 8003f14:	6063      	str	r3, [r4, #4]
 8003f16:	6014      	str	r4, [r2, #0]
 8003f18:	4628      	mov	r0, r5
 8003f1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f1e:	f002 bf53 	b.w	8006dc8 <__malloc_unlock>
 8003f22:	42a3      	cmp	r3, r4
 8003f24:	d90c      	bls.n	8003f40 <_free_r+0x4c>
 8003f26:	6821      	ldr	r1, [r4, #0]
 8003f28:	1862      	adds	r2, r4, r1
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	bf04      	itt	eq
 8003f2e:	681a      	ldreq	r2, [r3, #0]
 8003f30:	685b      	ldreq	r3, [r3, #4]
 8003f32:	6063      	str	r3, [r4, #4]
 8003f34:	bf04      	itt	eq
 8003f36:	1852      	addeq	r2, r2, r1
 8003f38:	6022      	streq	r2, [r4, #0]
 8003f3a:	6004      	str	r4, [r0, #0]
 8003f3c:	e7ec      	b.n	8003f18 <_free_r+0x24>
 8003f3e:	4613      	mov	r3, r2
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	b10a      	cbz	r2, 8003f48 <_free_r+0x54>
 8003f44:	42a2      	cmp	r2, r4
 8003f46:	d9fa      	bls.n	8003f3e <_free_r+0x4a>
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	1858      	adds	r0, r3, r1
 8003f4c:	42a0      	cmp	r0, r4
 8003f4e:	d10b      	bne.n	8003f68 <_free_r+0x74>
 8003f50:	6820      	ldr	r0, [r4, #0]
 8003f52:	4401      	add	r1, r0
 8003f54:	1858      	adds	r0, r3, r1
 8003f56:	4282      	cmp	r2, r0
 8003f58:	6019      	str	r1, [r3, #0]
 8003f5a:	d1dd      	bne.n	8003f18 <_free_r+0x24>
 8003f5c:	6810      	ldr	r0, [r2, #0]
 8003f5e:	6852      	ldr	r2, [r2, #4]
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	4401      	add	r1, r0
 8003f64:	6019      	str	r1, [r3, #0]
 8003f66:	e7d7      	b.n	8003f18 <_free_r+0x24>
 8003f68:	d902      	bls.n	8003f70 <_free_r+0x7c>
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	e7d3      	b.n	8003f18 <_free_r+0x24>
 8003f70:	6820      	ldr	r0, [r4, #0]
 8003f72:	1821      	adds	r1, r4, r0
 8003f74:	428a      	cmp	r2, r1
 8003f76:	bf04      	itt	eq
 8003f78:	6811      	ldreq	r1, [r2, #0]
 8003f7a:	6852      	ldreq	r2, [r2, #4]
 8003f7c:	6062      	str	r2, [r4, #4]
 8003f7e:	bf04      	itt	eq
 8003f80:	1809      	addeq	r1, r1, r0
 8003f82:	6021      	streq	r1, [r4, #0]
 8003f84:	605c      	str	r4, [r3, #4]
 8003f86:	e7c7      	b.n	8003f18 <_free_r+0x24>
 8003f88:	bd38      	pop	{r3, r4, r5, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000578 	.word	0x20000578

08003f90 <_malloc_r>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	1ccd      	adds	r5, r1, #3
 8003f94:	f025 0503 	bic.w	r5, r5, #3
 8003f98:	3508      	adds	r5, #8
 8003f9a:	2d0c      	cmp	r5, #12
 8003f9c:	bf38      	it	cc
 8003f9e:	250c      	movcc	r5, #12
 8003fa0:	2d00      	cmp	r5, #0
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	db01      	blt.n	8003faa <_malloc_r+0x1a>
 8003fa6:	42a9      	cmp	r1, r5
 8003fa8:	d903      	bls.n	8003fb2 <_malloc_r+0x22>
 8003faa:	230c      	movs	r3, #12
 8003fac:	6033      	str	r3, [r6, #0]
 8003fae:	2000      	movs	r0, #0
 8003fb0:	bd70      	pop	{r4, r5, r6, pc}
 8003fb2:	f002 ff08 	bl	8006dc6 <__malloc_lock>
 8003fb6:	4a21      	ldr	r2, [pc, #132]	; (800403c <_malloc_r+0xac>)
 8003fb8:	6814      	ldr	r4, [r2, #0]
 8003fba:	4621      	mov	r1, r4
 8003fbc:	b991      	cbnz	r1, 8003fe4 <_malloc_r+0x54>
 8003fbe:	4c20      	ldr	r4, [pc, #128]	; (8004040 <_malloc_r+0xb0>)
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	b91b      	cbnz	r3, 8003fcc <_malloc_r+0x3c>
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f000 fe7b 	bl	8004cc0 <_sbrk_r>
 8003fca:	6020      	str	r0, [r4, #0]
 8003fcc:	4629      	mov	r1, r5
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f000 fe76 	bl	8004cc0 <_sbrk_r>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d124      	bne.n	8004022 <_malloc_r+0x92>
 8003fd8:	230c      	movs	r3, #12
 8003fda:	6033      	str	r3, [r6, #0]
 8003fdc:	4630      	mov	r0, r6
 8003fde:	f002 fef3 	bl	8006dc8 <__malloc_unlock>
 8003fe2:	e7e4      	b.n	8003fae <_malloc_r+0x1e>
 8003fe4:	680b      	ldr	r3, [r1, #0]
 8003fe6:	1b5b      	subs	r3, r3, r5
 8003fe8:	d418      	bmi.n	800401c <_malloc_r+0x8c>
 8003fea:	2b0b      	cmp	r3, #11
 8003fec:	d90f      	bls.n	800400e <_malloc_r+0x7e>
 8003fee:	600b      	str	r3, [r1, #0]
 8003ff0:	50cd      	str	r5, [r1, r3]
 8003ff2:	18cc      	adds	r4, r1, r3
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f002 fee7 	bl	8006dc8 <__malloc_unlock>
 8003ffa:	f104 000b 	add.w	r0, r4, #11
 8003ffe:	1d23      	adds	r3, r4, #4
 8004000:	f020 0007 	bic.w	r0, r0, #7
 8004004:	1ac3      	subs	r3, r0, r3
 8004006:	d0d3      	beq.n	8003fb0 <_malloc_r+0x20>
 8004008:	425a      	negs	r2, r3
 800400a:	50e2      	str	r2, [r4, r3]
 800400c:	e7d0      	b.n	8003fb0 <_malloc_r+0x20>
 800400e:	428c      	cmp	r4, r1
 8004010:	684b      	ldr	r3, [r1, #4]
 8004012:	bf16      	itet	ne
 8004014:	6063      	strne	r3, [r4, #4]
 8004016:	6013      	streq	r3, [r2, #0]
 8004018:	460c      	movne	r4, r1
 800401a:	e7eb      	b.n	8003ff4 <_malloc_r+0x64>
 800401c:	460c      	mov	r4, r1
 800401e:	6849      	ldr	r1, [r1, #4]
 8004020:	e7cc      	b.n	8003fbc <_malloc_r+0x2c>
 8004022:	1cc4      	adds	r4, r0, #3
 8004024:	f024 0403 	bic.w	r4, r4, #3
 8004028:	42a0      	cmp	r0, r4
 800402a:	d005      	beq.n	8004038 <_malloc_r+0xa8>
 800402c:	1a21      	subs	r1, r4, r0
 800402e:	4630      	mov	r0, r6
 8004030:	f000 fe46 	bl	8004cc0 <_sbrk_r>
 8004034:	3001      	adds	r0, #1
 8004036:	d0cf      	beq.n	8003fd8 <_malloc_r+0x48>
 8004038:	6025      	str	r5, [r4, #0]
 800403a:	e7db      	b.n	8003ff4 <_malloc_r+0x64>
 800403c:	20000578 	.word	0x20000578
 8004040:	2000057c 	.word	0x2000057c

08004044 <__cvt>:
 8004044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004048:	ec55 4b10 	vmov	r4, r5, d0
 800404c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800404e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004052:	2d00      	cmp	r5, #0
 8004054:	460e      	mov	r6, r1
 8004056:	4691      	mov	r9, r2
 8004058:	4619      	mov	r1, r3
 800405a:	bfb8      	it	lt
 800405c:	4622      	movlt	r2, r4
 800405e:	462b      	mov	r3, r5
 8004060:	f027 0720 	bic.w	r7, r7, #32
 8004064:	bfbb      	ittet	lt
 8004066:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800406a:	461d      	movlt	r5, r3
 800406c:	2300      	movge	r3, #0
 800406e:	232d      	movlt	r3, #45	; 0x2d
 8004070:	bfb8      	it	lt
 8004072:	4614      	movlt	r4, r2
 8004074:	2f46      	cmp	r7, #70	; 0x46
 8004076:	700b      	strb	r3, [r1, #0]
 8004078:	d004      	beq.n	8004084 <__cvt+0x40>
 800407a:	2f45      	cmp	r7, #69	; 0x45
 800407c:	d100      	bne.n	8004080 <__cvt+0x3c>
 800407e:	3601      	adds	r6, #1
 8004080:	2102      	movs	r1, #2
 8004082:	e000      	b.n	8004086 <__cvt+0x42>
 8004084:	2103      	movs	r1, #3
 8004086:	ab03      	add	r3, sp, #12
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	ab02      	add	r3, sp, #8
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	4632      	mov	r2, r6
 8004090:	4653      	mov	r3, sl
 8004092:	ec45 4b10 	vmov	d0, r4, r5
 8004096:	f001 fd87 	bl	8005ba8 <_dtoa_r>
 800409a:	2f47      	cmp	r7, #71	; 0x47
 800409c:	4680      	mov	r8, r0
 800409e:	d102      	bne.n	80040a6 <__cvt+0x62>
 80040a0:	f019 0f01 	tst.w	r9, #1
 80040a4:	d026      	beq.n	80040f4 <__cvt+0xb0>
 80040a6:	2f46      	cmp	r7, #70	; 0x46
 80040a8:	eb08 0906 	add.w	r9, r8, r6
 80040ac:	d111      	bne.n	80040d2 <__cvt+0x8e>
 80040ae:	f898 3000 	ldrb.w	r3, [r8]
 80040b2:	2b30      	cmp	r3, #48	; 0x30
 80040b4:	d10a      	bne.n	80040cc <__cvt+0x88>
 80040b6:	2200      	movs	r2, #0
 80040b8:	2300      	movs	r3, #0
 80040ba:	4620      	mov	r0, r4
 80040bc:	4629      	mov	r1, r5
 80040be:	f7fc fd03 	bl	8000ac8 <__aeabi_dcmpeq>
 80040c2:	b918      	cbnz	r0, 80040cc <__cvt+0x88>
 80040c4:	f1c6 0601 	rsb	r6, r6, #1
 80040c8:	f8ca 6000 	str.w	r6, [sl]
 80040cc:	f8da 3000 	ldr.w	r3, [sl]
 80040d0:	4499      	add	r9, r3
 80040d2:	2200      	movs	r2, #0
 80040d4:	2300      	movs	r3, #0
 80040d6:	4620      	mov	r0, r4
 80040d8:	4629      	mov	r1, r5
 80040da:	f7fc fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80040de:	b938      	cbnz	r0, 80040f0 <__cvt+0xac>
 80040e0:	2230      	movs	r2, #48	; 0x30
 80040e2:	9b03      	ldr	r3, [sp, #12]
 80040e4:	454b      	cmp	r3, r9
 80040e6:	d205      	bcs.n	80040f4 <__cvt+0xb0>
 80040e8:	1c59      	adds	r1, r3, #1
 80040ea:	9103      	str	r1, [sp, #12]
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e7f8      	b.n	80040e2 <__cvt+0x9e>
 80040f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80040f4:	9b03      	ldr	r3, [sp, #12]
 80040f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040f8:	eba3 0308 	sub.w	r3, r3, r8
 80040fc:	4640      	mov	r0, r8
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	b004      	add	sp, #16
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004106 <__exponent>:
 8004106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004108:	2900      	cmp	r1, #0
 800410a:	4604      	mov	r4, r0
 800410c:	bfba      	itte	lt
 800410e:	4249      	neglt	r1, r1
 8004110:	232d      	movlt	r3, #45	; 0x2d
 8004112:	232b      	movge	r3, #43	; 0x2b
 8004114:	2909      	cmp	r1, #9
 8004116:	f804 2b02 	strb.w	r2, [r4], #2
 800411a:	7043      	strb	r3, [r0, #1]
 800411c:	dd20      	ble.n	8004160 <__exponent+0x5a>
 800411e:	f10d 0307 	add.w	r3, sp, #7
 8004122:	461f      	mov	r7, r3
 8004124:	260a      	movs	r6, #10
 8004126:	fb91 f5f6 	sdiv	r5, r1, r6
 800412a:	fb06 1115 	mls	r1, r6, r5, r1
 800412e:	3130      	adds	r1, #48	; 0x30
 8004130:	2d09      	cmp	r5, #9
 8004132:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004136:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800413a:	4629      	mov	r1, r5
 800413c:	dc09      	bgt.n	8004152 <__exponent+0x4c>
 800413e:	3130      	adds	r1, #48	; 0x30
 8004140:	3b02      	subs	r3, #2
 8004142:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004146:	42bb      	cmp	r3, r7
 8004148:	4622      	mov	r2, r4
 800414a:	d304      	bcc.n	8004156 <__exponent+0x50>
 800414c:	1a10      	subs	r0, r2, r0
 800414e:	b003      	add	sp, #12
 8004150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004152:	4613      	mov	r3, r2
 8004154:	e7e7      	b.n	8004126 <__exponent+0x20>
 8004156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800415a:	f804 2b01 	strb.w	r2, [r4], #1
 800415e:	e7f2      	b.n	8004146 <__exponent+0x40>
 8004160:	2330      	movs	r3, #48	; 0x30
 8004162:	4419      	add	r1, r3
 8004164:	7083      	strb	r3, [r0, #2]
 8004166:	1d02      	adds	r2, r0, #4
 8004168:	70c1      	strb	r1, [r0, #3]
 800416a:	e7ef      	b.n	800414c <__exponent+0x46>

0800416c <_printf_float>:
 800416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004170:	b08d      	sub	sp, #52	; 0x34
 8004172:	460c      	mov	r4, r1
 8004174:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004178:	4616      	mov	r6, r2
 800417a:	461f      	mov	r7, r3
 800417c:	4605      	mov	r5, r0
 800417e:	f002 fdf7 	bl	8006d70 <_localeconv_r>
 8004182:	6803      	ldr	r3, [r0, #0]
 8004184:	9304      	str	r3, [sp, #16]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc f822 	bl	80001d0 <strlen>
 800418c:	2300      	movs	r3, #0
 800418e:	930a      	str	r3, [sp, #40]	; 0x28
 8004190:	f8d8 3000 	ldr.w	r3, [r8]
 8004194:	9005      	str	r0, [sp, #20]
 8004196:	3307      	adds	r3, #7
 8004198:	f023 0307 	bic.w	r3, r3, #7
 800419c:	f103 0208 	add.w	r2, r3, #8
 80041a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80041a4:	f8d4 b000 	ldr.w	fp, [r4]
 80041a8:	f8c8 2000 	str.w	r2, [r8]
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80041b4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80041b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80041bc:	9307      	str	r3, [sp, #28]
 80041be:	f8cd 8018 	str.w	r8, [sp, #24]
 80041c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041c6:	4ba7      	ldr	r3, [pc, #668]	; (8004464 <_printf_float+0x2f8>)
 80041c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041cc:	f7fc fcae 	bl	8000b2c <__aeabi_dcmpun>
 80041d0:	bb70      	cbnz	r0, 8004230 <_printf_float+0xc4>
 80041d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041d6:	4ba3      	ldr	r3, [pc, #652]	; (8004464 <_printf_float+0x2f8>)
 80041d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041dc:	f7fc fc88 	bl	8000af0 <__aeabi_dcmple>
 80041e0:	bb30      	cbnz	r0, 8004230 <_printf_float+0xc4>
 80041e2:	2200      	movs	r2, #0
 80041e4:	2300      	movs	r3, #0
 80041e6:	4640      	mov	r0, r8
 80041e8:	4649      	mov	r1, r9
 80041ea:	f7fc fc77 	bl	8000adc <__aeabi_dcmplt>
 80041ee:	b110      	cbz	r0, 80041f6 <_printf_float+0x8a>
 80041f0:	232d      	movs	r3, #45	; 0x2d
 80041f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041f6:	4a9c      	ldr	r2, [pc, #624]	; (8004468 <_printf_float+0x2fc>)
 80041f8:	4b9c      	ldr	r3, [pc, #624]	; (800446c <_printf_float+0x300>)
 80041fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80041fe:	bf8c      	ite	hi
 8004200:	4690      	movhi	r8, r2
 8004202:	4698      	movls	r8, r3
 8004204:	2303      	movs	r3, #3
 8004206:	f02b 0204 	bic.w	r2, fp, #4
 800420a:	6123      	str	r3, [r4, #16]
 800420c:	6022      	str	r2, [r4, #0]
 800420e:	f04f 0900 	mov.w	r9, #0
 8004212:	9700      	str	r7, [sp, #0]
 8004214:	4633      	mov	r3, r6
 8004216:	aa0b      	add	r2, sp, #44	; 0x2c
 8004218:	4621      	mov	r1, r4
 800421a:	4628      	mov	r0, r5
 800421c:	f000 f9e6 	bl	80045ec <_printf_common>
 8004220:	3001      	adds	r0, #1
 8004222:	f040 808d 	bne.w	8004340 <_printf_float+0x1d4>
 8004226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800422a:	b00d      	add	sp, #52	; 0x34
 800422c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	4640      	mov	r0, r8
 8004236:	4649      	mov	r1, r9
 8004238:	f7fc fc78 	bl	8000b2c <__aeabi_dcmpun>
 800423c:	b110      	cbz	r0, 8004244 <_printf_float+0xd8>
 800423e:	4a8c      	ldr	r2, [pc, #560]	; (8004470 <_printf_float+0x304>)
 8004240:	4b8c      	ldr	r3, [pc, #560]	; (8004474 <_printf_float+0x308>)
 8004242:	e7da      	b.n	80041fa <_printf_float+0x8e>
 8004244:	6861      	ldr	r1, [r4, #4]
 8004246:	1c4b      	adds	r3, r1, #1
 8004248:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800424c:	a80a      	add	r0, sp, #40	; 0x28
 800424e:	d13e      	bne.n	80042ce <_printf_float+0x162>
 8004250:	2306      	movs	r3, #6
 8004252:	6063      	str	r3, [r4, #4]
 8004254:	2300      	movs	r3, #0
 8004256:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800425a:	ab09      	add	r3, sp, #36	; 0x24
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	ec49 8b10 	vmov	d0, r8, r9
 8004262:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004266:	6022      	str	r2, [r4, #0]
 8004268:	f8cd a004 	str.w	sl, [sp, #4]
 800426c:	6861      	ldr	r1, [r4, #4]
 800426e:	4628      	mov	r0, r5
 8004270:	f7ff fee8 	bl	8004044 <__cvt>
 8004274:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004278:	2b47      	cmp	r3, #71	; 0x47
 800427a:	4680      	mov	r8, r0
 800427c:	d109      	bne.n	8004292 <_printf_float+0x126>
 800427e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004280:	1cd8      	adds	r0, r3, #3
 8004282:	db02      	blt.n	800428a <_printf_float+0x11e>
 8004284:	6862      	ldr	r2, [r4, #4]
 8004286:	4293      	cmp	r3, r2
 8004288:	dd47      	ble.n	800431a <_printf_float+0x1ae>
 800428a:	f1aa 0a02 	sub.w	sl, sl, #2
 800428e:	fa5f fa8a 	uxtb.w	sl, sl
 8004292:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004296:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004298:	d824      	bhi.n	80042e4 <_printf_float+0x178>
 800429a:	3901      	subs	r1, #1
 800429c:	4652      	mov	r2, sl
 800429e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042a2:	9109      	str	r1, [sp, #36]	; 0x24
 80042a4:	f7ff ff2f 	bl	8004106 <__exponent>
 80042a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042aa:	1813      	adds	r3, r2, r0
 80042ac:	2a01      	cmp	r2, #1
 80042ae:	4681      	mov	r9, r0
 80042b0:	6123      	str	r3, [r4, #16]
 80042b2:	dc02      	bgt.n	80042ba <_printf_float+0x14e>
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	07d1      	lsls	r1, r2, #31
 80042b8:	d501      	bpl.n	80042be <_printf_float+0x152>
 80042ba:	3301      	adds	r3, #1
 80042bc:	6123      	str	r3, [r4, #16]
 80042be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0a5      	beq.n	8004212 <_printf_float+0xa6>
 80042c6:	232d      	movs	r3, #45	; 0x2d
 80042c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042cc:	e7a1      	b.n	8004212 <_printf_float+0xa6>
 80042ce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80042d2:	f000 8177 	beq.w	80045c4 <_printf_float+0x458>
 80042d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80042da:	d1bb      	bne.n	8004254 <_printf_float+0xe8>
 80042dc:	2900      	cmp	r1, #0
 80042de:	d1b9      	bne.n	8004254 <_printf_float+0xe8>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e7b6      	b.n	8004252 <_printf_float+0xe6>
 80042e4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80042e8:	d119      	bne.n	800431e <_printf_float+0x1b2>
 80042ea:	2900      	cmp	r1, #0
 80042ec:	6863      	ldr	r3, [r4, #4]
 80042ee:	dd0c      	ble.n	800430a <_printf_float+0x19e>
 80042f0:	6121      	str	r1, [r4, #16]
 80042f2:	b913      	cbnz	r3, 80042fa <_printf_float+0x18e>
 80042f4:	6822      	ldr	r2, [r4, #0]
 80042f6:	07d2      	lsls	r2, r2, #31
 80042f8:	d502      	bpl.n	8004300 <_printf_float+0x194>
 80042fa:	3301      	adds	r3, #1
 80042fc:	440b      	add	r3, r1
 80042fe:	6123      	str	r3, [r4, #16]
 8004300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004302:	65a3      	str	r3, [r4, #88]	; 0x58
 8004304:	f04f 0900 	mov.w	r9, #0
 8004308:	e7d9      	b.n	80042be <_printf_float+0x152>
 800430a:	b913      	cbnz	r3, 8004312 <_printf_float+0x1a6>
 800430c:	6822      	ldr	r2, [r4, #0]
 800430e:	07d0      	lsls	r0, r2, #31
 8004310:	d501      	bpl.n	8004316 <_printf_float+0x1aa>
 8004312:	3302      	adds	r3, #2
 8004314:	e7f3      	b.n	80042fe <_printf_float+0x192>
 8004316:	2301      	movs	r3, #1
 8004318:	e7f1      	b.n	80042fe <_printf_float+0x192>
 800431a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800431e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004322:	4293      	cmp	r3, r2
 8004324:	db05      	blt.n	8004332 <_printf_float+0x1c6>
 8004326:	6822      	ldr	r2, [r4, #0]
 8004328:	6123      	str	r3, [r4, #16]
 800432a:	07d1      	lsls	r1, r2, #31
 800432c:	d5e8      	bpl.n	8004300 <_printf_float+0x194>
 800432e:	3301      	adds	r3, #1
 8004330:	e7e5      	b.n	80042fe <_printf_float+0x192>
 8004332:	2b00      	cmp	r3, #0
 8004334:	bfd4      	ite	le
 8004336:	f1c3 0302 	rsble	r3, r3, #2
 800433a:	2301      	movgt	r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	e7de      	b.n	80042fe <_printf_float+0x192>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	055a      	lsls	r2, r3, #21
 8004344:	d407      	bmi.n	8004356 <_printf_float+0x1ea>
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	4642      	mov	r2, r8
 800434a:	4631      	mov	r1, r6
 800434c:	4628      	mov	r0, r5
 800434e:	47b8      	blx	r7
 8004350:	3001      	adds	r0, #1
 8004352:	d12b      	bne.n	80043ac <_printf_float+0x240>
 8004354:	e767      	b.n	8004226 <_printf_float+0xba>
 8004356:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800435a:	f240 80dc 	bls.w	8004516 <_printf_float+0x3aa>
 800435e:	2200      	movs	r2, #0
 8004360:	2300      	movs	r3, #0
 8004362:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004366:	f7fc fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800436a:	2800      	cmp	r0, #0
 800436c:	d033      	beq.n	80043d6 <_printf_float+0x26a>
 800436e:	2301      	movs	r3, #1
 8004370:	4a41      	ldr	r2, [pc, #260]	; (8004478 <_printf_float+0x30c>)
 8004372:	4631      	mov	r1, r6
 8004374:	4628      	mov	r0, r5
 8004376:	47b8      	blx	r7
 8004378:	3001      	adds	r0, #1
 800437a:	f43f af54 	beq.w	8004226 <_printf_float+0xba>
 800437e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004382:	429a      	cmp	r2, r3
 8004384:	db02      	blt.n	800438c <_printf_float+0x220>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	07d8      	lsls	r0, r3, #31
 800438a:	d50f      	bpl.n	80043ac <_printf_float+0x240>
 800438c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004390:	4631      	mov	r1, r6
 8004392:	4628      	mov	r0, r5
 8004394:	47b8      	blx	r7
 8004396:	3001      	adds	r0, #1
 8004398:	f43f af45 	beq.w	8004226 <_printf_float+0xba>
 800439c:	f04f 0800 	mov.w	r8, #0
 80043a0:	f104 091a 	add.w	r9, r4, #26
 80043a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	4543      	cmp	r3, r8
 80043aa:	dc09      	bgt.n	80043c0 <_printf_float+0x254>
 80043ac:	6823      	ldr	r3, [r4, #0]
 80043ae:	079b      	lsls	r3, r3, #30
 80043b0:	f100 8103 	bmi.w	80045ba <_printf_float+0x44e>
 80043b4:	68e0      	ldr	r0, [r4, #12]
 80043b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043b8:	4298      	cmp	r0, r3
 80043ba:	bfb8      	it	lt
 80043bc:	4618      	movlt	r0, r3
 80043be:	e734      	b.n	800422a <_printf_float+0xbe>
 80043c0:	2301      	movs	r3, #1
 80043c2:	464a      	mov	r2, r9
 80043c4:	4631      	mov	r1, r6
 80043c6:	4628      	mov	r0, r5
 80043c8:	47b8      	blx	r7
 80043ca:	3001      	adds	r0, #1
 80043cc:	f43f af2b 	beq.w	8004226 <_printf_float+0xba>
 80043d0:	f108 0801 	add.w	r8, r8, #1
 80043d4:	e7e6      	b.n	80043a4 <_printf_float+0x238>
 80043d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d8:	2b00      	cmp	r3, #0
 80043da:	dc2b      	bgt.n	8004434 <_printf_float+0x2c8>
 80043dc:	2301      	movs	r3, #1
 80043de:	4a26      	ldr	r2, [pc, #152]	; (8004478 <_printf_float+0x30c>)
 80043e0:	4631      	mov	r1, r6
 80043e2:	4628      	mov	r0, r5
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	f43f af1d 	beq.w	8004226 <_printf_float+0xba>
 80043ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ee:	b923      	cbnz	r3, 80043fa <_printf_float+0x28e>
 80043f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043f2:	b913      	cbnz	r3, 80043fa <_printf_float+0x28e>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	07d9      	lsls	r1, r3, #31
 80043f8:	d5d8      	bpl.n	80043ac <_printf_float+0x240>
 80043fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	47b8      	blx	r7
 8004404:	3001      	adds	r0, #1
 8004406:	f43f af0e 	beq.w	8004226 <_printf_float+0xba>
 800440a:	f04f 0900 	mov.w	r9, #0
 800440e:	f104 0a1a 	add.w	sl, r4, #26
 8004412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004414:	425b      	negs	r3, r3
 8004416:	454b      	cmp	r3, r9
 8004418:	dc01      	bgt.n	800441e <_printf_float+0x2b2>
 800441a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800441c:	e794      	b.n	8004348 <_printf_float+0x1dc>
 800441e:	2301      	movs	r3, #1
 8004420:	4652      	mov	r2, sl
 8004422:	4631      	mov	r1, r6
 8004424:	4628      	mov	r0, r5
 8004426:	47b8      	blx	r7
 8004428:	3001      	adds	r0, #1
 800442a:	f43f aefc 	beq.w	8004226 <_printf_float+0xba>
 800442e:	f109 0901 	add.w	r9, r9, #1
 8004432:	e7ee      	b.n	8004412 <_printf_float+0x2a6>
 8004434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004436:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004438:	429a      	cmp	r2, r3
 800443a:	bfa8      	it	ge
 800443c:	461a      	movge	r2, r3
 800443e:	2a00      	cmp	r2, #0
 8004440:	4691      	mov	r9, r2
 8004442:	dd07      	ble.n	8004454 <_printf_float+0x2e8>
 8004444:	4613      	mov	r3, r2
 8004446:	4631      	mov	r1, r6
 8004448:	4642      	mov	r2, r8
 800444a:	4628      	mov	r0, r5
 800444c:	47b8      	blx	r7
 800444e:	3001      	adds	r0, #1
 8004450:	f43f aee9 	beq.w	8004226 <_printf_float+0xba>
 8004454:	f104 031a 	add.w	r3, r4, #26
 8004458:	f04f 0b00 	mov.w	fp, #0
 800445c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004460:	9306      	str	r3, [sp, #24]
 8004462:	e015      	b.n	8004490 <_printf_float+0x324>
 8004464:	7fefffff 	.word	0x7fefffff
 8004468:	080079bc 	.word	0x080079bc
 800446c:	080079b8 	.word	0x080079b8
 8004470:	080079c4 	.word	0x080079c4
 8004474:	080079c0 	.word	0x080079c0
 8004478:	080079c8 	.word	0x080079c8
 800447c:	2301      	movs	r3, #1
 800447e:	9a06      	ldr	r2, [sp, #24]
 8004480:	4631      	mov	r1, r6
 8004482:	4628      	mov	r0, r5
 8004484:	47b8      	blx	r7
 8004486:	3001      	adds	r0, #1
 8004488:	f43f aecd 	beq.w	8004226 <_printf_float+0xba>
 800448c:	f10b 0b01 	add.w	fp, fp, #1
 8004490:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004494:	ebaa 0309 	sub.w	r3, sl, r9
 8004498:	455b      	cmp	r3, fp
 800449a:	dcef      	bgt.n	800447c <_printf_float+0x310>
 800449c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044a0:	429a      	cmp	r2, r3
 80044a2:	44d0      	add	r8, sl
 80044a4:	db15      	blt.n	80044d2 <_printf_float+0x366>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	07da      	lsls	r2, r3, #31
 80044aa:	d412      	bmi.n	80044d2 <_printf_float+0x366>
 80044ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044b0:	eba3 020a 	sub.w	r2, r3, sl
 80044b4:	eba3 0a01 	sub.w	sl, r3, r1
 80044b8:	4592      	cmp	sl, r2
 80044ba:	bfa8      	it	ge
 80044bc:	4692      	movge	sl, r2
 80044be:	f1ba 0f00 	cmp.w	sl, #0
 80044c2:	dc0e      	bgt.n	80044e2 <_printf_float+0x376>
 80044c4:	f04f 0800 	mov.w	r8, #0
 80044c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80044cc:	f104 091a 	add.w	r9, r4, #26
 80044d0:	e019      	b.n	8004506 <_printf_float+0x39a>
 80044d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044d6:	4631      	mov	r1, r6
 80044d8:	4628      	mov	r0, r5
 80044da:	47b8      	blx	r7
 80044dc:	3001      	adds	r0, #1
 80044de:	d1e5      	bne.n	80044ac <_printf_float+0x340>
 80044e0:	e6a1      	b.n	8004226 <_printf_float+0xba>
 80044e2:	4653      	mov	r3, sl
 80044e4:	4642      	mov	r2, r8
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	d1e9      	bne.n	80044c4 <_printf_float+0x358>
 80044f0:	e699      	b.n	8004226 <_printf_float+0xba>
 80044f2:	2301      	movs	r3, #1
 80044f4:	464a      	mov	r2, r9
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	f43f ae92 	beq.w	8004226 <_printf_float+0xba>
 8004502:	f108 0801 	add.w	r8, r8, #1
 8004506:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	eba3 030a 	sub.w	r3, r3, sl
 8004510:	4543      	cmp	r3, r8
 8004512:	dcee      	bgt.n	80044f2 <_printf_float+0x386>
 8004514:	e74a      	b.n	80043ac <_printf_float+0x240>
 8004516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004518:	2a01      	cmp	r2, #1
 800451a:	dc01      	bgt.n	8004520 <_printf_float+0x3b4>
 800451c:	07db      	lsls	r3, r3, #31
 800451e:	d53a      	bpl.n	8004596 <_printf_float+0x42a>
 8004520:	2301      	movs	r3, #1
 8004522:	4642      	mov	r2, r8
 8004524:	4631      	mov	r1, r6
 8004526:	4628      	mov	r0, r5
 8004528:	47b8      	blx	r7
 800452a:	3001      	adds	r0, #1
 800452c:	f43f ae7b 	beq.w	8004226 <_printf_float+0xba>
 8004530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004534:	4631      	mov	r1, r6
 8004536:	4628      	mov	r0, r5
 8004538:	47b8      	blx	r7
 800453a:	3001      	adds	r0, #1
 800453c:	f108 0801 	add.w	r8, r8, #1
 8004540:	f43f ae71 	beq.w	8004226 <_printf_float+0xba>
 8004544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004546:	2200      	movs	r2, #0
 8004548:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800454c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004550:	2300      	movs	r3, #0
 8004552:	f7fc fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004556:	b9c8      	cbnz	r0, 800458c <_printf_float+0x420>
 8004558:	4653      	mov	r3, sl
 800455a:	4642      	mov	r2, r8
 800455c:	4631      	mov	r1, r6
 800455e:	4628      	mov	r0, r5
 8004560:	47b8      	blx	r7
 8004562:	3001      	adds	r0, #1
 8004564:	d10e      	bne.n	8004584 <_printf_float+0x418>
 8004566:	e65e      	b.n	8004226 <_printf_float+0xba>
 8004568:	2301      	movs	r3, #1
 800456a:	4652      	mov	r2, sl
 800456c:	4631      	mov	r1, r6
 800456e:	4628      	mov	r0, r5
 8004570:	47b8      	blx	r7
 8004572:	3001      	adds	r0, #1
 8004574:	f43f ae57 	beq.w	8004226 <_printf_float+0xba>
 8004578:	f108 0801 	add.w	r8, r8, #1
 800457c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800457e:	3b01      	subs	r3, #1
 8004580:	4543      	cmp	r3, r8
 8004582:	dcf1      	bgt.n	8004568 <_printf_float+0x3fc>
 8004584:	464b      	mov	r3, r9
 8004586:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800458a:	e6de      	b.n	800434a <_printf_float+0x1de>
 800458c:	f04f 0800 	mov.w	r8, #0
 8004590:	f104 0a1a 	add.w	sl, r4, #26
 8004594:	e7f2      	b.n	800457c <_printf_float+0x410>
 8004596:	2301      	movs	r3, #1
 8004598:	e7df      	b.n	800455a <_printf_float+0x3ee>
 800459a:	2301      	movs	r3, #1
 800459c:	464a      	mov	r2, r9
 800459e:	4631      	mov	r1, r6
 80045a0:	4628      	mov	r0, r5
 80045a2:	47b8      	blx	r7
 80045a4:	3001      	adds	r0, #1
 80045a6:	f43f ae3e 	beq.w	8004226 <_printf_float+0xba>
 80045aa:	f108 0801 	add.w	r8, r8, #1
 80045ae:	68e3      	ldr	r3, [r4, #12]
 80045b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	4543      	cmp	r3, r8
 80045b6:	dcf0      	bgt.n	800459a <_printf_float+0x42e>
 80045b8:	e6fc      	b.n	80043b4 <_printf_float+0x248>
 80045ba:	f04f 0800 	mov.w	r8, #0
 80045be:	f104 0919 	add.w	r9, r4, #25
 80045c2:	e7f4      	b.n	80045ae <_printf_float+0x442>
 80045c4:	2900      	cmp	r1, #0
 80045c6:	f43f ae8b 	beq.w	80042e0 <_printf_float+0x174>
 80045ca:	2300      	movs	r3, #0
 80045cc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80045d0:	ab09      	add	r3, sp, #36	; 0x24
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	ec49 8b10 	vmov	d0, r8, r9
 80045d8:	6022      	str	r2, [r4, #0]
 80045da:	f8cd a004 	str.w	sl, [sp, #4]
 80045de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80045e2:	4628      	mov	r0, r5
 80045e4:	f7ff fd2e 	bl	8004044 <__cvt>
 80045e8:	4680      	mov	r8, r0
 80045ea:	e648      	b.n	800427e <_printf_float+0x112>

080045ec <_printf_common>:
 80045ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f0:	4691      	mov	r9, r2
 80045f2:	461f      	mov	r7, r3
 80045f4:	688a      	ldr	r2, [r1, #8]
 80045f6:	690b      	ldr	r3, [r1, #16]
 80045f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045fc:	4293      	cmp	r3, r2
 80045fe:	bfb8      	it	lt
 8004600:	4613      	movlt	r3, r2
 8004602:	f8c9 3000 	str.w	r3, [r9]
 8004606:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800460a:	4606      	mov	r6, r0
 800460c:	460c      	mov	r4, r1
 800460e:	b112      	cbz	r2, 8004616 <_printf_common+0x2a>
 8004610:	3301      	adds	r3, #1
 8004612:	f8c9 3000 	str.w	r3, [r9]
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	0699      	lsls	r1, r3, #26
 800461a:	bf42      	ittt	mi
 800461c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004620:	3302      	addmi	r3, #2
 8004622:	f8c9 3000 	strmi.w	r3, [r9]
 8004626:	6825      	ldr	r5, [r4, #0]
 8004628:	f015 0506 	ands.w	r5, r5, #6
 800462c:	d107      	bne.n	800463e <_printf_common+0x52>
 800462e:	f104 0a19 	add.w	sl, r4, #25
 8004632:	68e3      	ldr	r3, [r4, #12]
 8004634:	f8d9 2000 	ldr.w	r2, [r9]
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	42ab      	cmp	r3, r5
 800463c:	dc28      	bgt.n	8004690 <_printf_common+0xa4>
 800463e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	3300      	adds	r3, #0
 8004646:	bf18      	it	ne
 8004648:	2301      	movne	r3, #1
 800464a:	0692      	lsls	r2, r2, #26
 800464c:	d42d      	bmi.n	80046aa <_printf_common+0xbe>
 800464e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004652:	4639      	mov	r1, r7
 8004654:	4630      	mov	r0, r6
 8004656:	47c0      	blx	r8
 8004658:	3001      	adds	r0, #1
 800465a:	d020      	beq.n	800469e <_printf_common+0xb2>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	68e5      	ldr	r5, [r4, #12]
 8004660:	f8d9 2000 	ldr.w	r2, [r9]
 8004664:	f003 0306 	and.w	r3, r3, #6
 8004668:	2b04      	cmp	r3, #4
 800466a:	bf08      	it	eq
 800466c:	1aad      	subeq	r5, r5, r2
 800466e:	68a3      	ldr	r3, [r4, #8]
 8004670:	6922      	ldr	r2, [r4, #16]
 8004672:	bf0c      	ite	eq
 8004674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004678:	2500      	movne	r5, #0
 800467a:	4293      	cmp	r3, r2
 800467c:	bfc4      	itt	gt
 800467e:	1a9b      	subgt	r3, r3, r2
 8004680:	18ed      	addgt	r5, r5, r3
 8004682:	f04f 0900 	mov.w	r9, #0
 8004686:	341a      	adds	r4, #26
 8004688:	454d      	cmp	r5, r9
 800468a:	d11a      	bne.n	80046c2 <_printf_common+0xd6>
 800468c:	2000      	movs	r0, #0
 800468e:	e008      	b.n	80046a2 <_printf_common+0xb6>
 8004690:	2301      	movs	r3, #1
 8004692:	4652      	mov	r2, sl
 8004694:	4639      	mov	r1, r7
 8004696:	4630      	mov	r0, r6
 8004698:	47c0      	blx	r8
 800469a:	3001      	adds	r0, #1
 800469c:	d103      	bne.n	80046a6 <_printf_common+0xba>
 800469e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a6:	3501      	adds	r5, #1
 80046a8:	e7c3      	b.n	8004632 <_printf_common+0x46>
 80046aa:	18e1      	adds	r1, r4, r3
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	2030      	movs	r0, #48	; 0x30
 80046b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046b4:	4422      	add	r2, r4
 80046b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046be:	3302      	adds	r3, #2
 80046c0:	e7c5      	b.n	800464e <_printf_common+0x62>
 80046c2:	2301      	movs	r3, #1
 80046c4:	4622      	mov	r2, r4
 80046c6:	4639      	mov	r1, r7
 80046c8:	4630      	mov	r0, r6
 80046ca:	47c0      	blx	r8
 80046cc:	3001      	adds	r0, #1
 80046ce:	d0e6      	beq.n	800469e <_printf_common+0xb2>
 80046d0:	f109 0901 	add.w	r9, r9, #1
 80046d4:	e7d8      	b.n	8004688 <_printf_common+0x9c>
	...

080046d8 <_printf_i>:
 80046d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80046e0:	460c      	mov	r4, r1
 80046e2:	7e09      	ldrb	r1, [r1, #24]
 80046e4:	b085      	sub	sp, #20
 80046e6:	296e      	cmp	r1, #110	; 0x6e
 80046e8:	4617      	mov	r7, r2
 80046ea:	4606      	mov	r6, r0
 80046ec:	4698      	mov	r8, r3
 80046ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046f0:	f000 80b3 	beq.w	800485a <_printf_i+0x182>
 80046f4:	d822      	bhi.n	800473c <_printf_i+0x64>
 80046f6:	2963      	cmp	r1, #99	; 0x63
 80046f8:	d036      	beq.n	8004768 <_printf_i+0x90>
 80046fa:	d80a      	bhi.n	8004712 <_printf_i+0x3a>
 80046fc:	2900      	cmp	r1, #0
 80046fe:	f000 80b9 	beq.w	8004874 <_printf_i+0x19c>
 8004702:	2958      	cmp	r1, #88	; 0x58
 8004704:	f000 8083 	beq.w	800480e <_printf_i+0x136>
 8004708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800470c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004710:	e032      	b.n	8004778 <_printf_i+0xa0>
 8004712:	2964      	cmp	r1, #100	; 0x64
 8004714:	d001      	beq.n	800471a <_printf_i+0x42>
 8004716:	2969      	cmp	r1, #105	; 0x69
 8004718:	d1f6      	bne.n	8004708 <_printf_i+0x30>
 800471a:	6820      	ldr	r0, [r4, #0]
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	0605      	lsls	r5, r0, #24
 8004720:	f103 0104 	add.w	r1, r3, #4
 8004724:	d52a      	bpl.n	800477c <_printf_i+0xa4>
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6011      	str	r1, [r2, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	da03      	bge.n	8004736 <_printf_i+0x5e>
 800472e:	222d      	movs	r2, #45	; 0x2d
 8004730:	425b      	negs	r3, r3
 8004732:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004736:	486f      	ldr	r0, [pc, #444]	; (80048f4 <_printf_i+0x21c>)
 8004738:	220a      	movs	r2, #10
 800473a:	e039      	b.n	80047b0 <_printf_i+0xd8>
 800473c:	2973      	cmp	r1, #115	; 0x73
 800473e:	f000 809d 	beq.w	800487c <_printf_i+0x1a4>
 8004742:	d808      	bhi.n	8004756 <_printf_i+0x7e>
 8004744:	296f      	cmp	r1, #111	; 0x6f
 8004746:	d020      	beq.n	800478a <_printf_i+0xb2>
 8004748:	2970      	cmp	r1, #112	; 0x70
 800474a:	d1dd      	bne.n	8004708 <_printf_i+0x30>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	f043 0320 	orr.w	r3, r3, #32
 8004752:	6023      	str	r3, [r4, #0]
 8004754:	e003      	b.n	800475e <_printf_i+0x86>
 8004756:	2975      	cmp	r1, #117	; 0x75
 8004758:	d017      	beq.n	800478a <_printf_i+0xb2>
 800475a:	2978      	cmp	r1, #120	; 0x78
 800475c:	d1d4      	bne.n	8004708 <_printf_i+0x30>
 800475e:	2378      	movs	r3, #120	; 0x78
 8004760:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004764:	4864      	ldr	r0, [pc, #400]	; (80048f8 <_printf_i+0x220>)
 8004766:	e055      	b.n	8004814 <_printf_i+0x13c>
 8004768:	6813      	ldr	r3, [r2, #0]
 800476a:	1d19      	adds	r1, r3, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6011      	str	r1, [r2, #0]
 8004770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004778:	2301      	movs	r3, #1
 800477a:	e08c      	b.n	8004896 <_printf_i+0x1be>
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6011      	str	r1, [r2, #0]
 8004780:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004784:	bf18      	it	ne
 8004786:	b21b      	sxthne	r3, r3
 8004788:	e7cf      	b.n	800472a <_printf_i+0x52>
 800478a:	6813      	ldr	r3, [r2, #0]
 800478c:	6825      	ldr	r5, [r4, #0]
 800478e:	1d18      	adds	r0, r3, #4
 8004790:	6010      	str	r0, [r2, #0]
 8004792:	0628      	lsls	r0, r5, #24
 8004794:	d501      	bpl.n	800479a <_printf_i+0xc2>
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	e002      	b.n	80047a0 <_printf_i+0xc8>
 800479a:	0668      	lsls	r0, r5, #25
 800479c:	d5fb      	bpl.n	8004796 <_printf_i+0xbe>
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	4854      	ldr	r0, [pc, #336]	; (80048f4 <_printf_i+0x21c>)
 80047a2:	296f      	cmp	r1, #111	; 0x6f
 80047a4:	bf14      	ite	ne
 80047a6:	220a      	movne	r2, #10
 80047a8:	2208      	moveq	r2, #8
 80047aa:	2100      	movs	r1, #0
 80047ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047b0:	6865      	ldr	r5, [r4, #4]
 80047b2:	60a5      	str	r5, [r4, #8]
 80047b4:	2d00      	cmp	r5, #0
 80047b6:	f2c0 8095 	blt.w	80048e4 <_printf_i+0x20c>
 80047ba:	6821      	ldr	r1, [r4, #0]
 80047bc:	f021 0104 	bic.w	r1, r1, #4
 80047c0:	6021      	str	r1, [r4, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d13d      	bne.n	8004842 <_printf_i+0x16a>
 80047c6:	2d00      	cmp	r5, #0
 80047c8:	f040 808e 	bne.w	80048e8 <_printf_i+0x210>
 80047cc:	4665      	mov	r5, ip
 80047ce:	2a08      	cmp	r2, #8
 80047d0:	d10b      	bne.n	80047ea <_printf_i+0x112>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	07db      	lsls	r3, r3, #31
 80047d6:	d508      	bpl.n	80047ea <_printf_i+0x112>
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	6862      	ldr	r2, [r4, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	bfde      	ittt	le
 80047e0:	2330      	movle	r3, #48	; 0x30
 80047e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047e6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80047ea:	ebac 0305 	sub.w	r3, ip, r5
 80047ee:	6123      	str	r3, [r4, #16]
 80047f0:	f8cd 8000 	str.w	r8, [sp]
 80047f4:	463b      	mov	r3, r7
 80047f6:	aa03      	add	r2, sp, #12
 80047f8:	4621      	mov	r1, r4
 80047fa:	4630      	mov	r0, r6
 80047fc:	f7ff fef6 	bl	80045ec <_printf_common>
 8004800:	3001      	adds	r0, #1
 8004802:	d14d      	bne.n	80048a0 <_printf_i+0x1c8>
 8004804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004808:	b005      	add	sp, #20
 800480a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800480e:	4839      	ldr	r0, [pc, #228]	; (80048f4 <_printf_i+0x21c>)
 8004810:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004814:	6813      	ldr	r3, [r2, #0]
 8004816:	6821      	ldr	r1, [r4, #0]
 8004818:	1d1d      	adds	r5, r3, #4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6015      	str	r5, [r2, #0]
 800481e:	060a      	lsls	r2, r1, #24
 8004820:	d50b      	bpl.n	800483a <_printf_i+0x162>
 8004822:	07ca      	lsls	r2, r1, #31
 8004824:	bf44      	itt	mi
 8004826:	f041 0120 	orrmi.w	r1, r1, #32
 800482a:	6021      	strmi	r1, [r4, #0]
 800482c:	b91b      	cbnz	r3, 8004836 <_printf_i+0x15e>
 800482e:	6822      	ldr	r2, [r4, #0]
 8004830:	f022 0220 	bic.w	r2, r2, #32
 8004834:	6022      	str	r2, [r4, #0]
 8004836:	2210      	movs	r2, #16
 8004838:	e7b7      	b.n	80047aa <_printf_i+0xd2>
 800483a:	064d      	lsls	r5, r1, #25
 800483c:	bf48      	it	mi
 800483e:	b29b      	uxthmi	r3, r3
 8004840:	e7ef      	b.n	8004822 <_printf_i+0x14a>
 8004842:	4665      	mov	r5, ip
 8004844:	fbb3 f1f2 	udiv	r1, r3, r2
 8004848:	fb02 3311 	mls	r3, r2, r1, r3
 800484c:	5cc3      	ldrb	r3, [r0, r3]
 800484e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004852:	460b      	mov	r3, r1
 8004854:	2900      	cmp	r1, #0
 8004856:	d1f5      	bne.n	8004844 <_printf_i+0x16c>
 8004858:	e7b9      	b.n	80047ce <_printf_i+0xf6>
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	6825      	ldr	r5, [r4, #0]
 800485e:	6961      	ldr	r1, [r4, #20]
 8004860:	1d18      	adds	r0, r3, #4
 8004862:	6010      	str	r0, [r2, #0]
 8004864:	0628      	lsls	r0, r5, #24
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	d501      	bpl.n	800486e <_printf_i+0x196>
 800486a:	6019      	str	r1, [r3, #0]
 800486c:	e002      	b.n	8004874 <_printf_i+0x19c>
 800486e:	066a      	lsls	r2, r5, #25
 8004870:	d5fb      	bpl.n	800486a <_printf_i+0x192>
 8004872:	8019      	strh	r1, [r3, #0]
 8004874:	2300      	movs	r3, #0
 8004876:	6123      	str	r3, [r4, #16]
 8004878:	4665      	mov	r5, ip
 800487a:	e7b9      	b.n	80047f0 <_printf_i+0x118>
 800487c:	6813      	ldr	r3, [r2, #0]
 800487e:	1d19      	adds	r1, r3, #4
 8004880:	6011      	str	r1, [r2, #0]
 8004882:	681d      	ldr	r5, [r3, #0]
 8004884:	6862      	ldr	r2, [r4, #4]
 8004886:	2100      	movs	r1, #0
 8004888:	4628      	mov	r0, r5
 800488a:	f7fb fca9 	bl	80001e0 <memchr>
 800488e:	b108      	cbz	r0, 8004894 <_printf_i+0x1bc>
 8004890:	1b40      	subs	r0, r0, r5
 8004892:	6060      	str	r0, [r4, #4]
 8004894:	6863      	ldr	r3, [r4, #4]
 8004896:	6123      	str	r3, [r4, #16]
 8004898:	2300      	movs	r3, #0
 800489a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800489e:	e7a7      	b.n	80047f0 <_printf_i+0x118>
 80048a0:	6923      	ldr	r3, [r4, #16]
 80048a2:	462a      	mov	r2, r5
 80048a4:	4639      	mov	r1, r7
 80048a6:	4630      	mov	r0, r6
 80048a8:	47c0      	blx	r8
 80048aa:	3001      	adds	r0, #1
 80048ac:	d0aa      	beq.n	8004804 <_printf_i+0x12c>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	079b      	lsls	r3, r3, #30
 80048b2:	d413      	bmi.n	80048dc <_printf_i+0x204>
 80048b4:	68e0      	ldr	r0, [r4, #12]
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	4298      	cmp	r0, r3
 80048ba:	bfb8      	it	lt
 80048bc:	4618      	movlt	r0, r3
 80048be:	e7a3      	b.n	8004808 <_printf_i+0x130>
 80048c0:	2301      	movs	r3, #1
 80048c2:	464a      	mov	r2, r9
 80048c4:	4639      	mov	r1, r7
 80048c6:	4630      	mov	r0, r6
 80048c8:	47c0      	blx	r8
 80048ca:	3001      	adds	r0, #1
 80048cc:	d09a      	beq.n	8004804 <_printf_i+0x12c>
 80048ce:	3501      	adds	r5, #1
 80048d0:	68e3      	ldr	r3, [r4, #12]
 80048d2:	9a03      	ldr	r2, [sp, #12]
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	42ab      	cmp	r3, r5
 80048d8:	dcf2      	bgt.n	80048c0 <_printf_i+0x1e8>
 80048da:	e7eb      	b.n	80048b4 <_printf_i+0x1dc>
 80048dc:	2500      	movs	r5, #0
 80048de:	f104 0919 	add.w	r9, r4, #25
 80048e2:	e7f5      	b.n	80048d0 <_printf_i+0x1f8>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ac      	bne.n	8004842 <_printf_i+0x16a>
 80048e8:	7803      	ldrb	r3, [r0, #0]
 80048ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f2:	e76c      	b.n	80047ce <_printf_i+0xf6>
 80048f4:	080079ca 	.word	0x080079ca
 80048f8:	080079db 	.word	0x080079db

080048fc <_scanf_float>:
 80048fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004900:	469a      	mov	sl, r3
 8004902:	688b      	ldr	r3, [r1, #8]
 8004904:	4616      	mov	r6, r2
 8004906:	1e5a      	subs	r2, r3, #1
 8004908:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800490c:	b087      	sub	sp, #28
 800490e:	bf83      	ittte	hi
 8004910:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004914:	189b      	addhi	r3, r3, r2
 8004916:	9301      	strhi	r3, [sp, #4]
 8004918:	2300      	movls	r3, #0
 800491a:	bf86      	itte	hi
 800491c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004920:	608b      	strhi	r3, [r1, #8]
 8004922:	9301      	strls	r3, [sp, #4]
 8004924:	680b      	ldr	r3, [r1, #0]
 8004926:	4688      	mov	r8, r1
 8004928:	f04f 0b00 	mov.w	fp, #0
 800492c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004930:	f848 3b1c 	str.w	r3, [r8], #28
 8004934:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004938:	4607      	mov	r7, r0
 800493a:	460c      	mov	r4, r1
 800493c:	4645      	mov	r5, r8
 800493e:	465a      	mov	r2, fp
 8004940:	46d9      	mov	r9, fp
 8004942:	f8cd b008 	str.w	fp, [sp, #8]
 8004946:	68a1      	ldr	r1, [r4, #8]
 8004948:	b181      	cbz	r1, 800496c <_scanf_float+0x70>
 800494a:	6833      	ldr	r3, [r6, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b49      	cmp	r3, #73	; 0x49
 8004950:	d071      	beq.n	8004a36 <_scanf_float+0x13a>
 8004952:	d84d      	bhi.n	80049f0 <_scanf_float+0xf4>
 8004954:	2b39      	cmp	r3, #57	; 0x39
 8004956:	d840      	bhi.n	80049da <_scanf_float+0xde>
 8004958:	2b31      	cmp	r3, #49	; 0x31
 800495a:	f080 8088 	bcs.w	8004a6e <_scanf_float+0x172>
 800495e:	2b2d      	cmp	r3, #45	; 0x2d
 8004960:	f000 8090 	beq.w	8004a84 <_scanf_float+0x188>
 8004964:	d815      	bhi.n	8004992 <_scanf_float+0x96>
 8004966:	2b2b      	cmp	r3, #43	; 0x2b
 8004968:	f000 808c 	beq.w	8004a84 <_scanf_float+0x188>
 800496c:	f1b9 0f00 	cmp.w	r9, #0
 8004970:	d003      	beq.n	800497a <_scanf_float+0x7e>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	3a01      	subs	r2, #1
 800497c:	2a01      	cmp	r2, #1
 800497e:	f200 80ea 	bhi.w	8004b56 <_scanf_float+0x25a>
 8004982:	4545      	cmp	r5, r8
 8004984:	f200 80dc 	bhi.w	8004b40 <_scanf_float+0x244>
 8004988:	2601      	movs	r6, #1
 800498a:	4630      	mov	r0, r6
 800498c:	b007      	add	sp, #28
 800498e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004992:	2b2e      	cmp	r3, #46	; 0x2e
 8004994:	f000 809f 	beq.w	8004ad6 <_scanf_float+0x1da>
 8004998:	2b30      	cmp	r3, #48	; 0x30
 800499a:	d1e7      	bne.n	800496c <_scanf_float+0x70>
 800499c:	6820      	ldr	r0, [r4, #0]
 800499e:	f410 7f80 	tst.w	r0, #256	; 0x100
 80049a2:	d064      	beq.n	8004a6e <_scanf_float+0x172>
 80049a4:	9b01      	ldr	r3, [sp, #4]
 80049a6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80049aa:	6020      	str	r0, [r4, #0]
 80049ac:	f109 0901 	add.w	r9, r9, #1
 80049b0:	b11b      	cbz	r3, 80049ba <_scanf_float+0xbe>
 80049b2:	3b01      	subs	r3, #1
 80049b4:	3101      	adds	r1, #1
 80049b6:	9301      	str	r3, [sp, #4]
 80049b8:	60a1      	str	r1, [r4, #8]
 80049ba:	68a3      	ldr	r3, [r4, #8]
 80049bc:	3b01      	subs	r3, #1
 80049be:	60a3      	str	r3, [r4, #8]
 80049c0:	6923      	ldr	r3, [r4, #16]
 80049c2:	3301      	adds	r3, #1
 80049c4:	6123      	str	r3, [r4, #16]
 80049c6:	6873      	ldr	r3, [r6, #4]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	6073      	str	r3, [r6, #4]
 80049ce:	f340 80ac 	ble.w	8004b2a <_scanf_float+0x22e>
 80049d2:	6833      	ldr	r3, [r6, #0]
 80049d4:	3301      	adds	r3, #1
 80049d6:	6033      	str	r3, [r6, #0]
 80049d8:	e7b5      	b.n	8004946 <_scanf_float+0x4a>
 80049da:	2b45      	cmp	r3, #69	; 0x45
 80049dc:	f000 8085 	beq.w	8004aea <_scanf_float+0x1ee>
 80049e0:	2b46      	cmp	r3, #70	; 0x46
 80049e2:	d06a      	beq.n	8004aba <_scanf_float+0x1be>
 80049e4:	2b41      	cmp	r3, #65	; 0x41
 80049e6:	d1c1      	bne.n	800496c <_scanf_float+0x70>
 80049e8:	2a01      	cmp	r2, #1
 80049ea:	d1bf      	bne.n	800496c <_scanf_float+0x70>
 80049ec:	2202      	movs	r2, #2
 80049ee:	e046      	b.n	8004a7e <_scanf_float+0x182>
 80049f0:	2b65      	cmp	r3, #101	; 0x65
 80049f2:	d07a      	beq.n	8004aea <_scanf_float+0x1ee>
 80049f4:	d818      	bhi.n	8004a28 <_scanf_float+0x12c>
 80049f6:	2b54      	cmp	r3, #84	; 0x54
 80049f8:	d066      	beq.n	8004ac8 <_scanf_float+0x1cc>
 80049fa:	d811      	bhi.n	8004a20 <_scanf_float+0x124>
 80049fc:	2b4e      	cmp	r3, #78	; 0x4e
 80049fe:	d1b5      	bne.n	800496c <_scanf_float+0x70>
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	d146      	bne.n	8004a92 <_scanf_float+0x196>
 8004a04:	f1b9 0f00 	cmp.w	r9, #0
 8004a08:	d145      	bne.n	8004a96 <_scanf_float+0x19a>
 8004a0a:	6821      	ldr	r1, [r4, #0]
 8004a0c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004a10:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004a14:	d13f      	bne.n	8004a96 <_scanf_float+0x19a>
 8004a16:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004a1a:	6021      	str	r1, [r4, #0]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	e02e      	b.n	8004a7e <_scanf_float+0x182>
 8004a20:	2b59      	cmp	r3, #89	; 0x59
 8004a22:	d01e      	beq.n	8004a62 <_scanf_float+0x166>
 8004a24:	2b61      	cmp	r3, #97	; 0x61
 8004a26:	e7de      	b.n	80049e6 <_scanf_float+0xea>
 8004a28:	2b6e      	cmp	r3, #110	; 0x6e
 8004a2a:	d0e9      	beq.n	8004a00 <_scanf_float+0x104>
 8004a2c:	d815      	bhi.n	8004a5a <_scanf_float+0x15e>
 8004a2e:	2b66      	cmp	r3, #102	; 0x66
 8004a30:	d043      	beq.n	8004aba <_scanf_float+0x1be>
 8004a32:	2b69      	cmp	r3, #105	; 0x69
 8004a34:	d19a      	bne.n	800496c <_scanf_float+0x70>
 8004a36:	f1bb 0f00 	cmp.w	fp, #0
 8004a3a:	d138      	bne.n	8004aae <_scanf_float+0x1b2>
 8004a3c:	f1b9 0f00 	cmp.w	r9, #0
 8004a40:	d197      	bne.n	8004972 <_scanf_float+0x76>
 8004a42:	6821      	ldr	r1, [r4, #0]
 8004a44:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004a48:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004a4c:	d195      	bne.n	800497a <_scanf_float+0x7e>
 8004a4e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004a52:	6021      	str	r1, [r4, #0]
 8004a54:	f04f 0b01 	mov.w	fp, #1
 8004a58:	e011      	b.n	8004a7e <_scanf_float+0x182>
 8004a5a:	2b74      	cmp	r3, #116	; 0x74
 8004a5c:	d034      	beq.n	8004ac8 <_scanf_float+0x1cc>
 8004a5e:	2b79      	cmp	r3, #121	; 0x79
 8004a60:	d184      	bne.n	800496c <_scanf_float+0x70>
 8004a62:	f1bb 0f07 	cmp.w	fp, #7
 8004a66:	d181      	bne.n	800496c <_scanf_float+0x70>
 8004a68:	f04f 0b08 	mov.w	fp, #8
 8004a6c:	e007      	b.n	8004a7e <_scanf_float+0x182>
 8004a6e:	eb12 0f0b 	cmn.w	r2, fp
 8004a72:	f47f af7b 	bne.w	800496c <_scanf_float+0x70>
 8004a76:	6821      	ldr	r1, [r4, #0]
 8004a78:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004a7c:	6021      	str	r1, [r4, #0]
 8004a7e:	702b      	strb	r3, [r5, #0]
 8004a80:	3501      	adds	r5, #1
 8004a82:	e79a      	b.n	80049ba <_scanf_float+0xbe>
 8004a84:	6821      	ldr	r1, [r4, #0]
 8004a86:	0608      	lsls	r0, r1, #24
 8004a88:	f57f af70 	bpl.w	800496c <_scanf_float+0x70>
 8004a8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004a90:	e7f4      	b.n	8004a7c <_scanf_float+0x180>
 8004a92:	2a02      	cmp	r2, #2
 8004a94:	d047      	beq.n	8004b26 <_scanf_float+0x22a>
 8004a96:	f1bb 0f01 	cmp.w	fp, #1
 8004a9a:	d003      	beq.n	8004aa4 <_scanf_float+0x1a8>
 8004a9c:	f1bb 0f04 	cmp.w	fp, #4
 8004aa0:	f47f af64 	bne.w	800496c <_scanf_float+0x70>
 8004aa4:	f10b 0b01 	add.w	fp, fp, #1
 8004aa8:	fa5f fb8b 	uxtb.w	fp, fp
 8004aac:	e7e7      	b.n	8004a7e <_scanf_float+0x182>
 8004aae:	f1bb 0f03 	cmp.w	fp, #3
 8004ab2:	d0f7      	beq.n	8004aa4 <_scanf_float+0x1a8>
 8004ab4:	f1bb 0f05 	cmp.w	fp, #5
 8004ab8:	e7f2      	b.n	8004aa0 <_scanf_float+0x1a4>
 8004aba:	f1bb 0f02 	cmp.w	fp, #2
 8004abe:	f47f af55 	bne.w	800496c <_scanf_float+0x70>
 8004ac2:	f04f 0b03 	mov.w	fp, #3
 8004ac6:	e7da      	b.n	8004a7e <_scanf_float+0x182>
 8004ac8:	f1bb 0f06 	cmp.w	fp, #6
 8004acc:	f47f af4e 	bne.w	800496c <_scanf_float+0x70>
 8004ad0:	f04f 0b07 	mov.w	fp, #7
 8004ad4:	e7d3      	b.n	8004a7e <_scanf_float+0x182>
 8004ad6:	6821      	ldr	r1, [r4, #0]
 8004ad8:	0588      	lsls	r0, r1, #22
 8004ada:	f57f af47 	bpl.w	800496c <_scanf_float+0x70>
 8004ade:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004ae2:	6021      	str	r1, [r4, #0]
 8004ae4:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ae8:	e7c9      	b.n	8004a7e <_scanf_float+0x182>
 8004aea:	6821      	ldr	r1, [r4, #0]
 8004aec:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004af0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004af4:	d006      	beq.n	8004b04 <_scanf_float+0x208>
 8004af6:	0548      	lsls	r0, r1, #21
 8004af8:	f57f af38 	bpl.w	800496c <_scanf_float+0x70>
 8004afc:	f1b9 0f00 	cmp.w	r9, #0
 8004b00:	f43f af3b 	beq.w	800497a <_scanf_float+0x7e>
 8004b04:	0588      	lsls	r0, r1, #22
 8004b06:	bf58      	it	pl
 8004b08:	9802      	ldrpl	r0, [sp, #8]
 8004b0a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004b0e:	bf58      	it	pl
 8004b10:	eba9 0000 	subpl.w	r0, r9, r0
 8004b14:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004b18:	bf58      	it	pl
 8004b1a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004b1e:	6021      	str	r1, [r4, #0]
 8004b20:	f04f 0900 	mov.w	r9, #0
 8004b24:	e7ab      	b.n	8004a7e <_scanf_float+0x182>
 8004b26:	2203      	movs	r2, #3
 8004b28:	e7a9      	b.n	8004a7e <_scanf_float+0x182>
 8004b2a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b2e:	9205      	str	r2, [sp, #20]
 8004b30:	4631      	mov	r1, r6
 8004b32:	4638      	mov	r0, r7
 8004b34:	4798      	blx	r3
 8004b36:	9a05      	ldr	r2, [sp, #20]
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	f43f af04 	beq.w	8004946 <_scanf_float+0x4a>
 8004b3e:	e715      	b.n	800496c <_scanf_float+0x70>
 8004b40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004b48:	4632      	mov	r2, r6
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	4798      	blx	r3
 8004b4e:	6923      	ldr	r3, [r4, #16]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	6123      	str	r3, [r4, #16]
 8004b54:	e715      	b.n	8004982 <_scanf_float+0x86>
 8004b56:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004b5a:	2b06      	cmp	r3, #6
 8004b5c:	d80a      	bhi.n	8004b74 <_scanf_float+0x278>
 8004b5e:	f1bb 0f02 	cmp.w	fp, #2
 8004b62:	d968      	bls.n	8004c36 <_scanf_float+0x33a>
 8004b64:	f1ab 0b03 	sub.w	fp, fp, #3
 8004b68:	fa5f fb8b 	uxtb.w	fp, fp
 8004b6c:	eba5 0b0b 	sub.w	fp, r5, fp
 8004b70:	455d      	cmp	r5, fp
 8004b72:	d14b      	bne.n	8004c0c <_scanf_float+0x310>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	05da      	lsls	r2, r3, #23
 8004b78:	d51f      	bpl.n	8004bba <_scanf_float+0x2be>
 8004b7a:	055b      	lsls	r3, r3, #21
 8004b7c:	d468      	bmi.n	8004c50 <_scanf_float+0x354>
 8004b7e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	2965      	cmp	r1, #101	; 0x65
 8004b86:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004b8a:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8004b8e:	6123      	str	r3, [r4, #16]
 8004b90:	d00d      	beq.n	8004bae <_scanf_float+0x2b2>
 8004b92:	2945      	cmp	r1, #69	; 0x45
 8004b94:	d00b      	beq.n	8004bae <_scanf_float+0x2b2>
 8004b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b9a:	4632      	mov	r2, r6
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	4798      	blx	r3
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	f1a5 0b02 	sub.w	fp, r5, #2
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bb2:	4632      	mov	r2, r6
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	4798      	blx	r3
 8004bb8:	465d      	mov	r5, fp
 8004bba:	6826      	ldr	r6, [r4, #0]
 8004bbc:	f016 0610 	ands.w	r6, r6, #16
 8004bc0:	d17a      	bne.n	8004cb8 <_scanf_float+0x3bc>
 8004bc2:	702e      	strb	r6, [r5, #0]
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bce:	d142      	bne.n	8004c56 <_scanf_float+0x35a>
 8004bd0:	9b02      	ldr	r3, [sp, #8]
 8004bd2:	eba9 0303 	sub.w	r3, r9, r3
 8004bd6:	425a      	negs	r2, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d149      	bne.n	8004c70 <_scanf_float+0x374>
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4641      	mov	r1, r8
 8004be0:	4638      	mov	r0, r7
 8004be2:	f000 feb5 	bl	8005950 <_strtod_r>
 8004be6:	6825      	ldr	r5, [r4, #0]
 8004be8:	f8da 3000 	ldr.w	r3, [sl]
 8004bec:	f015 0f02 	tst.w	r5, #2
 8004bf0:	f103 0204 	add.w	r2, r3, #4
 8004bf4:	ec59 8b10 	vmov	r8, r9, d0
 8004bf8:	f8ca 2000 	str.w	r2, [sl]
 8004bfc:	d043      	beq.n	8004c86 <_scanf_float+0x38a>
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	e9c3 8900 	strd	r8, r9, [r3]
 8004c04:	68e3      	ldr	r3, [r4, #12]
 8004c06:	3301      	adds	r3, #1
 8004c08:	60e3      	str	r3, [r4, #12]
 8004c0a:	e6be      	b.n	800498a <_scanf_float+0x8e>
 8004c0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c10:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004c14:	4632      	mov	r2, r6
 8004c16:	4638      	mov	r0, r7
 8004c18:	4798      	blx	r3
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	6123      	str	r3, [r4, #16]
 8004c20:	e7a6      	b.n	8004b70 <_scanf_float+0x274>
 8004c22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c26:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004c2a:	4632      	mov	r2, r6
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	4798      	blx	r3
 8004c30:	6923      	ldr	r3, [r4, #16]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	6123      	str	r3, [r4, #16]
 8004c36:	4545      	cmp	r5, r8
 8004c38:	d8f3      	bhi.n	8004c22 <_scanf_float+0x326>
 8004c3a:	e6a5      	b.n	8004988 <_scanf_float+0x8c>
 8004c3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c40:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004c44:	4632      	mov	r2, r6
 8004c46:	4638      	mov	r0, r7
 8004c48:	4798      	blx	r3
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	4545      	cmp	r5, r8
 8004c52:	d8f3      	bhi.n	8004c3c <_scanf_float+0x340>
 8004c54:	e698      	b.n	8004988 <_scanf_float+0x8c>
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0bf      	beq.n	8004bdc <_scanf_float+0x2e0>
 8004c5c:	9904      	ldr	r1, [sp, #16]
 8004c5e:	230a      	movs	r3, #10
 8004c60:	4632      	mov	r2, r6
 8004c62:	3101      	adds	r1, #1
 8004c64:	4638      	mov	r0, r7
 8004c66:	f000 feff 	bl	8005a68 <_strtol_r>
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	9d04      	ldr	r5, [sp, #16]
 8004c6e:	1ac2      	subs	r2, r0, r3
 8004c70:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004c74:	429d      	cmp	r5, r3
 8004c76:	bf28      	it	cs
 8004c78:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004c7c:	490f      	ldr	r1, [pc, #60]	; (8004cbc <_scanf_float+0x3c0>)
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f000 f834 	bl	8004cec <siprintf>
 8004c84:	e7aa      	b.n	8004bdc <_scanf_float+0x2e0>
 8004c86:	f015 0504 	ands.w	r5, r5, #4
 8004c8a:	d1b8      	bne.n	8004bfe <_scanf_float+0x302>
 8004c8c:	681f      	ldr	r7, [r3, #0]
 8004c8e:	ee10 2a10 	vmov	r2, s0
 8004c92:	464b      	mov	r3, r9
 8004c94:	ee10 0a10 	vmov	r0, s0
 8004c98:	4649      	mov	r1, r9
 8004c9a:	f7fb ff47 	bl	8000b2c <__aeabi_dcmpun>
 8004c9e:	b128      	cbz	r0, 8004cac <_scanf_float+0x3b0>
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f000 f81d 	bl	8004ce0 <nanf>
 8004ca6:	ed87 0a00 	vstr	s0, [r7]
 8004caa:	e7ab      	b.n	8004c04 <_scanf_float+0x308>
 8004cac:	4640      	mov	r0, r8
 8004cae:	4649      	mov	r1, r9
 8004cb0:	f7fb ff9a 	bl	8000be8 <__aeabi_d2f>
 8004cb4:	6038      	str	r0, [r7, #0]
 8004cb6:	e7a5      	b.n	8004c04 <_scanf_float+0x308>
 8004cb8:	2600      	movs	r6, #0
 8004cba:	e666      	b.n	800498a <_scanf_float+0x8e>
 8004cbc:	080079ec 	.word	0x080079ec

08004cc0 <_sbrk_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4c06      	ldr	r4, [pc, #24]	; (8004cdc <_sbrk_r+0x1c>)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	f7fc f996 	bl	8000ffc <_sbrk>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_sbrk_r+0x1a>
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_sbrk_r+0x1a>
 8004cd8:	602b      	str	r3, [r5, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	20001e5c 	.word	0x20001e5c

08004ce0 <nanf>:
 8004ce0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004ce8 <nanf+0x8>
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	7fc00000 	.word	0x7fc00000

08004cec <siprintf>:
 8004cec:	b40e      	push	{r1, r2, r3}
 8004cee:	b500      	push	{lr}
 8004cf0:	b09c      	sub	sp, #112	; 0x70
 8004cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8004cf4:	9002      	str	r0, [sp, #8]
 8004cf6:	9006      	str	r0, [sp, #24]
 8004cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cfc:	4809      	ldr	r0, [pc, #36]	; (8004d24 <siprintf+0x38>)
 8004cfe:	9107      	str	r1, [sp, #28]
 8004d00:	9104      	str	r1, [sp, #16]
 8004d02:	4909      	ldr	r1, [pc, #36]	; (8004d28 <siprintf+0x3c>)
 8004d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d08:	9105      	str	r1, [sp, #20]
 8004d0a:	6800      	ldr	r0, [r0, #0]
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	a902      	add	r1, sp, #8
 8004d10:	f002 fcc2 	bl	8007698 <_svfiprintf_r>
 8004d14:	9b02      	ldr	r3, [sp, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	b01c      	add	sp, #112	; 0x70
 8004d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d20:	b003      	add	sp, #12
 8004d22:	4770      	bx	lr
 8004d24:	20000380 	.word	0x20000380
 8004d28:	ffff0208 	.word	0xffff0208

08004d2c <sulp>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	460d      	mov	r5, r1
 8004d32:	ec45 4b10 	vmov	d0, r4, r5
 8004d36:	4616      	mov	r6, r2
 8004d38:	f002 fb12 	bl	8007360 <__ulp>
 8004d3c:	ec51 0b10 	vmov	r0, r1, d0
 8004d40:	b17e      	cbz	r6, 8004d62 <sulp+0x36>
 8004d42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004d46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	dd09      	ble.n	8004d62 <sulp+0x36>
 8004d4e:	051b      	lsls	r3, r3, #20
 8004d50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004d54:	2400      	movs	r4, #0
 8004d56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	462b      	mov	r3, r5
 8004d5e:	f7fb fc4b 	bl	80005f8 <__aeabi_dmul>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	0000      	movs	r0, r0
	...

08004d68 <_strtod_l>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	461f      	mov	r7, r3
 8004d6e:	b0a1      	sub	sp, #132	; 0x84
 8004d70:	2300      	movs	r3, #0
 8004d72:	4681      	mov	r9, r0
 8004d74:	4638      	mov	r0, r7
 8004d76:	460e      	mov	r6, r1
 8004d78:	9217      	str	r2, [sp, #92]	; 0x5c
 8004d7a:	931c      	str	r3, [sp, #112]	; 0x70
 8004d7c:	f001 fff5 	bl	8006d6a <__localeconv_l>
 8004d80:	4680      	mov	r8, r0
 8004d82:	6800      	ldr	r0, [r0, #0]
 8004d84:	f7fb fa24 	bl	80001d0 <strlen>
 8004d88:	f04f 0a00 	mov.w	sl, #0
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	f04f 0b00 	mov.w	fp, #0
 8004d92:	961b      	str	r6, [sp, #108]	; 0x6c
 8004d94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	2a0d      	cmp	r2, #13
 8004d9a:	d832      	bhi.n	8004e02 <_strtod_l+0x9a>
 8004d9c:	2a09      	cmp	r2, #9
 8004d9e:	d236      	bcs.n	8004e0e <_strtod_l+0xa6>
 8004da0:	2a00      	cmp	r2, #0
 8004da2:	d03e      	beq.n	8004e22 <_strtod_l+0xba>
 8004da4:	2300      	movs	r3, #0
 8004da6:	930d      	str	r3, [sp, #52]	; 0x34
 8004da8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004daa:	782b      	ldrb	r3, [r5, #0]
 8004dac:	2b30      	cmp	r3, #48	; 0x30
 8004dae:	f040 80ac 	bne.w	8004f0a <_strtod_l+0x1a2>
 8004db2:	786b      	ldrb	r3, [r5, #1]
 8004db4:	2b58      	cmp	r3, #88	; 0x58
 8004db6:	d001      	beq.n	8004dbc <_strtod_l+0x54>
 8004db8:	2b78      	cmp	r3, #120	; 0x78
 8004dba:	d167      	bne.n	8004e8c <_strtod_l+0x124>
 8004dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dbe:	9301      	str	r3, [sp, #4]
 8004dc0:	ab1c      	add	r3, sp, #112	; 0x70
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	9702      	str	r7, [sp, #8]
 8004dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004dc8:	4a88      	ldr	r2, [pc, #544]	; (8004fec <_strtod_l+0x284>)
 8004dca:	a91b      	add	r1, sp, #108	; 0x6c
 8004dcc:	4648      	mov	r0, r9
 8004dce:	f001 fcf2 	bl	80067b6 <__gethex>
 8004dd2:	f010 0407 	ands.w	r4, r0, #7
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	d005      	beq.n	8004de6 <_strtod_l+0x7e>
 8004dda:	2c06      	cmp	r4, #6
 8004ddc:	d12b      	bne.n	8004e36 <_strtod_l+0xce>
 8004dde:	3501      	adds	r5, #1
 8004de0:	2300      	movs	r3, #0
 8004de2:	951b      	str	r5, [sp, #108]	; 0x6c
 8004de4:	930d      	str	r3, [sp, #52]	; 0x34
 8004de6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f040 859a 	bne.w	8005922 <_strtod_l+0xbba>
 8004dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004df0:	b1e3      	cbz	r3, 8004e2c <_strtod_l+0xc4>
 8004df2:	4652      	mov	r2, sl
 8004df4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004df8:	ec43 2b10 	vmov	d0, r2, r3
 8004dfc:	b021      	add	sp, #132	; 0x84
 8004dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e02:	2a2b      	cmp	r2, #43	; 0x2b
 8004e04:	d015      	beq.n	8004e32 <_strtod_l+0xca>
 8004e06:	2a2d      	cmp	r2, #45	; 0x2d
 8004e08:	d004      	beq.n	8004e14 <_strtod_l+0xac>
 8004e0a:	2a20      	cmp	r2, #32
 8004e0c:	d1ca      	bne.n	8004da4 <_strtod_l+0x3c>
 8004e0e:	3301      	adds	r3, #1
 8004e10:	931b      	str	r3, [sp, #108]	; 0x6c
 8004e12:	e7bf      	b.n	8004d94 <_strtod_l+0x2c>
 8004e14:	2201      	movs	r2, #1
 8004e16:	920d      	str	r2, [sp, #52]	; 0x34
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1c2      	bne.n	8004da8 <_strtod_l+0x40>
 8004e22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e24:	961b      	str	r6, [sp, #108]	; 0x6c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f040 8579 	bne.w	800591e <_strtod_l+0xbb6>
 8004e2c:	4652      	mov	r2, sl
 8004e2e:	465b      	mov	r3, fp
 8004e30:	e7e2      	b.n	8004df8 <_strtod_l+0x90>
 8004e32:	2200      	movs	r2, #0
 8004e34:	e7ef      	b.n	8004e16 <_strtod_l+0xae>
 8004e36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004e38:	b13a      	cbz	r2, 8004e4a <_strtod_l+0xe2>
 8004e3a:	2135      	movs	r1, #53	; 0x35
 8004e3c:	a81e      	add	r0, sp, #120	; 0x78
 8004e3e:	f002 fb87 	bl	8007550 <__copybits>
 8004e42:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e44:	4648      	mov	r0, r9
 8004e46:	f001 fff4 	bl	8006e32 <_Bfree>
 8004e4a:	3c01      	subs	r4, #1
 8004e4c:	2c04      	cmp	r4, #4
 8004e4e:	d806      	bhi.n	8004e5e <_strtod_l+0xf6>
 8004e50:	e8df f004 	tbb	[pc, r4]
 8004e54:	1714030a 	.word	0x1714030a
 8004e58:	0a          	.byte	0x0a
 8004e59:	00          	.byte	0x00
 8004e5a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004e5e:	0730      	lsls	r0, r6, #28
 8004e60:	d5c1      	bpl.n	8004de6 <_strtod_l+0x7e>
 8004e62:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004e66:	e7be      	b.n	8004de6 <_strtod_l+0x7e>
 8004e68:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004e6c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004e6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e72:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004e76:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004e7a:	e7f0      	b.n	8004e5e <_strtod_l+0xf6>
 8004e7c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004ff0 <_strtod_l+0x288>
 8004e80:	e7ed      	b.n	8004e5e <_strtod_l+0xf6>
 8004e82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004e86:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004e8a:	e7e8      	b.n	8004e5e <_strtod_l+0xf6>
 8004e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	2b30      	cmp	r3, #48	; 0x30
 8004e96:	d0f9      	beq.n	8004e8c <_strtod_l+0x124>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0a4      	beq.n	8004de6 <_strtod_l+0x7e>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	2500      	movs	r5, #0
 8004ea0:	9306      	str	r3, [sp, #24]
 8004ea2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ea4:	9308      	str	r3, [sp, #32]
 8004ea6:	9507      	str	r5, [sp, #28]
 8004ea8:	9505      	str	r5, [sp, #20]
 8004eaa:	220a      	movs	r2, #10
 8004eac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004eae:	7807      	ldrb	r7, [r0, #0]
 8004eb0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004eb4:	b2d9      	uxtb	r1, r3
 8004eb6:	2909      	cmp	r1, #9
 8004eb8:	d929      	bls.n	8004f0e <_strtod_l+0x1a6>
 8004eba:	4622      	mov	r2, r4
 8004ebc:	f8d8 1000 	ldr.w	r1, [r8]
 8004ec0:	f002 fce2 	bl	8007888 <strncmp>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d031      	beq.n	8004f2c <_strtod_l+0x1c4>
 8004ec8:	2000      	movs	r0, #0
 8004eca:	9c05      	ldr	r4, [sp, #20]
 8004ecc:	9004      	str	r0, [sp, #16]
 8004ece:	463b      	mov	r3, r7
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	2b65      	cmp	r3, #101	; 0x65
 8004ed4:	d001      	beq.n	8004eda <_strtod_l+0x172>
 8004ed6:	2b45      	cmp	r3, #69	; 0x45
 8004ed8:	d114      	bne.n	8004f04 <_strtod_l+0x19c>
 8004eda:	b924      	cbnz	r4, 8004ee6 <_strtod_l+0x17e>
 8004edc:	b910      	cbnz	r0, 8004ee4 <_strtod_l+0x17c>
 8004ede:	9b06      	ldr	r3, [sp, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d09e      	beq.n	8004e22 <_strtod_l+0xba>
 8004ee4:	2400      	movs	r4, #0
 8004ee6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004ee8:	1c73      	adds	r3, r6, #1
 8004eea:	931b      	str	r3, [sp, #108]	; 0x6c
 8004eec:	7873      	ldrb	r3, [r6, #1]
 8004eee:	2b2b      	cmp	r3, #43	; 0x2b
 8004ef0:	d078      	beq.n	8004fe4 <_strtod_l+0x27c>
 8004ef2:	2b2d      	cmp	r3, #45	; 0x2d
 8004ef4:	d070      	beq.n	8004fd8 <_strtod_l+0x270>
 8004ef6:	f04f 0c00 	mov.w	ip, #0
 8004efa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004efe:	2f09      	cmp	r7, #9
 8004f00:	d97c      	bls.n	8004ffc <_strtod_l+0x294>
 8004f02:	961b      	str	r6, [sp, #108]	; 0x6c
 8004f04:	f04f 0e00 	mov.w	lr, #0
 8004f08:	e09a      	b.n	8005040 <_strtod_l+0x2d8>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e7c7      	b.n	8004e9e <_strtod_l+0x136>
 8004f0e:	9905      	ldr	r1, [sp, #20]
 8004f10:	2908      	cmp	r1, #8
 8004f12:	bfdd      	ittte	le
 8004f14:	9907      	ldrle	r1, [sp, #28]
 8004f16:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f1a:	9307      	strle	r3, [sp, #28]
 8004f1c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004f20:	9b05      	ldr	r3, [sp, #20]
 8004f22:	3001      	adds	r0, #1
 8004f24:	3301      	adds	r3, #1
 8004f26:	9305      	str	r3, [sp, #20]
 8004f28:	901b      	str	r0, [sp, #108]	; 0x6c
 8004f2a:	e7bf      	b.n	8004eac <_strtod_l+0x144>
 8004f2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f2e:	191a      	adds	r2, r3, r4
 8004f30:	921b      	str	r2, [sp, #108]	; 0x6c
 8004f32:	9a05      	ldr	r2, [sp, #20]
 8004f34:	5d1b      	ldrb	r3, [r3, r4]
 8004f36:	2a00      	cmp	r2, #0
 8004f38:	d037      	beq.n	8004faa <_strtod_l+0x242>
 8004f3a:	9c05      	ldr	r4, [sp, #20]
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004f42:	2909      	cmp	r1, #9
 8004f44:	d913      	bls.n	8004f6e <_strtod_l+0x206>
 8004f46:	2101      	movs	r1, #1
 8004f48:	9104      	str	r1, [sp, #16]
 8004f4a:	e7c2      	b.n	8004ed2 <_strtod_l+0x16a>
 8004f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	921b      	str	r2, [sp, #108]	; 0x6c
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	3001      	adds	r0, #1
 8004f56:	2b30      	cmp	r3, #48	; 0x30
 8004f58:	d0f8      	beq.n	8004f4c <_strtod_l+0x1e4>
 8004f5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004f5e:	2a08      	cmp	r2, #8
 8004f60:	f200 84e4 	bhi.w	800592c <_strtod_l+0xbc4>
 8004f64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004f66:	9208      	str	r2, [sp, #32]
 8004f68:	4602      	mov	r2, r0
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004f72:	f100 0101 	add.w	r1, r0, #1
 8004f76:	d012      	beq.n	8004f9e <_strtod_l+0x236>
 8004f78:	440a      	add	r2, r1
 8004f7a:	eb00 0c04 	add.w	ip, r0, r4
 8004f7e:	4621      	mov	r1, r4
 8004f80:	270a      	movs	r7, #10
 8004f82:	458c      	cmp	ip, r1
 8004f84:	d113      	bne.n	8004fae <_strtod_l+0x246>
 8004f86:	1821      	adds	r1, r4, r0
 8004f88:	2908      	cmp	r1, #8
 8004f8a:	f104 0401 	add.w	r4, r4, #1
 8004f8e:	4404      	add	r4, r0
 8004f90:	dc19      	bgt.n	8004fc6 <_strtod_l+0x25e>
 8004f92:	9b07      	ldr	r3, [sp, #28]
 8004f94:	210a      	movs	r1, #10
 8004f96:	fb01 e303 	mla	r3, r1, r3, lr
 8004f9a:	9307      	str	r3, [sp, #28]
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fa0:	1c58      	adds	r0, r3, #1
 8004fa2:	901b      	str	r0, [sp, #108]	; 0x6c
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	4608      	mov	r0, r1
 8004fa8:	e7c9      	b.n	8004f3e <_strtod_l+0x1d6>
 8004faa:	9805      	ldr	r0, [sp, #20]
 8004fac:	e7d3      	b.n	8004f56 <_strtod_l+0x1ee>
 8004fae:	2908      	cmp	r1, #8
 8004fb0:	f101 0101 	add.w	r1, r1, #1
 8004fb4:	dc03      	bgt.n	8004fbe <_strtod_l+0x256>
 8004fb6:	9b07      	ldr	r3, [sp, #28]
 8004fb8:	437b      	muls	r3, r7
 8004fba:	9307      	str	r3, [sp, #28]
 8004fbc:	e7e1      	b.n	8004f82 <_strtod_l+0x21a>
 8004fbe:	2910      	cmp	r1, #16
 8004fc0:	bfd8      	it	le
 8004fc2:	437d      	mulle	r5, r7
 8004fc4:	e7dd      	b.n	8004f82 <_strtod_l+0x21a>
 8004fc6:	2c10      	cmp	r4, #16
 8004fc8:	bfdc      	itt	le
 8004fca:	210a      	movle	r1, #10
 8004fcc:	fb01 e505 	mlale	r5, r1, r5, lr
 8004fd0:	e7e4      	b.n	8004f9c <_strtod_l+0x234>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	9304      	str	r3, [sp, #16]
 8004fd6:	e781      	b.n	8004edc <_strtod_l+0x174>
 8004fd8:	f04f 0c01 	mov.w	ip, #1
 8004fdc:	1cb3      	adds	r3, r6, #2
 8004fde:	931b      	str	r3, [sp, #108]	; 0x6c
 8004fe0:	78b3      	ldrb	r3, [r6, #2]
 8004fe2:	e78a      	b.n	8004efa <_strtod_l+0x192>
 8004fe4:	f04f 0c00 	mov.w	ip, #0
 8004fe8:	e7f8      	b.n	8004fdc <_strtod_l+0x274>
 8004fea:	bf00      	nop
 8004fec:	080079f4 	.word	0x080079f4
 8004ff0:	7ff00000 	.word	0x7ff00000
 8004ff4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ff6:	1c5f      	adds	r7, r3, #1
 8004ff8:	971b      	str	r7, [sp, #108]	; 0x6c
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	2b30      	cmp	r3, #48	; 0x30
 8004ffe:	d0f9      	beq.n	8004ff4 <_strtod_l+0x28c>
 8005000:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005004:	2f08      	cmp	r7, #8
 8005006:	f63f af7d 	bhi.w	8004f04 <_strtod_l+0x19c>
 800500a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800500e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005010:	930a      	str	r3, [sp, #40]	; 0x28
 8005012:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005014:	1c5f      	adds	r7, r3, #1
 8005016:	971b      	str	r7, [sp, #108]	; 0x6c
 8005018:	785b      	ldrb	r3, [r3, #1]
 800501a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800501e:	f1b8 0f09 	cmp.w	r8, #9
 8005022:	d937      	bls.n	8005094 <_strtod_l+0x32c>
 8005024:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005026:	1a7f      	subs	r7, r7, r1
 8005028:	2f08      	cmp	r7, #8
 800502a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800502e:	dc37      	bgt.n	80050a0 <_strtod_l+0x338>
 8005030:	45be      	cmp	lr, r7
 8005032:	bfa8      	it	ge
 8005034:	46be      	movge	lr, r7
 8005036:	f1bc 0f00 	cmp.w	ip, #0
 800503a:	d001      	beq.n	8005040 <_strtod_l+0x2d8>
 800503c:	f1ce 0e00 	rsb	lr, lr, #0
 8005040:	2c00      	cmp	r4, #0
 8005042:	d151      	bne.n	80050e8 <_strtod_l+0x380>
 8005044:	2800      	cmp	r0, #0
 8005046:	f47f aece 	bne.w	8004de6 <_strtod_l+0x7e>
 800504a:	9a06      	ldr	r2, [sp, #24]
 800504c:	2a00      	cmp	r2, #0
 800504e:	f47f aeca 	bne.w	8004de6 <_strtod_l+0x7e>
 8005052:	9a04      	ldr	r2, [sp, #16]
 8005054:	2a00      	cmp	r2, #0
 8005056:	f47f aee4 	bne.w	8004e22 <_strtod_l+0xba>
 800505a:	2b4e      	cmp	r3, #78	; 0x4e
 800505c:	d027      	beq.n	80050ae <_strtod_l+0x346>
 800505e:	dc21      	bgt.n	80050a4 <_strtod_l+0x33c>
 8005060:	2b49      	cmp	r3, #73	; 0x49
 8005062:	f47f aede 	bne.w	8004e22 <_strtod_l+0xba>
 8005066:	49a0      	ldr	r1, [pc, #640]	; (80052e8 <_strtod_l+0x580>)
 8005068:	a81b      	add	r0, sp, #108	; 0x6c
 800506a:	f001 fdd7 	bl	8006c1c <__match>
 800506e:	2800      	cmp	r0, #0
 8005070:	f43f aed7 	beq.w	8004e22 <_strtod_l+0xba>
 8005074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005076:	499d      	ldr	r1, [pc, #628]	; (80052ec <_strtod_l+0x584>)
 8005078:	3b01      	subs	r3, #1
 800507a:	a81b      	add	r0, sp, #108	; 0x6c
 800507c:	931b      	str	r3, [sp, #108]	; 0x6c
 800507e:	f001 fdcd 	bl	8006c1c <__match>
 8005082:	b910      	cbnz	r0, 800508a <_strtod_l+0x322>
 8005084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005086:	3301      	adds	r3, #1
 8005088:	931b      	str	r3, [sp, #108]	; 0x6c
 800508a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005300 <_strtod_l+0x598>
 800508e:	f04f 0a00 	mov.w	sl, #0
 8005092:	e6a8      	b.n	8004de6 <_strtod_l+0x7e>
 8005094:	210a      	movs	r1, #10
 8005096:	fb01 3e0e 	mla	lr, r1, lr, r3
 800509a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800509e:	e7b8      	b.n	8005012 <_strtod_l+0x2aa>
 80050a0:	46be      	mov	lr, r7
 80050a2:	e7c8      	b.n	8005036 <_strtod_l+0x2ce>
 80050a4:	2b69      	cmp	r3, #105	; 0x69
 80050a6:	d0de      	beq.n	8005066 <_strtod_l+0x2fe>
 80050a8:	2b6e      	cmp	r3, #110	; 0x6e
 80050aa:	f47f aeba 	bne.w	8004e22 <_strtod_l+0xba>
 80050ae:	4990      	ldr	r1, [pc, #576]	; (80052f0 <_strtod_l+0x588>)
 80050b0:	a81b      	add	r0, sp, #108	; 0x6c
 80050b2:	f001 fdb3 	bl	8006c1c <__match>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	f43f aeb3 	beq.w	8004e22 <_strtod_l+0xba>
 80050bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b28      	cmp	r3, #40	; 0x28
 80050c2:	d10e      	bne.n	80050e2 <_strtod_l+0x37a>
 80050c4:	aa1e      	add	r2, sp, #120	; 0x78
 80050c6:	498b      	ldr	r1, [pc, #556]	; (80052f4 <_strtod_l+0x58c>)
 80050c8:	a81b      	add	r0, sp, #108	; 0x6c
 80050ca:	f001 fdbb 	bl	8006c44 <__hexnan>
 80050ce:	2805      	cmp	r0, #5
 80050d0:	d107      	bne.n	80050e2 <_strtod_l+0x37a>
 80050d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80050d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80050d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80050dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80050e0:	e681      	b.n	8004de6 <_strtod_l+0x7e>
 80050e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005308 <_strtod_l+0x5a0>
 80050e6:	e7d2      	b.n	800508e <_strtod_l+0x326>
 80050e8:	ebae 0302 	sub.w	r3, lr, r2
 80050ec:	9306      	str	r3, [sp, #24]
 80050ee:	9b05      	ldr	r3, [sp, #20]
 80050f0:	9807      	ldr	r0, [sp, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bf08      	it	eq
 80050f6:	4623      	moveq	r3, r4
 80050f8:	2c10      	cmp	r4, #16
 80050fa:	9305      	str	r3, [sp, #20]
 80050fc:	46a0      	mov	r8, r4
 80050fe:	bfa8      	it	ge
 8005100:	f04f 0810 	movge.w	r8, #16
 8005104:	f7fb f9fe 	bl	8000504 <__aeabi_ui2d>
 8005108:	2c09      	cmp	r4, #9
 800510a:	4682      	mov	sl, r0
 800510c:	468b      	mov	fp, r1
 800510e:	dc13      	bgt.n	8005138 <_strtod_l+0x3d0>
 8005110:	9b06      	ldr	r3, [sp, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	f43f ae67 	beq.w	8004de6 <_strtod_l+0x7e>
 8005118:	9b06      	ldr	r3, [sp, #24]
 800511a:	dd7a      	ble.n	8005212 <_strtod_l+0x4aa>
 800511c:	2b16      	cmp	r3, #22
 800511e:	dc61      	bgt.n	80051e4 <_strtod_l+0x47c>
 8005120:	4a75      	ldr	r2, [pc, #468]	; (80052f8 <_strtod_l+0x590>)
 8005122:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005126:	e9de 0100 	ldrd	r0, r1, [lr]
 800512a:	4652      	mov	r2, sl
 800512c:	465b      	mov	r3, fp
 800512e:	f7fb fa63 	bl	80005f8 <__aeabi_dmul>
 8005132:	4682      	mov	sl, r0
 8005134:	468b      	mov	fp, r1
 8005136:	e656      	b.n	8004de6 <_strtod_l+0x7e>
 8005138:	4b6f      	ldr	r3, [pc, #444]	; (80052f8 <_strtod_l+0x590>)
 800513a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800513e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005142:	f7fb fa59 	bl	80005f8 <__aeabi_dmul>
 8005146:	4606      	mov	r6, r0
 8005148:	4628      	mov	r0, r5
 800514a:	460f      	mov	r7, r1
 800514c:	f7fb f9da 	bl	8000504 <__aeabi_ui2d>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4630      	mov	r0, r6
 8005156:	4639      	mov	r1, r7
 8005158:	f7fb f898 	bl	800028c <__adddf3>
 800515c:	2c0f      	cmp	r4, #15
 800515e:	4682      	mov	sl, r0
 8005160:	468b      	mov	fp, r1
 8005162:	ddd5      	ble.n	8005110 <_strtod_l+0x3a8>
 8005164:	9b06      	ldr	r3, [sp, #24]
 8005166:	eba4 0808 	sub.w	r8, r4, r8
 800516a:	4498      	add	r8, r3
 800516c:	f1b8 0f00 	cmp.w	r8, #0
 8005170:	f340 8096 	ble.w	80052a0 <_strtod_l+0x538>
 8005174:	f018 030f 	ands.w	r3, r8, #15
 8005178:	d00a      	beq.n	8005190 <_strtod_l+0x428>
 800517a:	495f      	ldr	r1, [pc, #380]	; (80052f8 <_strtod_l+0x590>)
 800517c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005180:	4652      	mov	r2, sl
 8005182:	465b      	mov	r3, fp
 8005184:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005188:	f7fb fa36 	bl	80005f8 <__aeabi_dmul>
 800518c:	4682      	mov	sl, r0
 800518e:	468b      	mov	fp, r1
 8005190:	f038 080f 	bics.w	r8, r8, #15
 8005194:	d073      	beq.n	800527e <_strtod_l+0x516>
 8005196:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800519a:	dd47      	ble.n	800522c <_strtod_l+0x4c4>
 800519c:	2400      	movs	r4, #0
 800519e:	46a0      	mov	r8, r4
 80051a0:	9407      	str	r4, [sp, #28]
 80051a2:	9405      	str	r4, [sp, #20]
 80051a4:	2322      	movs	r3, #34	; 0x22
 80051a6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005300 <_strtod_l+0x598>
 80051aa:	f8c9 3000 	str.w	r3, [r9]
 80051ae:	f04f 0a00 	mov.w	sl, #0
 80051b2:	9b07      	ldr	r3, [sp, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f43f ae16 	beq.w	8004de6 <_strtod_l+0x7e>
 80051ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80051bc:	4648      	mov	r0, r9
 80051be:	f001 fe38 	bl	8006e32 <_Bfree>
 80051c2:	9905      	ldr	r1, [sp, #20]
 80051c4:	4648      	mov	r0, r9
 80051c6:	f001 fe34 	bl	8006e32 <_Bfree>
 80051ca:	4641      	mov	r1, r8
 80051cc:	4648      	mov	r0, r9
 80051ce:	f001 fe30 	bl	8006e32 <_Bfree>
 80051d2:	9907      	ldr	r1, [sp, #28]
 80051d4:	4648      	mov	r0, r9
 80051d6:	f001 fe2c 	bl	8006e32 <_Bfree>
 80051da:	4621      	mov	r1, r4
 80051dc:	4648      	mov	r0, r9
 80051de:	f001 fe28 	bl	8006e32 <_Bfree>
 80051e2:	e600      	b.n	8004de6 <_strtod_l+0x7e>
 80051e4:	9a06      	ldr	r2, [sp, #24]
 80051e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80051ea:	4293      	cmp	r3, r2
 80051ec:	dbba      	blt.n	8005164 <_strtod_l+0x3fc>
 80051ee:	4d42      	ldr	r5, [pc, #264]	; (80052f8 <_strtod_l+0x590>)
 80051f0:	f1c4 040f 	rsb	r4, r4, #15
 80051f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80051f8:	4652      	mov	r2, sl
 80051fa:	465b      	mov	r3, fp
 80051fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005200:	f7fb f9fa 	bl	80005f8 <__aeabi_dmul>
 8005204:	9b06      	ldr	r3, [sp, #24]
 8005206:	1b1c      	subs	r4, r3, r4
 8005208:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800520c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005210:	e78d      	b.n	800512e <_strtod_l+0x3c6>
 8005212:	f113 0f16 	cmn.w	r3, #22
 8005216:	dba5      	blt.n	8005164 <_strtod_l+0x3fc>
 8005218:	4a37      	ldr	r2, [pc, #220]	; (80052f8 <_strtod_l+0x590>)
 800521a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800521e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005222:	4650      	mov	r0, sl
 8005224:	4659      	mov	r1, fp
 8005226:	f7fb fb11 	bl	800084c <__aeabi_ddiv>
 800522a:	e782      	b.n	8005132 <_strtod_l+0x3ca>
 800522c:	2300      	movs	r3, #0
 800522e:	4e33      	ldr	r6, [pc, #204]	; (80052fc <_strtod_l+0x594>)
 8005230:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005234:	4650      	mov	r0, sl
 8005236:	4659      	mov	r1, fp
 8005238:	461d      	mov	r5, r3
 800523a:	f1b8 0f01 	cmp.w	r8, #1
 800523e:	dc21      	bgt.n	8005284 <_strtod_l+0x51c>
 8005240:	b10b      	cbz	r3, 8005246 <_strtod_l+0x4de>
 8005242:	4682      	mov	sl, r0
 8005244:	468b      	mov	fp, r1
 8005246:	4b2d      	ldr	r3, [pc, #180]	; (80052fc <_strtod_l+0x594>)
 8005248:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800524c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005250:	4652      	mov	r2, sl
 8005252:	465b      	mov	r3, fp
 8005254:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005258:	f7fb f9ce 	bl	80005f8 <__aeabi_dmul>
 800525c:	4b28      	ldr	r3, [pc, #160]	; (8005300 <_strtod_l+0x598>)
 800525e:	460a      	mov	r2, r1
 8005260:	400b      	ands	r3, r1
 8005262:	4928      	ldr	r1, [pc, #160]	; (8005304 <_strtod_l+0x59c>)
 8005264:	428b      	cmp	r3, r1
 8005266:	4682      	mov	sl, r0
 8005268:	d898      	bhi.n	800519c <_strtod_l+0x434>
 800526a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800526e:	428b      	cmp	r3, r1
 8005270:	bf86      	itte	hi
 8005272:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800530c <_strtod_l+0x5a4>
 8005276:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800527a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800527e:	2300      	movs	r3, #0
 8005280:	9304      	str	r3, [sp, #16]
 8005282:	e077      	b.n	8005374 <_strtod_l+0x60c>
 8005284:	f018 0f01 	tst.w	r8, #1
 8005288:	d006      	beq.n	8005298 <_strtod_l+0x530>
 800528a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	f7fb f9b1 	bl	80005f8 <__aeabi_dmul>
 8005296:	2301      	movs	r3, #1
 8005298:	3501      	adds	r5, #1
 800529a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800529e:	e7cc      	b.n	800523a <_strtod_l+0x4d2>
 80052a0:	d0ed      	beq.n	800527e <_strtod_l+0x516>
 80052a2:	f1c8 0800 	rsb	r8, r8, #0
 80052a6:	f018 020f 	ands.w	r2, r8, #15
 80052aa:	d00a      	beq.n	80052c2 <_strtod_l+0x55a>
 80052ac:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <_strtod_l+0x590>)
 80052ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052b2:	4650      	mov	r0, sl
 80052b4:	4659      	mov	r1, fp
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	f7fb fac7 	bl	800084c <__aeabi_ddiv>
 80052be:	4682      	mov	sl, r0
 80052c0:	468b      	mov	fp, r1
 80052c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80052c6:	d0da      	beq.n	800527e <_strtod_l+0x516>
 80052c8:	f1b8 0f1f 	cmp.w	r8, #31
 80052cc:	dd20      	ble.n	8005310 <_strtod_l+0x5a8>
 80052ce:	2400      	movs	r4, #0
 80052d0:	46a0      	mov	r8, r4
 80052d2:	9407      	str	r4, [sp, #28]
 80052d4:	9405      	str	r4, [sp, #20]
 80052d6:	2322      	movs	r3, #34	; 0x22
 80052d8:	f04f 0a00 	mov.w	sl, #0
 80052dc:	f04f 0b00 	mov.w	fp, #0
 80052e0:	f8c9 3000 	str.w	r3, [r9]
 80052e4:	e765      	b.n	80051b2 <_strtod_l+0x44a>
 80052e6:	bf00      	nop
 80052e8:	080079bd 	.word	0x080079bd
 80052ec:	08007a4b 	.word	0x08007a4b
 80052f0:	080079c5 	.word	0x080079c5
 80052f4:	08007a08 	.word	0x08007a08
 80052f8:	08007a88 	.word	0x08007a88
 80052fc:	08007a60 	.word	0x08007a60
 8005300:	7ff00000 	.word	0x7ff00000
 8005304:	7ca00000 	.word	0x7ca00000
 8005308:	fff80000 	.word	0xfff80000
 800530c:	7fefffff 	.word	0x7fefffff
 8005310:	f018 0310 	ands.w	r3, r8, #16
 8005314:	bf18      	it	ne
 8005316:	236a      	movne	r3, #106	; 0x6a
 8005318:	4da0      	ldr	r5, [pc, #640]	; (800559c <_strtod_l+0x834>)
 800531a:	9304      	str	r3, [sp, #16]
 800531c:	4650      	mov	r0, sl
 800531e:	4659      	mov	r1, fp
 8005320:	2300      	movs	r3, #0
 8005322:	f1b8 0f00 	cmp.w	r8, #0
 8005326:	f300 810a 	bgt.w	800553e <_strtod_l+0x7d6>
 800532a:	b10b      	cbz	r3, 8005330 <_strtod_l+0x5c8>
 800532c:	4682      	mov	sl, r0
 800532e:	468b      	mov	fp, r1
 8005330:	9b04      	ldr	r3, [sp, #16]
 8005332:	b1bb      	cbz	r3, 8005364 <_strtod_l+0x5fc>
 8005334:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005338:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800533c:	2b00      	cmp	r3, #0
 800533e:	4659      	mov	r1, fp
 8005340:	dd10      	ble.n	8005364 <_strtod_l+0x5fc>
 8005342:	2b1f      	cmp	r3, #31
 8005344:	f340 8107 	ble.w	8005556 <_strtod_l+0x7ee>
 8005348:	2b34      	cmp	r3, #52	; 0x34
 800534a:	bfde      	ittt	le
 800534c:	3b20      	suble	r3, #32
 800534e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005352:	fa02 f303 	lslle.w	r3, r2, r3
 8005356:	f04f 0a00 	mov.w	sl, #0
 800535a:	bfcc      	ite	gt
 800535c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005360:	ea03 0b01 	andle.w	fp, r3, r1
 8005364:	2200      	movs	r2, #0
 8005366:	2300      	movs	r3, #0
 8005368:	4650      	mov	r0, sl
 800536a:	4659      	mov	r1, fp
 800536c:	f7fb fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005370:	2800      	cmp	r0, #0
 8005372:	d1ac      	bne.n	80052ce <_strtod_l+0x566>
 8005374:	9b07      	ldr	r3, [sp, #28]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	9a05      	ldr	r2, [sp, #20]
 800537a:	9908      	ldr	r1, [sp, #32]
 800537c:	4623      	mov	r3, r4
 800537e:	4648      	mov	r0, r9
 8005380:	f001 fda9 	bl	8006ed6 <__s2b>
 8005384:	9007      	str	r0, [sp, #28]
 8005386:	2800      	cmp	r0, #0
 8005388:	f43f af08 	beq.w	800519c <_strtod_l+0x434>
 800538c:	9a06      	ldr	r2, [sp, #24]
 800538e:	9b06      	ldr	r3, [sp, #24]
 8005390:	2a00      	cmp	r2, #0
 8005392:	f1c3 0300 	rsb	r3, r3, #0
 8005396:	bfa8      	it	ge
 8005398:	2300      	movge	r3, #0
 800539a:	930e      	str	r3, [sp, #56]	; 0x38
 800539c:	2400      	movs	r4, #0
 800539e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80053a2:	9316      	str	r3, [sp, #88]	; 0x58
 80053a4:	46a0      	mov	r8, r4
 80053a6:	9b07      	ldr	r3, [sp, #28]
 80053a8:	4648      	mov	r0, r9
 80053aa:	6859      	ldr	r1, [r3, #4]
 80053ac:	f001 fd0d 	bl	8006dca <_Balloc>
 80053b0:	9005      	str	r0, [sp, #20]
 80053b2:	2800      	cmp	r0, #0
 80053b4:	f43f aef6 	beq.w	80051a4 <_strtod_l+0x43c>
 80053b8:	9b07      	ldr	r3, [sp, #28]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	3202      	adds	r2, #2
 80053be:	f103 010c 	add.w	r1, r3, #12
 80053c2:	0092      	lsls	r2, r2, #2
 80053c4:	300c      	adds	r0, #12
 80053c6:	f001 fcf3 	bl	8006db0 <memcpy>
 80053ca:	aa1e      	add	r2, sp, #120	; 0x78
 80053cc:	a91d      	add	r1, sp, #116	; 0x74
 80053ce:	ec4b ab10 	vmov	d0, sl, fp
 80053d2:	4648      	mov	r0, r9
 80053d4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80053d8:	f002 f838 	bl	800744c <__d2b>
 80053dc:	901c      	str	r0, [sp, #112]	; 0x70
 80053de:	2800      	cmp	r0, #0
 80053e0:	f43f aee0 	beq.w	80051a4 <_strtod_l+0x43c>
 80053e4:	2101      	movs	r1, #1
 80053e6:	4648      	mov	r0, r9
 80053e8:	f001 fe01 	bl	8006fee <__i2b>
 80053ec:	4680      	mov	r8, r0
 80053ee:	2800      	cmp	r0, #0
 80053f0:	f43f aed8 	beq.w	80051a4 <_strtod_l+0x43c>
 80053f4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80053f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80053f8:	2e00      	cmp	r6, #0
 80053fa:	bfab      	itete	ge
 80053fc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80053fe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005400:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005402:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005404:	bfac      	ite	ge
 8005406:	18f7      	addge	r7, r6, r3
 8005408:	1b9d      	sublt	r5, r3, r6
 800540a:	9b04      	ldr	r3, [sp, #16]
 800540c:	1af6      	subs	r6, r6, r3
 800540e:	4416      	add	r6, r2
 8005410:	4b63      	ldr	r3, [pc, #396]	; (80055a0 <_strtod_l+0x838>)
 8005412:	3e01      	subs	r6, #1
 8005414:	429e      	cmp	r6, r3
 8005416:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800541a:	f280 80af 	bge.w	800557c <_strtod_l+0x814>
 800541e:	1b9b      	subs	r3, r3, r6
 8005420:	2b1f      	cmp	r3, #31
 8005422:	eba2 0203 	sub.w	r2, r2, r3
 8005426:	f04f 0101 	mov.w	r1, #1
 800542a:	f300 809b 	bgt.w	8005564 <_strtod_l+0x7fc>
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	930f      	str	r3, [sp, #60]	; 0x3c
 8005434:	2300      	movs	r3, #0
 8005436:	930a      	str	r3, [sp, #40]	; 0x28
 8005438:	18be      	adds	r6, r7, r2
 800543a:	9b04      	ldr	r3, [sp, #16]
 800543c:	42b7      	cmp	r7, r6
 800543e:	4415      	add	r5, r2
 8005440:	441d      	add	r5, r3
 8005442:	463b      	mov	r3, r7
 8005444:	bfa8      	it	ge
 8005446:	4633      	movge	r3, r6
 8005448:	42ab      	cmp	r3, r5
 800544a:	bfa8      	it	ge
 800544c:	462b      	movge	r3, r5
 800544e:	2b00      	cmp	r3, #0
 8005450:	bfc2      	ittt	gt
 8005452:	1af6      	subgt	r6, r6, r3
 8005454:	1aed      	subgt	r5, r5, r3
 8005456:	1aff      	subgt	r7, r7, r3
 8005458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800545a:	b1bb      	cbz	r3, 800548c <_strtod_l+0x724>
 800545c:	4641      	mov	r1, r8
 800545e:	461a      	mov	r2, r3
 8005460:	4648      	mov	r0, r9
 8005462:	f001 fe63 	bl	800712c <__pow5mult>
 8005466:	4680      	mov	r8, r0
 8005468:	2800      	cmp	r0, #0
 800546a:	f43f ae9b 	beq.w	80051a4 <_strtod_l+0x43c>
 800546e:	4601      	mov	r1, r0
 8005470:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005472:	4648      	mov	r0, r9
 8005474:	f001 fdc4 	bl	8007000 <__multiply>
 8005478:	900c      	str	r0, [sp, #48]	; 0x30
 800547a:	2800      	cmp	r0, #0
 800547c:	f43f ae92 	beq.w	80051a4 <_strtod_l+0x43c>
 8005480:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005482:	4648      	mov	r0, r9
 8005484:	f001 fcd5 	bl	8006e32 <_Bfree>
 8005488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800548a:	931c      	str	r3, [sp, #112]	; 0x70
 800548c:	2e00      	cmp	r6, #0
 800548e:	dc7a      	bgt.n	8005586 <_strtod_l+0x81e>
 8005490:	9b06      	ldr	r3, [sp, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	dd08      	ble.n	80054a8 <_strtod_l+0x740>
 8005496:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005498:	9905      	ldr	r1, [sp, #20]
 800549a:	4648      	mov	r0, r9
 800549c:	f001 fe46 	bl	800712c <__pow5mult>
 80054a0:	9005      	str	r0, [sp, #20]
 80054a2:	2800      	cmp	r0, #0
 80054a4:	f43f ae7e 	beq.w	80051a4 <_strtod_l+0x43c>
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	dd08      	ble.n	80054be <_strtod_l+0x756>
 80054ac:	462a      	mov	r2, r5
 80054ae:	9905      	ldr	r1, [sp, #20]
 80054b0:	4648      	mov	r0, r9
 80054b2:	f001 fe89 	bl	80071c8 <__lshift>
 80054b6:	9005      	str	r0, [sp, #20]
 80054b8:	2800      	cmp	r0, #0
 80054ba:	f43f ae73 	beq.w	80051a4 <_strtod_l+0x43c>
 80054be:	2f00      	cmp	r7, #0
 80054c0:	dd08      	ble.n	80054d4 <_strtod_l+0x76c>
 80054c2:	4641      	mov	r1, r8
 80054c4:	463a      	mov	r2, r7
 80054c6:	4648      	mov	r0, r9
 80054c8:	f001 fe7e 	bl	80071c8 <__lshift>
 80054cc:	4680      	mov	r8, r0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f43f ae68 	beq.w	80051a4 <_strtod_l+0x43c>
 80054d4:	9a05      	ldr	r2, [sp, #20]
 80054d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80054d8:	4648      	mov	r0, r9
 80054da:	f001 fee3 	bl	80072a4 <__mdiff>
 80054de:	4604      	mov	r4, r0
 80054e0:	2800      	cmp	r0, #0
 80054e2:	f43f ae5f 	beq.w	80051a4 <_strtod_l+0x43c>
 80054e6:	68c3      	ldr	r3, [r0, #12]
 80054e8:	930c      	str	r3, [sp, #48]	; 0x30
 80054ea:	2300      	movs	r3, #0
 80054ec:	60c3      	str	r3, [r0, #12]
 80054ee:	4641      	mov	r1, r8
 80054f0:	f001 febe 	bl	8007270 <__mcmp>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	da55      	bge.n	80055a4 <_strtod_l+0x83c>
 80054f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054fa:	b9e3      	cbnz	r3, 8005536 <_strtod_l+0x7ce>
 80054fc:	f1ba 0f00 	cmp.w	sl, #0
 8005500:	d119      	bne.n	8005536 <_strtod_l+0x7ce>
 8005502:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005506:	b9b3      	cbnz	r3, 8005536 <_strtod_l+0x7ce>
 8005508:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800550c:	0d1b      	lsrs	r3, r3, #20
 800550e:	051b      	lsls	r3, r3, #20
 8005510:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005514:	d90f      	bls.n	8005536 <_strtod_l+0x7ce>
 8005516:	6963      	ldr	r3, [r4, #20]
 8005518:	b913      	cbnz	r3, 8005520 <_strtod_l+0x7b8>
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	2b01      	cmp	r3, #1
 800551e:	dd0a      	ble.n	8005536 <_strtod_l+0x7ce>
 8005520:	4621      	mov	r1, r4
 8005522:	2201      	movs	r2, #1
 8005524:	4648      	mov	r0, r9
 8005526:	f001 fe4f 	bl	80071c8 <__lshift>
 800552a:	4641      	mov	r1, r8
 800552c:	4604      	mov	r4, r0
 800552e:	f001 fe9f 	bl	8007270 <__mcmp>
 8005532:	2800      	cmp	r0, #0
 8005534:	dc67      	bgt.n	8005606 <_strtod_l+0x89e>
 8005536:	9b04      	ldr	r3, [sp, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d171      	bne.n	8005620 <_strtod_l+0x8b8>
 800553c:	e63d      	b.n	80051ba <_strtod_l+0x452>
 800553e:	f018 0f01 	tst.w	r8, #1
 8005542:	d004      	beq.n	800554e <_strtod_l+0x7e6>
 8005544:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005548:	f7fb f856 	bl	80005f8 <__aeabi_dmul>
 800554c:	2301      	movs	r3, #1
 800554e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005552:	3508      	adds	r5, #8
 8005554:	e6e5      	b.n	8005322 <_strtod_l+0x5ba>
 8005556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	ea03 0a0a 	and.w	sl, r3, sl
 8005562:	e6ff      	b.n	8005364 <_strtod_l+0x5fc>
 8005564:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8005568:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800556c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8005570:	36e2      	adds	r6, #226	; 0xe2
 8005572:	fa01 f306 	lsl.w	r3, r1, r6
 8005576:	930a      	str	r3, [sp, #40]	; 0x28
 8005578:	910f      	str	r1, [sp, #60]	; 0x3c
 800557a:	e75d      	b.n	8005438 <_strtod_l+0x6d0>
 800557c:	2300      	movs	r3, #0
 800557e:	930a      	str	r3, [sp, #40]	; 0x28
 8005580:	2301      	movs	r3, #1
 8005582:	930f      	str	r3, [sp, #60]	; 0x3c
 8005584:	e758      	b.n	8005438 <_strtod_l+0x6d0>
 8005586:	4632      	mov	r2, r6
 8005588:	991c      	ldr	r1, [sp, #112]	; 0x70
 800558a:	4648      	mov	r0, r9
 800558c:	f001 fe1c 	bl	80071c8 <__lshift>
 8005590:	901c      	str	r0, [sp, #112]	; 0x70
 8005592:	2800      	cmp	r0, #0
 8005594:	f47f af7c 	bne.w	8005490 <_strtod_l+0x728>
 8005598:	e604      	b.n	80051a4 <_strtod_l+0x43c>
 800559a:	bf00      	nop
 800559c:	08007a20 	.word	0x08007a20
 80055a0:	fffffc02 	.word	0xfffffc02
 80055a4:	465d      	mov	r5, fp
 80055a6:	f040 8086 	bne.w	80056b6 <_strtod_l+0x94e>
 80055aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80055b0:	b32a      	cbz	r2, 80055fe <_strtod_l+0x896>
 80055b2:	4aaf      	ldr	r2, [pc, #700]	; (8005870 <_strtod_l+0xb08>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d153      	bne.n	8005660 <_strtod_l+0x8f8>
 80055b8:	9b04      	ldr	r3, [sp, #16]
 80055ba:	4650      	mov	r0, sl
 80055bc:	b1d3      	cbz	r3, 80055f4 <_strtod_l+0x88c>
 80055be:	4aad      	ldr	r2, [pc, #692]	; (8005874 <_strtod_l+0xb0c>)
 80055c0:	402a      	ands	r2, r5
 80055c2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80055c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055ca:	d816      	bhi.n	80055fa <_strtod_l+0x892>
 80055cc:	0d12      	lsrs	r2, r2, #20
 80055ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80055d2:	fa01 f303 	lsl.w	r3, r1, r3
 80055d6:	4298      	cmp	r0, r3
 80055d8:	d142      	bne.n	8005660 <_strtod_l+0x8f8>
 80055da:	4ba7      	ldr	r3, [pc, #668]	; (8005878 <_strtod_l+0xb10>)
 80055dc:	429d      	cmp	r5, r3
 80055de:	d102      	bne.n	80055e6 <_strtod_l+0x87e>
 80055e0:	3001      	adds	r0, #1
 80055e2:	f43f addf 	beq.w	80051a4 <_strtod_l+0x43c>
 80055e6:	4ba3      	ldr	r3, [pc, #652]	; (8005874 <_strtod_l+0xb0c>)
 80055e8:	402b      	ands	r3, r5
 80055ea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80055ee:	f04f 0a00 	mov.w	sl, #0
 80055f2:	e7a0      	b.n	8005536 <_strtod_l+0x7ce>
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f8:	e7ed      	b.n	80055d6 <_strtod_l+0x86e>
 80055fa:	460b      	mov	r3, r1
 80055fc:	e7eb      	b.n	80055d6 <_strtod_l+0x86e>
 80055fe:	bb7b      	cbnz	r3, 8005660 <_strtod_l+0x8f8>
 8005600:	f1ba 0f00 	cmp.w	sl, #0
 8005604:	d12c      	bne.n	8005660 <_strtod_l+0x8f8>
 8005606:	9904      	ldr	r1, [sp, #16]
 8005608:	4a9a      	ldr	r2, [pc, #616]	; (8005874 <_strtod_l+0xb0c>)
 800560a:	465b      	mov	r3, fp
 800560c:	b1f1      	cbz	r1, 800564c <_strtod_l+0x8e4>
 800560e:	ea02 010b 	and.w	r1, r2, fp
 8005612:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005616:	dc19      	bgt.n	800564c <_strtod_l+0x8e4>
 8005618:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800561c:	f77f ae5b 	ble.w	80052d6 <_strtod_l+0x56e>
 8005620:	4a96      	ldr	r2, [pc, #600]	; (800587c <_strtod_l+0xb14>)
 8005622:	2300      	movs	r3, #0
 8005624:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005628:	4650      	mov	r0, sl
 800562a:	4659      	mov	r1, fp
 800562c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005630:	f7fa ffe2 	bl	80005f8 <__aeabi_dmul>
 8005634:	4682      	mov	sl, r0
 8005636:	468b      	mov	fp, r1
 8005638:	2900      	cmp	r1, #0
 800563a:	f47f adbe 	bne.w	80051ba <_strtod_l+0x452>
 800563e:	2800      	cmp	r0, #0
 8005640:	f47f adbb 	bne.w	80051ba <_strtod_l+0x452>
 8005644:	2322      	movs	r3, #34	; 0x22
 8005646:	f8c9 3000 	str.w	r3, [r9]
 800564a:	e5b6      	b.n	80051ba <_strtod_l+0x452>
 800564c:	4013      	ands	r3, r2
 800564e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005652:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005656:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800565a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800565e:	e76a      	b.n	8005536 <_strtod_l+0x7ce>
 8005660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005662:	b193      	cbz	r3, 800568a <_strtod_l+0x922>
 8005664:	422b      	tst	r3, r5
 8005666:	f43f af66 	beq.w	8005536 <_strtod_l+0x7ce>
 800566a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800566c:	9a04      	ldr	r2, [sp, #16]
 800566e:	4650      	mov	r0, sl
 8005670:	4659      	mov	r1, fp
 8005672:	b173      	cbz	r3, 8005692 <_strtod_l+0x92a>
 8005674:	f7ff fb5a 	bl	8004d2c <sulp>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005680:	f7fa fe04 	bl	800028c <__adddf3>
 8005684:	4682      	mov	sl, r0
 8005686:	468b      	mov	fp, r1
 8005688:	e755      	b.n	8005536 <_strtod_l+0x7ce>
 800568a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800568c:	ea13 0f0a 	tst.w	r3, sl
 8005690:	e7e9      	b.n	8005666 <_strtod_l+0x8fe>
 8005692:	f7ff fb4b 	bl	8004d2c <sulp>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800569e:	f7fa fdf3 	bl	8000288 <__aeabi_dsub>
 80056a2:	2200      	movs	r2, #0
 80056a4:	2300      	movs	r3, #0
 80056a6:	4682      	mov	sl, r0
 80056a8:	468b      	mov	fp, r1
 80056aa:	f7fb fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f47f ae11 	bne.w	80052d6 <_strtod_l+0x56e>
 80056b4:	e73f      	b.n	8005536 <_strtod_l+0x7ce>
 80056b6:	4641      	mov	r1, r8
 80056b8:	4620      	mov	r0, r4
 80056ba:	f001 ff16 	bl	80074ea <__ratio>
 80056be:	ec57 6b10 	vmov	r6, r7, d0
 80056c2:	2200      	movs	r2, #0
 80056c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056c8:	ee10 0a10 	vmov	r0, s0
 80056cc:	4639      	mov	r1, r7
 80056ce:	f7fb fa0f 	bl	8000af0 <__aeabi_dcmple>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d077      	beq.n	80057c6 <_strtod_l+0xa5e>
 80056d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d04a      	beq.n	8005772 <_strtod_l+0xa0a>
 80056dc:	4b68      	ldr	r3, [pc, #416]	; (8005880 <_strtod_l+0xb18>)
 80056de:	2200      	movs	r2, #0
 80056e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80056e4:	4f66      	ldr	r7, [pc, #408]	; (8005880 <_strtod_l+0xb18>)
 80056e6:	2600      	movs	r6, #0
 80056e8:	4b62      	ldr	r3, [pc, #392]	; (8005874 <_strtod_l+0xb0c>)
 80056ea:	402b      	ands	r3, r5
 80056ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80056ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056f0:	4b64      	ldr	r3, [pc, #400]	; (8005884 <_strtod_l+0xb1c>)
 80056f2:	429a      	cmp	r2, r3
 80056f4:	f040 80ce 	bne.w	8005894 <_strtod_l+0xb2c>
 80056f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005700:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005704:	ec4b ab10 	vmov	d0, sl, fp
 8005708:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800570c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005710:	f001 fe26 	bl	8007360 <__ulp>
 8005714:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005718:	ec53 2b10 	vmov	r2, r3, d0
 800571c:	f7fa ff6c 	bl	80005f8 <__aeabi_dmul>
 8005720:	4652      	mov	r2, sl
 8005722:	465b      	mov	r3, fp
 8005724:	f7fa fdb2 	bl	800028c <__adddf3>
 8005728:	460b      	mov	r3, r1
 800572a:	4952      	ldr	r1, [pc, #328]	; (8005874 <_strtod_l+0xb0c>)
 800572c:	4a56      	ldr	r2, [pc, #344]	; (8005888 <_strtod_l+0xb20>)
 800572e:	4019      	ands	r1, r3
 8005730:	4291      	cmp	r1, r2
 8005732:	4682      	mov	sl, r0
 8005734:	d95b      	bls.n	80057ee <_strtod_l+0xa86>
 8005736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005738:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800573c:	4293      	cmp	r3, r2
 800573e:	d103      	bne.n	8005748 <_strtod_l+0x9e0>
 8005740:	9b08      	ldr	r3, [sp, #32]
 8005742:	3301      	adds	r3, #1
 8005744:	f43f ad2e 	beq.w	80051a4 <_strtod_l+0x43c>
 8005748:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005878 <_strtod_l+0xb10>
 800574c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005750:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005752:	4648      	mov	r0, r9
 8005754:	f001 fb6d 	bl	8006e32 <_Bfree>
 8005758:	9905      	ldr	r1, [sp, #20]
 800575a:	4648      	mov	r0, r9
 800575c:	f001 fb69 	bl	8006e32 <_Bfree>
 8005760:	4641      	mov	r1, r8
 8005762:	4648      	mov	r0, r9
 8005764:	f001 fb65 	bl	8006e32 <_Bfree>
 8005768:	4621      	mov	r1, r4
 800576a:	4648      	mov	r0, r9
 800576c:	f001 fb61 	bl	8006e32 <_Bfree>
 8005770:	e619      	b.n	80053a6 <_strtod_l+0x63e>
 8005772:	f1ba 0f00 	cmp.w	sl, #0
 8005776:	d11a      	bne.n	80057ae <_strtod_l+0xa46>
 8005778:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800577c:	b9eb      	cbnz	r3, 80057ba <_strtod_l+0xa52>
 800577e:	2200      	movs	r2, #0
 8005780:	4b3f      	ldr	r3, [pc, #252]	; (8005880 <_strtod_l+0xb18>)
 8005782:	4630      	mov	r0, r6
 8005784:	4639      	mov	r1, r7
 8005786:	f7fb f9a9 	bl	8000adc <__aeabi_dcmplt>
 800578a:	b9c8      	cbnz	r0, 80057c0 <_strtod_l+0xa58>
 800578c:	4630      	mov	r0, r6
 800578e:	4639      	mov	r1, r7
 8005790:	2200      	movs	r2, #0
 8005792:	4b3e      	ldr	r3, [pc, #248]	; (800588c <_strtod_l+0xb24>)
 8005794:	f7fa ff30 	bl	80005f8 <__aeabi_dmul>
 8005798:	4606      	mov	r6, r0
 800579a:	460f      	mov	r7, r1
 800579c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80057a0:	9618      	str	r6, [sp, #96]	; 0x60
 80057a2:	9319      	str	r3, [sp, #100]	; 0x64
 80057a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80057a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057ac:	e79c      	b.n	80056e8 <_strtod_l+0x980>
 80057ae:	f1ba 0f01 	cmp.w	sl, #1
 80057b2:	d102      	bne.n	80057ba <_strtod_l+0xa52>
 80057b4:	2d00      	cmp	r5, #0
 80057b6:	f43f ad8e 	beq.w	80052d6 <_strtod_l+0x56e>
 80057ba:	2200      	movs	r2, #0
 80057bc:	4b34      	ldr	r3, [pc, #208]	; (8005890 <_strtod_l+0xb28>)
 80057be:	e78f      	b.n	80056e0 <_strtod_l+0x978>
 80057c0:	2600      	movs	r6, #0
 80057c2:	4f32      	ldr	r7, [pc, #200]	; (800588c <_strtod_l+0xb24>)
 80057c4:	e7ea      	b.n	800579c <_strtod_l+0xa34>
 80057c6:	4b31      	ldr	r3, [pc, #196]	; (800588c <_strtod_l+0xb24>)
 80057c8:	4630      	mov	r0, r6
 80057ca:	4639      	mov	r1, r7
 80057cc:	2200      	movs	r2, #0
 80057ce:	f7fa ff13 	bl	80005f8 <__aeabi_dmul>
 80057d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	b933      	cbnz	r3, 80057e8 <_strtod_l+0xa80>
 80057da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057de:	9010      	str	r0, [sp, #64]	; 0x40
 80057e0:	9311      	str	r3, [sp, #68]	; 0x44
 80057e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057e6:	e7df      	b.n	80057a8 <_strtod_l+0xa40>
 80057e8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80057ec:	e7f9      	b.n	80057e2 <_strtod_l+0xa7a>
 80057ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80057f2:	9b04      	ldr	r3, [sp, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1ab      	bne.n	8005750 <_strtod_l+0x9e8>
 80057f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80057fc:	0d1b      	lsrs	r3, r3, #20
 80057fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005800:	051b      	lsls	r3, r3, #20
 8005802:	429a      	cmp	r2, r3
 8005804:	465d      	mov	r5, fp
 8005806:	d1a3      	bne.n	8005750 <_strtod_l+0x9e8>
 8005808:	4639      	mov	r1, r7
 800580a:	4630      	mov	r0, r6
 800580c:	f7fb f9a4 	bl	8000b58 <__aeabi_d2iz>
 8005810:	f7fa fe88 	bl	8000524 <__aeabi_i2d>
 8005814:	460b      	mov	r3, r1
 8005816:	4602      	mov	r2, r0
 8005818:	4639      	mov	r1, r7
 800581a:	4630      	mov	r0, r6
 800581c:	f7fa fd34 	bl	8000288 <__aeabi_dsub>
 8005820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005822:	4606      	mov	r6, r0
 8005824:	460f      	mov	r7, r1
 8005826:	b933      	cbnz	r3, 8005836 <_strtod_l+0xace>
 8005828:	f1ba 0f00 	cmp.w	sl, #0
 800582c:	d103      	bne.n	8005836 <_strtod_l+0xace>
 800582e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005832:	2d00      	cmp	r5, #0
 8005834:	d06d      	beq.n	8005912 <_strtod_l+0xbaa>
 8005836:	a30a      	add	r3, pc, #40	; (adr r3, 8005860 <_strtod_l+0xaf8>)
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	4630      	mov	r0, r6
 800583e:	4639      	mov	r1, r7
 8005840:	f7fb f94c 	bl	8000adc <__aeabi_dcmplt>
 8005844:	2800      	cmp	r0, #0
 8005846:	f47f acb8 	bne.w	80051ba <_strtod_l+0x452>
 800584a:	a307      	add	r3, pc, #28	; (adr r3, 8005868 <_strtod_l+0xb00>)
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	4630      	mov	r0, r6
 8005852:	4639      	mov	r1, r7
 8005854:	f7fb f960 	bl	8000b18 <__aeabi_dcmpgt>
 8005858:	2800      	cmp	r0, #0
 800585a:	f43f af79 	beq.w	8005750 <_strtod_l+0x9e8>
 800585e:	e4ac      	b.n	80051ba <_strtod_l+0x452>
 8005860:	94a03595 	.word	0x94a03595
 8005864:	3fdfffff 	.word	0x3fdfffff
 8005868:	35afe535 	.word	0x35afe535
 800586c:	3fe00000 	.word	0x3fe00000
 8005870:	000fffff 	.word	0x000fffff
 8005874:	7ff00000 	.word	0x7ff00000
 8005878:	7fefffff 	.word	0x7fefffff
 800587c:	39500000 	.word	0x39500000
 8005880:	3ff00000 	.word	0x3ff00000
 8005884:	7fe00000 	.word	0x7fe00000
 8005888:	7c9fffff 	.word	0x7c9fffff
 800588c:	3fe00000 	.word	0x3fe00000
 8005890:	bff00000 	.word	0xbff00000
 8005894:	9b04      	ldr	r3, [sp, #16]
 8005896:	b333      	cbz	r3, 80058e6 <_strtod_l+0xb7e>
 8005898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800589a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800589e:	d822      	bhi.n	80058e6 <_strtod_l+0xb7e>
 80058a0:	a327      	add	r3, pc, #156	; (adr r3, 8005940 <_strtod_l+0xbd8>)
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	4630      	mov	r0, r6
 80058a8:	4639      	mov	r1, r7
 80058aa:	f7fb f921 	bl	8000af0 <__aeabi_dcmple>
 80058ae:	b1a0      	cbz	r0, 80058da <_strtod_l+0xb72>
 80058b0:	4639      	mov	r1, r7
 80058b2:	4630      	mov	r0, r6
 80058b4:	f7fb f978 	bl	8000ba8 <__aeabi_d2uiz>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	bf08      	it	eq
 80058bc:	2001      	moveq	r0, #1
 80058be:	f7fa fe21 	bl	8000504 <__aeabi_ui2d>
 80058c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058c4:	4606      	mov	r6, r0
 80058c6:	460f      	mov	r7, r1
 80058c8:	bb03      	cbnz	r3, 800590c <_strtod_l+0xba4>
 80058ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058ce:	9012      	str	r0, [sp, #72]	; 0x48
 80058d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80058d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80058d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80058da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80058e2:	1a9b      	subs	r3, r3, r2
 80058e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80058e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80058ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80058ee:	f001 fd37 	bl	8007360 <__ulp>
 80058f2:	4650      	mov	r0, sl
 80058f4:	ec53 2b10 	vmov	r2, r3, d0
 80058f8:	4659      	mov	r1, fp
 80058fa:	f7fa fe7d 	bl	80005f8 <__aeabi_dmul>
 80058fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005902:	f7fa fcc3 	bl	800028c <__adddf3>
 8005906:	4682      	mov	sl, r0
 8005908:	468b      	mov	fp, r1
 800590a:	e772      	b.n	80057f2 <_strtod_l+0xa8a>
 800590c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005910:	e7df      	b.n	80058d2 <_strtod_l+0xb6a>
 8005912:	a30d      	add	r3, pc, #52	; (adr r3, 8005948 <_strtod_l+0xbe0>)
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	f7fb f8e0 	bl	8000adc <__aeabi_dcmplt>
 800591c:	e79c      	b.n	8005858 <_strtod_l+0xaf0>
 800591e:	2300      	movs	r3, #0
 8005920:	930d      	str	r3, [sp, #52]	; 0x34
 8005922:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	f7ff ba61 	b.w	8004dee <_strtod_l+0x86>
 800592c:	2b65      	cmp	r3, #101	; 0x65
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f43f ab4e 	beq.w	8004fd2 <_strtod_l+0x26a>
 8005936:	2101      	movs	r1, #1
 8005938:	4614      	mov	r4, r2
 800593a:	9104      	str	r1, [sp, #16]
 800593c:	f7ff bacb 	b.w	8004ed6 <_strtod_l+0x16e>
 8005940:	ffc00000 	.word	0xffc00000
 8005944:	41dfffff 	.word	0x41dfffff
 8005948:	94a03595 	.word	0x94a03595
 800594c:	3fcfffff 	.word	0x3fcfffff

08005950 <_strtod_r>:
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <_strtod_r+0x18>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	b410      	push	{r4}
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	4c04      	ldr	r4, [pc, #16]	; (800596c <_strtod_r+0x1c>)
 800595a:	2b00      	cmp	r3, #0
 800595c:	bf08      	it	eq
 800595e:	4623      	moveq	r3, r4
 8005960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005964:	f7ff ba00 	b.w	8004d68 <_strtod_l>
 8005968:	20000380 	.word	0x20000380
 800596c:	200003e4 	.word	0x200003e4

08005970 <_strtol_l.isra.0>:
 8005970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	4680      	mov	r8, r0
 8005976:	4689      	mov	r9, r1
 8005978:	4692      	mov	sl, r2
 800597a:	461e      	mov	r6, r3
 800597c:	460f      	mov	r7, r1
 800597e:	463d      	mov	r5, r7
 8005980:	9808      	ldr	r0, [sp, #32]
 8005982:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005986:	f001 f9ed 	bl	8006d64 <__locale_ctype_ptr_l>
 800598a:	4420      	add	r0, r4
 800598c:	7843      	ldrb	r3, [r0, #1]
 800598e:	f013 0308 	ands.w	r3, r3, #8
 8005992:	d132      	bne.n	80059fa <_strtol_l.isra.0+0x8a>
 8005994:	2c2d      	cmp	r4, #45	; 0x2d
 8005996:	d132      	bne.n	80059fe <_strtol_l.isra.0+0x8e>
 8005998:	787c      	ldrb	r4, [r7, #1]
 800599a:	1cbd      	adds	r5, r7, #2
 800599c:	2201      	movs	r2, #1
 800599e:	2e00      	cmp	r6, #0
 80059a0:	d05d      	beq.n	8005a5e <_strtol_l.isra.0+0xee>
 80059a2:	2e10      	cmp	r6, #16
 80059a4:	d109      	bne.n	80059ba <_strtol_l.isra.0+0x4a>
 80059a6:	2c30      	cmp	r4, #48	; 0x30
 80059a8:	d107      	bne.n	80059ba <_strtol_l.isra.0+0x4a>
 80059aa:	782b      	ldrb	r3, [r5, #0]
 80059ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80059b0:	2b58      	cmp	r3, #88	; 0x58
 80059b2:	d14f      	bne.n	8005a54 <_strtol_l.isra.0+0xe4>
 80059b4:	786c      	ldrb	r4, [r5, #1]
 80059b6:	2610      	movs	r6, #16
 80059b8:	3502      	adds	r5, #2
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	bf14      	ite	ne
 80059be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80059c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80059c6:	2700      	movs	r7, #0
 80059c8:	fbb1 fcf6 	udiv	ip, r1, r6
 80059cc:	4638      	mov	r0, r7
 80059ce:	fb06 1e1c 	mls	lr, r6, ip, r1
 80059d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80059d6:	2b09      	cmp	r3, #9
 80059d8:	d817      	bhi.n	8005a0a <_strtol_l.isra.0+0x9a>
 80059da:	461c      	mov	r4, r3
 80059dc:	42a6      	cmp	r6, r4
 80059de:	dd23      	ble.n	8005a28 <_strtol_l.isra.0+0xb8>
 80059e0:	1c7b      	adds	r3, r7, #1
 80059e2:	d007      	beq.n	80059f4 <_strtol_l.isra.0+0x84>
 80059e4:	4584      	cmp	ip, r0
 80059e6:	d31c      	bcc.n	8005a22 <_strtol_l.isra.0+0xb2>
 80059e8:	d101      	bne.n	80059ee <_strtol_l.isra.0+0x7e>
 80059ea:	45a6      	cmp	lr, r4
 80059ec:	db19      	blt.n	8005a22 <_strtol_l.isra.0+0xb2>
 80059ee:	fb00 4006 	mla	r0, r0, r6, r4
 80059f2:	2701      	movs	r7, #1
 80059f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059f8:	e7eb      	b.n	80059d2 <_strtol_l.isra.0+0x62>
 80059fa:	462f      	mov	r7, r5
 80059fc:	e7bf      	b.n	800597e <_strtol_l.isra.0+0xe>
 80059fe:	2c2b      	cmp	r4, #43	; 0x2b
 8005a00:	bf04      	itt	eq
 8005a02:	1cbd      	addeq	r5, r7, #2
 8005a04:	787c      	ldrbeq	r4, [r7, #1]
 8005a06:	461a      	mov	r2, r3
 8005a08:	e7c9      	b.n	800599e <_strtol_l.isra.0+0x2e>
 8005a0a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005a0e:	2b19      	cmp	r3, #25
 8005a10:	d801      	bhi.n	8005a16 <_strtol_l.isra.0+0xa6>
 8005a12:	3c37      	subs	r4, #55	; 0x37
 8005a14:	e7e2      	b.n	80059dc <_strtol_l.isra.0+0x6c>
 8005a16:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005a1a:	2b19      	cmp	r3, #25
 8005a1c:	d804      	bhi.n	8005a28 <_strtol_l.isra.0+0xb8>
 8005a1e:	3c57      	subs	r4, #87	; 0x57
 8005a20:	e7dc      	b.n	80059dc <_strtol_l.isra.0+0x6c>
 8005a22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005a26:	e7e5      	b.n	80059f4 <_strtol_l.isra.0+0x84>
 8005a28:	1c7b      	adds	r3, r7, #1
 8005a2a:	d108      	bne.n	8005a3e <_strtol_l.isra.0+0xce>
 8005a2c:	2322      	movs	r3, #34	; 0x22
 8005a2e:	f8c8 3000 	str.w	r3, [r8]
 8005a32:	4608      	mov	r0, r1
 8005a34:	f1ba 0f00 	cmp.w	sl, #0
 8005a38:	d107      	bne.n	8005a4a <_strtol_l.isra.0+0xda>
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	b102      	cbz	r2, 8005a42 <_strtol_l.isra.0+0xd2>
 8005a40:	4240      	negs	r0, r0
 8005a42:	f1ba 0f00 	cmp.w	sl, #0
 8005a46:	d0f8      	beq.n	8005a3a <_strtol_l.isra.0+0xca>
 8005a48:	b10f      	cbz	r7, 8005a4e <_strtol_l.isra.0+0xde>
 8005a4a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005a4e:	f8ca 9000 	str.w	r9, [sl]
 8005a52:	e7f2      	b.n	8005a3a <_strtol_l.isra.0+0xca>
 8005a54:	2430      	movs	r4, #48	; 0x30
 8005a56:	2e00      	cmp	r6, #0
 8005a58:	d1af      	bne.n	80059ba <_strtol_l.isra.0+0x4a>
 8005a5a:	2608      	movs	r6, #8
 8005a5c:	e7ad      	b.n	80059ba <_strtol_l.isra.0+0x4a>
 8005a5e:	2c30      	cmp	r4, #48	; 0x30
 8005a60:	d0a3      	beq.n	80059aa <_strtol_l.isra.0+0x3a>
 8005a62:	260a      	movs	r6, #10
 8005a64:	e7a9      	b.n	80059ba <_strtol_l.isra.0+0x4a>
	...

08005a68 <_strtol_r>:
 8005a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a6a:	4c06      	ldr	r4, [pc, #24]	; (8005a84 <_strtol_r+0x1c>)
 8005a6c:	4d06      	ldr	r5, [pc, #24]	; (8005a88 <_strtol_r+0x20>)
 8005a6e:	6824      	ldr	r4, [r4, #0]
 8005a70:	6a24      	ldr	r4, [r4, #32]
 8005a72:	2c00      	cmp	r4, #0
 8005a74:	bf08      	it	eq
 8005a76:	462c      	moveq	r4, r5
 8005a78:	9400      	str	r4, [sp, #0]
 8005a7a:	f7ff ff79 	bl	8005970 <_strtol_l.isra.0>
 8005a7e:	b003      	add	sp, #12
 8005a80:	bd30      	pop	{r4, r5, pc}
 8005a82:	bf00      	nop
 8005a84:	20000380 	.word	0x20000380
 8005a88:	200003e4 	.word	0x200003e4

08005a8c <quorem>:
 8005a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	6903      	ldr	r3, [r0, #16]
 8005a92:	690c      	ldr	r4, [r1, #16]
 8005a94:	42a3      	cmp	r3, r4
 8005a96:	4680      	mov	r8, r0
 8005a98:	f2c0 8082 	blt.w	8005ba0 <quorem+0x114>
 8005a9c:	3c01      	subs	r4, #1
 8005a9e:	f101 0714 	add.w	r7, r1, #20
 8005aa2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005aa6:	f100 0614 	add.w	r6, r0, #20
 8005aaa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005aae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005ab2:	eb06 030c 	add.w	r3, r6, ip
 8005ab6:	3501      	adds	r5, #1
 8005ab8:	eb07 090c 	add.w	r9, r7, ip
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	fbb0 f5f5 	udiv	r5, r0, r5
 8005ac2:	b395      	cbz	r5, 8005b2a <quorem+0x9e>
 8005ac4:	f04f 0a00 	mov.w	sl, #0
 8005ac8:	4638      	mov	r0, r7
 8005aca:	46b6      	mov	lr, r6
 8005acc:	46d3      	mov	fp, sl
 8005ace:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ad2:	b293      	uxth	r3, r2
 8005ad4:	fb05 a303 	mla	r3, r5, r3, sl
 8005ad8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	ebab 0303 	sub.w	r3, fp, r3
 8005ae2:	0c12      	lsrs	r2, r2, #16
 8005ae4:	f8de b000 	ldr.w	fp, [lr]
 8005ae8:	fb05 a202 	mla	r2, r5, r2, sl
 8005aec:	fa13 f38b 	uxtah	r3, r3, fp
 8005af0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005af4:	fa1f fb82 	uxth.w	fp, r2
 8005af8:	f8de 2000 	ldr.w	r2, [lr]
 8005afc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b0a:	4581      	cmp	r9, r0
 8005b0c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005b10:	f84e 3b04 	str.w	r3, [lr], #4
 8005b14:	d2db      	bcs.n	8005ace <quorem+0x42>
 8005b16:	f856 300c 	ldr.w	r3, [r6, ip]
 8005b1a:	b933      	cbnz	r3, 8005b2a <quorem+0x9e>
 8005b1c:	9b01      	ldr	r3, [sp, #4]
 8005b1e:	3b04      	subs	r3, #4
 8005b20:	429e      	cmp	r6, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	d330      	bcc.n	8005b88 <quorem+0xfc>
 8005b26:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	f001 fba0 	bl	8007270 <__mcmp>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	db25      	blt.n	8005b80 <quorem+0xf4>
 8005b34:	3501      	adds	r5, #1
 8005b36:	4630      	mov	r0, r6
 8005b38:	f04f 0c00 	mov.w	ip, #0
 8005b3c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005b40:	f8d0 e000 	ldr.w	lr, [r0]
 8005b44:	b293      	uxth	r3, r2
 8005b46:	ebac 0303 	sub.w	r3, ip, r3
 8005b4a:	0c12      	lsrs	r2, r2, #16
 8005b4c:	fa13 f38e 	uxtah	r3, r3, lr
 8005b50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b5e:	45b9      	cmp	r9, r7
 8005b60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b64:	f840 3b04 	str.w	r3, [r0], #4
 8005b68:	d2e8      	bcs.n	8005b3c <quorem+0xb0>
 8005b6a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005b6e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005b72:	b92a      	cbnz	r2, 8005b80 <quorem+0xf4>
 8005b74:	3b04      	subs	r3, #4
 8005b76:	429e      	cmp	r6, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	d30b      	bcc.n	8005b94 <quorem+0x108>
 8005b7c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b80:	4628      	mov	r0, r5
 8005b82:	b003      	add	sp, #12
 8005b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	3b04      	subs	r3, #4
 8005b8c:	2a00      	cmp	r2, #0
 8005b8e:	d1ca      	bne.n	8005b26 <quorem+0x9a>
 8005b90:	3c01      	subs	r4, #1
 8005b92:	e7c5      	b.n	8005b20 <quorem+0x94>
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	3b04      	subs	r3, #4
 8005b98:	2a00      	cmp	r2, #0
 8005b9a:	d1ef      	bne.n	8005b7c <quorem+0xf0>
 8005b9c:	3c01      	subs	r4, #1
 8005b9e:	e7ea      	b.n	8005b76 <quorem+0xea>
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	e7ee      	b.n	8005b82 <quorem+0xf6>
 8005ba4:	0000      	movs	r0, r0
	...

08005ba8 <_dtoa_r>:
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	ec57 6b10 	vmov	r6, r7, d0
 8005bb0:	b097      	sub	sp, #92	; 0x5c
 8005bb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005bb4:	9106      	str	r1, [sp, #24]
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bba:	9312      	str	r3, [sp, #72]	; 0x48
 8005bbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005bc0:	e9cd 6700 	strd	r6, r7, [sp]
 8005bc4:	b93d      	cbnz	r5, 8005bd6 <_dtoa_r+0x2e>
 8005bc6:	2010      	movs	r0, #16
 8005bc8:	f7fe f97c 	bl	8003ec4 <malloc>
 8005bcc:	6260      	str	r0, [r4, #36]	; 0x24
 8005bce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005bd2:	6005      	str	r5, [r0, #0]
 8005bd4:	60c5      	str	r5, [r0, #12]
 8005bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bd8:	6819      	ldr	r1, [r3, #0]
 8005bda:	b151      	cbz	r1, 8005bf2 <_dtoa_r+0x4a>
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	604a      	str	r2, [r1, #4]
 8005be0:	2301      	movs	r3, #1
 8005be2:	4093      	lsls	r3, r2
 8005be4:	608b      	str	r3, [r1, #8]
 8005be6:	4620      	mov	r0, r4
 8005be8:	f001 f923 	bl	8006e32 <_Bfree>
 8005bec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	1e3b      	subs	r3, r7, #0
 8005bf4:	bfbb      	ittet	lt
 8005bf6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005bfa:	9301      	strlt	r3, [sp, #4]
 8005bfc:	2300      	movge	r3, #0
 8005bfe:	2201      	movlt	r2, #1
 8005c00:	bfac      	ite	ge
 8005c02:	f8c8 3000 	strge.w	r3, [r8]
 8005c06:	f8c8 2000 	strlt.w	r2, [r8]
 8005c0a:	4baf      	ldr	r3, [pc, #700]	; (8005ec8 <_dtoa_r+0x320>)
 8005c0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c10:	ea33 0308 	bics.w	r3, r3, r8
 8005c14:	d114      	bne.n	8005c40 <_dtoa_r+0x98>
 8005c16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c18:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	9b00      	ldr	r3, [sp, #0]
 8005c20:	b923      	cbnz	r3, 8005c2c <_dtoa_r+0x84>
 8005c22:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005c26:	2800      	cmp	r0, #0
 8005c28:	f000 8542 	beq.w	80066b0 <_dtoa_r+0xb08>
 8005c2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c2e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005edc <_dtoa_r+0x334>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 8544 	beq.w	80066c0 <_dtoa_r+0xb18>
 8005c38:	f10b 0303 	add.w	r3, fp, #3
 8005c3c:	f000 bd3e 	b.w	80066bc <_dtoa_r+0xb14>
 8005c40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005c44:	2200      	movs	r2, #0
 8005c46:	2300      	movs	r3, #0
 8005c48:	4630      	mov	r0, r6
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	f7fa ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c50:	4681      	mov	r9, r0
 8005c52:	b168      	cbz	r0, 8005c70 <_dtoa_r+0xc8>
 8005c54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c56:	2301      	movs	r3, #1
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8524 	beq.w	80066aa <_dtoa_r+0xb02>
 8005c62:	4b9a      	ldr	r3, [pc, #616]	; (8005ecc <_dtoa_r+0x324>)
 8005c64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c66:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	f000 bd28 	b.w	80066c0 <_dtoa_r+0xb18>
 8005c70:	aa14      	add	r2, sp, #80	; 0x50
 8005c72:	a915      	add	r1, sp, #84	; 0x54
 8005c74:	ec47 6b10 	vmov	d0, r6, r7
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f001 fbe7 	bl	800744c <__d2b>
 8005c7e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005c82:	9004      	str	r0, [sp, #16]
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	d07c      	beq.n	8005d82 <_dtoa_r+0x1da>
 8005c88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c8c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005c90:	46b2      	mov	sl, r6
 8005c92:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005c96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c9a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	4b8b      	ldr	r3, [pc, #556]	; (8005ed0 <_dtoa_r+0x328>)
 8005ca2:	4650      	mov	r0, sl
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	f7fa faef 	bl	8000288 <__aeabi_dsub>
 8005caa:	a381      	add	r3, pc, #516	; (adr r3, 8005eb0 <_dtoa_r+0x308>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f7fa fca2 	bl	80005f8 <__aeabi_dmul>
 8005cb4:	a380      	add	r3, pc, #512	; (adr r3, 8005eb8 <_dtoa_r+0x310>)
 8005cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cba:	f7fa fae7 	bl	800028c <__adddf3>
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	4628      	mov	r0, r5
 8005cc2:	460f      	mov	r7, r1
 8005cc4:	f7fa fc2e 	bl	8000524 <__aeabi_i2d>
 8005cc8:	a37d      	add	r3, pc, #500	; (adr r3, 8005ec0 <_dtoa_r+0x318>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fc93 	bl	80005f8 <__aeabi_dmul>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	f7fa fad7 	bl	800028c <__adddf3>
 8005cde:	4606      	mov	r6, r0
 8005ce0:	460f      	mov	r7, r1
 8005ce2:	f7fa ff39 	bl	8000b58 <__aeabi_d2iz>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4682      	mov	sl, r0
 8005cea:	2300      	movs	r3, #0
 8005cec:	4630      	mov	r0, r6
 8005cee:	4639      	mov	r1, r7
 8005cf0:	f7fa fef4 	bl	8000adc <__aeabi_dcmplt>
 8005cf4:	b148      	cbz	r0, 8005d0a <_dtoa_r+0x162>
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	f7fa fc14 	bl	8000524 <__aeabi_i2d>
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	463b      	mov	r3, r7
 8005d00:	f7fa fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d04:	b908      	cbnz	r0, 8005d0a <_dtoa_r+0x162>
 8005d06:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005d0a:	f1ba 0f16 	cmp.w	sl, #22
 8005d0e:	d859      	bhi.n	8005dc4 <_dtoa_r+0x21c>
 8005d10:	4970      	ldr	r1, [pc, #448]	; (8005ed4 <_dtoa_r+0x32c>)
 8005d12:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005d16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d1e:	f7fa fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d050      	beq.n	8005dc8 <_dtoa_r+0x220>
 8005d26:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d30:	1b5d      	subs	r5, r3, r5
 8005d32:	f1b5 0801 	subs.w	r8, r5, #1
 8005d36:	bf49      	itett	mi
 8005d38:	f1c5 0301 	rsbmi	r3, r5, #1
 8005d3c:	2300      	movpl	r3, #0
 8005d3e:	9305      	strmi	r3, [sp, #20]
 8005d40:	f04f 0800 	movmi.w	r8, #0
 8005d44:	bf58      	it	pl
 8005d46:	9305      	strpl	r3, [sp, #20]
 8005d48:	f1ba 0f00 	cmp.w	sl, #0
 8005d4c:	db3e      	blt.n	8005dcc <_dtoa_r+0x224>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	44d0      	add	r8, sl
 8005d52:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005d56:	9307      	str	r3, [sp, #28]
 8005d58:	9b06      	ldr	r3, [sp, #24]
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	f200 8090 	bhi.w	8005e80 <_dtoa_r+0x2d8>
 8005d60:	2b05      	cmp	r3, #5
 8005d62:	bfc4      	itt	gt
 8005d64:	3b04      	subgt	r3, #4
 8005d66:	9306      	strgt	r3, [sp, #24]
 8005d68:	9b06      	ldr	r3, [sp, #24]
 8005d6a:	f1a3 0302 	sub.w	r3, r3, #2
 8005d6e:	bfcc      	ite	gt
 8005d70:	2500      	movgt	r5, #0
 8005d72:	2501      	movle	r5, #1
 8005d74:	2b03      	cmp	r3, #3
 8005d76:	f200 808f 	bhi.w	8005e98 <_dtoa_r+0x2f0>
 8005d7a:	e8df f003 	tbb	[pc, r3]
 8005d7e:	7f7d      	.short	0x7f7d
 8005d80:	7131      	.short	0x7131
 8005d82:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005d86:	441d      	add	r5, r3
 8005d88:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005d8c:	2820      	cmp	r0, #32
 8005d8e:	dd13      	ble.n	8005db8 <_dtoa_r+0x210>
 8005d90:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005d94:	9b00      	ldr	r3, [sp, #0]
 8005d96:	fa08 f800 	lsl.w	r8, r8, r0
 8005d9a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005d9e:	fa23 f000 	lsr.w	r0, r3, r0
 8005da2:	ea48 0000 	orr.w	r0, r8, r0
 8005da6:	f7fa fbad 	bl	8000504 <__aeabi_ui2d>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4682      	mov	sl, r0
 8005dae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005db2:	3d01      	subs	r5, #1
 8005db4:	9313      	str	r3, [sp, #76]	; 0x4c
 8005db6:	e772      	b.n	8005c9e <_dtoa_r+0xf6>
 8005db8:	9b00      	ldr	r3, [sp, #0]
 8005dba:	f1c0 0020 	rsb	r0, r0, #32
 8005dbe:	fa03 f000 	lsl.w	r0, r3, r0
 8005dc2:	e7f0      	b.n	8005da6 <_dtoa_r+0x1fe>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e7b1      	b.n	8005d2c <_dtoa_r+0x184>
 8005dc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005dca:	e7b0      	b.n	8005d2e <_dtoa_r+0x186>
 8005dcc:	9b05      	ldr	r3, [sp, #20]
 8005dce:	eba3 030a 	sub.w	r3, r3, sl
 8005dd2:	9305      	str	r3, [sp, #20]
 8005dd4:	f1ca 0300 	rsb	r3, sl, #0
 8005dd8:	9307      	str	r3, [sp, #28]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	930e      	str	r3, [sp, #56]	; 0x38
 8005dde:	e7bb      	b.n	8005d58 <_dtoa_r+0x1b0>
 8005de0:	2301      	movs	r3, #1
 8005de2:	930a      	str	r3, [sp, #40]	; 0x28
 8005de4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	dd59      	ble.n	8005e9e <_dtoa_r+0x2f6>
 8005dea:	9302      	str	r3, [sp, #8]
 8005dec:	4699      	mov	r9, r3
 8005dee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005df0:	2200      	movs	r2, #0
 8005df2:	6072      	str	r2, [r6, #4]
 8005df4:	2204      	movs	r2, #4
 8005df6:	f102 0014 	add.w	r0, r2, #20
 8005dfa:	4298      	cmp	r0, r3
 8005dfc:	6871      	ldr	r1, [r6, #4]
 8005dfe:	d953      	bls.n	8005ea8 <_dtoa_r+0x300>
 8005e00:	4620      	mov	r0, r4
 8005e02:	f000 ffe2 	bl	8006dca <_Balloc>
 8005e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e08:	6030      	str	r0, [r6, #0]
 8005e0a:	f1b9 0f0e 	cmp.w	r9, #14
 8005e0e:	f8d3 b000 	ldr.w	fp, [r3]
 8005e12:	f200 80e6 	bhi.w	8005fe2 <_dtoa_r+0x43a>
 8005e16:	2d00      	cmp	r5, #0
 8005e18:	f000 80e3 	beq.w	8005fe2 <_dtoa_r+0x43a>
 8005e1c:	ed9d 7b00 	vldr	d7, [sp]
 8005e20:	f1ba 0f00 	cmp.w	sl, #0
 8005e24:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005e28:	dd74      	ble.n	8005f14 <_dtoa_r+0x36c>
 8005e2a:	4a2a      	ldr	r2, [pc, #168]	; (8005ed4 <_dtoa_r+0x32c>)
 8005e2c:	f00a 030f 	and.w	r3, sl, #15
 8005e30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e34:	ed93 7b00 	vldr	d7, [r3]
 8005e38:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005e3c:	06f0      	lsls	r0, r6, #27
 8005e3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005e42:	d565      	bpl.n	8005f10 <_dtoa_r+0x368>
 8005e44:	4b24      	ldr	r3, [pc, #144]	; (8005ed8 <_dtoa_r+0x330>)
 8005e46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e4e:	f7fa fcfd 	bl	800084c <__aeabi_ddiv>
 8005e52:	e9cd 0100 	strd	r0, r1, [sp]
 8005e56:	f006 060f 	and.w	r6, r6, #15
 8005e5a:	2503      	movs	r5, #3
 8005e5c:	4f1e      	ldr	r7, [pc, #120]	; (8005ed8 <_dtoa_r+0x330>)
 8005e5e:	e04c      	b.n	8005efa <_dtoa_r+0x352>
 8005e60:	2301      	movs	r3, #1
 8005e62:	930a      	str	r3, [sp, #40]	; 0x28
 8005e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e66:	4453      	add	r3, sl
 8005e68:	f103 0901 	add.w	r9, r3, #1
 8005e6c:	9302      	str	r3, [sp, #8]
 8005e6e:	464b      	mov	r3, r9
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	bfb8      	it	lt
 8005e74:	2301      	movlt	r3, #1
 8005e76:	e7ba      	b.n	8005dee <_dtoa_r+0x246>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e7b2      	b.n	8005de2 <_dtoa_r+0x23a>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	e7f0      	b.n	8005e62 <_dtoa_r+0x2ba>
 8005e80:	2501      	movs	r5, #1
 8005e82:	2300      	movs	r3, #0
 8005e84:	9306      	str	r3, [sp, #24]
 8005e86:	950a      	str	r5, [sp, #40]	; 0x28
 8005e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e8c:	9302      	str	r3, [sp, #8]
 8005e8e:	4699      	mov	r9, r3
 8005e90:	2200      	movs	r2, #0
 8005e92:	2312      	movs	r3, #18
 8005e94:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e96:	e7aa      	b.n	8005dee <_dtoa_r+0x246>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8005e9c:	e7f4      	b.n	8005e88 <_dtoa_r+0x2e0>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	9302      	str	r3, [sp, #8]
 8005ea2:	4699      	mov	r9, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	e7f5      	b.n	8005e94 <_dtoa_r+0x2ec>
 8005ea8:	3101      	adds	r1, #1
 8005eaa:	6071      	str	r1, [r6, #4]
 8005eac:	0052      	lsls	r2, r2, #1
 8005eae:	e7a2      	b.n	8005df6 <_dtoa_r+0x24e>
 8005eb0:	636f4361 	.word	0x636f4361
 8005eb4:	3fd287a7 	.word	0x3fd287a7
 8005eb8:	8b60c8b3 	.word	0x8b60c8b3
 8005ebc:	3fc68a28 	.word	0x3fc68a28
 8005ec0:	509f79fb 	.word	0x509f79fb
 8005ec4:	3fd34413 	.word	0x3fd34413
 8005ec8:	7ff00000 	.word	0x7ff00000
 8005ecc:	080079c9 	.word	0x080079c9
 8005ed0:	3ff80000 	.word	0x3ff80000
 8005ed4:	08007a88 	.word	0x08007a88
 8005ed8:	08007a60 	.word	0x08007a60
 8005edc:	08007a51 	.word	0x08007a51
 8005ee0:	07f1      	lsls	r1, r6, #31
 8005ee2:	d508      	bpl.n	8005ef6 <_dtoa_r+0x34e>
 8005ee4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eec:	f7fa fb84 	bl	80005f8 <__aeabi_dmul>
 8005ef0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ef4:	3501      	adds	r5, #1
 8005ef6:	1076      	asrs	r6, r6, #1
 8005ef8:	3708      	adds	r7, #8
 8005efa:	2e00      	cmp	r6, #0
 8005efc:	d1f0      	bne.n	8005ee0 <_dtoa_r+0x338>
 8005efe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f06:	f7fa fca1 	bl	800084c <__aeabi_ddiv>
 8005f0a:	e9cd 0100 	strd	r0, r1, [sp]
 8005f0e:	e01a      	b.n	8005f46 <_dtoa_r+0x39e>
 8005f10:	2502      	movs	r5, #2
 8005f12:	e7a3      	b.n	8005e5c <_dtoa_r+0x2b4>
 8005f14:	f000 80a0 	beq.w	8006058 <_dtoa_r+0x4b0>
 8005f18:	f1ca 0600 	rsb	r6, sl, #0
 8005f1c:	4b9f      	ldr	r3, [pc, #636]	; (800619c <_dtoa_r+0x5f4>)
 8005f1e:	4fa0      	ldr	r7, [pc, #640]	; (80061a0 <_dtoa_r+0x5f8>)
 8005f20:	f006 020f 	and.w	r2, r6, #15
 8005f24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f30:	f7fa fb62 	bl	80005f8 <__aeabi_dmul>
 8005f34:	e9cd 0100 	strd	r0, r1, [sp]
 8005f38:	1136      	asrs	r6, r6, #4
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2502      	movs	r5, #2
 8005f3e:	2e00      	cmp	r6, #0
 8005f40:	d17f      	bne.n	8006042 <_dtoa_r+0x49a>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e1      	bne.n	8005f0a <_dtoa_r+0x362>
 8005f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 8087 	beq.w	800605c <_dtoa_r+0x4b4>
 8005f4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005f52:	2200      	movs	r2, #0
 8005f54:	4b93      	ldr	r3, [pc, #588]	; (80061a4 <_dtoa_r+0x5fc>)
 8005f56:	4630      	mov	r0, r6
 8005f58:	4639      	mov	r1, r7
 8005f5a:	f7fa fdbf 	bl	8000adc <__aeabi_dcmplt>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d07c      	beq.n	800605c <_dtoa_r+0x4b4>
 8005f62:	f1b9 0f00 	cmp.w	r9, #0
 8005f66:	d079      	beq.n	800605c <_dtoa_r+0x4b4>
 8005f68:	9b02      	ldr	r3, [sp, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	dd35      	ble.n	8005fda <_dtoa_r+0x432>
 8005f6e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005f72:	9308      	str	r3, [sp, #32]
 8005f74:	4639      	mov	r1, r7
 8005f76:	2200      	movs	r2, #0
 8005f78:	4b8b      	ldr	r3, [pc, #556]	; (80061a8 <_dtoa_r+0x600>)
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f7fa fb3c 	bl	80005f8 <__aeabi_dmul>
 8005f80:	e9cd 0100 	strd	r0, r1, [sp]
 8005f84:	9f02      	ldr	r7, [sp, #8]
 8005f86:	3501      	adds	r5, #1
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f7fa facb 	bl	8000524 <__aeabi_i2d>
 8005f8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f92:	f7fa fb31 	bl	80005f8 <__aeabi_dmul>
 8005f96:	2200      	movs	r2, #0
 8005f98:	4b84      	ldr	r3, [pc, #528]	; (80061ac <_dtoa_r+0x604>)
 8005f9a:	f7fa f977 	bl	800028c <__adddf3>
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005fa4:	2f00      	cmp	r7, #0
 8005fa6:	d15d      	bne.n	8006064 <_dtoa_r+0x4bc>
 8005fa8:	2200      	movs	r2, #0
 8005faa:	4b81      	ldr	r3, [pc, #516]	; (80061b0 <_dtoa_r+0x608>)
 8005fac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fb0:	f7fa f96a 	bl	8000288 <__aeabi_dsub>
 8005fb4:	462a      	mov	r2, r5
 8005fb6:	4633      	mov	r3, r6
 8005fb8:	e9cd 0100 	strd	r0, r1, [sp]
 8005fbc:	f7fa fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	f040 8288 	bne.w	80064d6 <_dtoa_r+0x92e>
 8005fc6:	462a      	mov	r2, r5
 8005fc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fd0:	f7fa fd84 	bl	8000adc <__aeabi_dcmplt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	f040 827c 	bne.w	80064d2 <_dtoa_r+0x92a>
 8005fda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fde:	e9cd 2300 	strd	r2, r3, [sp]
 8005fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f2c0 8150 	blt.w	800628a <_dtoa_r+0x6e2>
 8005fea:	f1ba 0f0e 	cmp.w	sl, #14
 8005fee:	f300 814c 	bgt.w	800628a <_dtoa_r+0x6e2>
 8005ff2:	4b6a      	ldr	r3, [pc, #424]	; (800619c <_dtoa_r+0x5f4>)
 8005ff4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ff8:	ed93 7b00 	vldr	d7, [r3]
 8005ffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006004:	f280 80d8 	bge.w	80061b8 <_dtoa_r+0x610>
 8006008:	f1b9 0f00 	cmp.w	r9, #0
 800600c:	f300 80d4 	bgt.w	80061b8 <_dtoa_r+0x610>
 8006010:	f040 825e 	bne.w	80064d0 <_dtoa_r+0x928>
 8006014:	2200      	movs	r2, #0
 8006016:	4b66      	ldr	r3, [pc, #408]	; (80061b0 <_dtoa_r+0x608>)
 8006018:	ec51 0b17 	vmov	r0, r1, d7
 800601c:	f7fa faec 	bl	80005f8 <__aeabi_dmul>
 8006020:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006024:	f7fa fd6e 	bl	8000b04 <__aeabi_dcmpge>
 8006028:	464f      	mov	r7, r9
 800602a:	464e      	mov	r6, r9
 800602c:	2800      	cmp	r0, #0
 800602e:	f040 8234 	bne.w	800649a <_dtoa_r+0x8f2>
 8006032:	2331      	movs	r3, #49	; 0x31
 8006034:	f10b 0501 	add.w	r5, fp, #1
 8006038:	f88b 3000 	strb.w	r3, [fp]
 800603c:	f10a 0a01 	add.w	sl, sl, #1
 8006040:	e22f      	b.n	80064a2 <_dtoa_r+0x8fa>
 8006042:	07f2      	lsls	r2, r6, #31
 8006044:	d505      	bpl.n	8006052 <_dtoa_r+0x4aa>
 8006046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800604a:	f7fa fad5 	bl	80005f8 <__aeabi_dmul>
 800604e:	3501      	adds	r5, #1
 8006050:	2301      	movs	r3, #1
 8006052:	1076      	asrs	r6, r6, #1
 8006054:	3708      	adds	r7, #8
 8006056:	e772      	b.n	8005f3e <_dtoa_r+0x396>
 8006058:	2502      	movs	r5, #2
 800605a:	e774      	b.n	8005f46 <_dtoa_r+0x39e>
 800605c:	f8cd a020 	str.w	sl, [sp, #32]
 8006060:	464f      	mov	r7, r9
 8006062:	e791      	b.n	8005f88 <_dtoa_r+0x3e0>
 8006064:	4b4d      	ldr	r3, [pc, #308]	; (800619c <_dtoa_r+0x5f4>)
 8006066:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800606a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800606e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006070:	2b00      	cmp	r3, #0
 8006072:	d047      	beq.n	8006104 <_dtoa_r+0x55c>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	2000      	movs	r0, #0
 800607a:	494e      	ldr	r1, [pc, #312]	; (80061b4 <_dtoa_r+0x60c>)
 800607c:	f7fa fbe6 	bl	800084c <__aeabi_ddiv>
 8006080:	462a      	mov	r2, r5
 8006082:	4633      	mov	r3, r6
 8006084:	f7fa f900 	bl	8000288 <__aeabi_dsub>
 8006088:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800608c:	465d      	mov	r5, fp
 800608e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006092:	f7fa fd61 	bl	8000b58 <__aeabi_d2iz>
 8006096:	4606      	mov	r6, r0
 8006098:	f7fa fa44 	bl	8000524 <__aeabi_i2d>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060a4:	f7fa f8f0 	bl	8000288 <__aeabi_dsub>
 80060a8:	3630      	adds	r6, #48	; 0x30
 80060aa:	f805 6b01 	strb.w	r6, [r5], #1
 80060ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060b2:	e9cd 0100 	strd	r0, r1, [sp]
 80060b6:	f7fa fd11 	bl	8000adc <__aeabi_dcmplt>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d163      	bne.n	8006186 <_dtoa_r+0x5de>
 80060be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060c2:	2000      	movs	r0, #0
 80060c4:	4937      	ldr	r1, [pc, #220]	; (80061a4 <_dtoa_r+0x5fc>)
 80060c6:	f7fa f8df 	bl	8000288 <__aeabi_dsub>
 80060ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060ce:	f7fa fd05 	bl	8000adc <__aeabi_dcmplt>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	f040 80b7 	bne.w	8006246 <_dtoa_r+0x69e>
 80060d8:	eba5 030b 	sub.w	r3, r5, fp
 80060dc:	429f      	cmp	r7, r3
 80060de:	f77f af7c 	ble.w	8005fda <_dtoa_r+0x432>
 80060e2:	2200      	movs	r2, #0
 80060e4:	4b30      	ldr	r3, [pc, #192]	; (80061a8 <_dtoa_r+0x600>)
 80060e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060ea:	f7fa fa85 	bl	80005f8 <__aeabi_dmul>
 80060ee:	2200      	movs	r2, #0
 80060f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80060f4:	4b2c      	ldr	r3, [pc, #176]	; (80061a8 <_dtoa_r+0x600>)
 80060f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060fa:	f7fa fa7d 	bl	80005f8 <__aeabi_dmul>
 80060fe:	e9cd 0100 	strd	r0, r1, [sp]
 8006102:	e7c4      	b.n	800608e <_dtoa_r+0x4e6>
 8006104:	462a      	mov	r2, r5
 8006106:	4633      	mov	r3, r6
 8006108:	f7fa fa76 	bl	80005f8 <__aeabi_dmul>
 800610c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006110:	eb0b 0507 	add.w	r5, fp, r7
 8006114:	465e      	mov	r6, fp
 8006116:	e9dd 0100 	ldrd	r0, r1, [sp]
 800611a:	f7fa fd1d 	bl	8000b58 <__aeabi_d2iz>
 800611e:	4607      	mov	r7, r0
 8006120:	f7fa fa00 	bl	8000524 <__aeabi_i2d>
 8006124:	3730      	adds	r7, #48	; 0x30
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800612e:	f7fa f8ab 	bl	8000288 <__aeabi_dsub>
 8006132:	f806 7b01 	strb.w	r7, [r6], #1
 8006136:	42ae      	cmp	r6, r5
 8006138:	e9cd 0100 	strd	r0, r1, [sp]
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	d126      	bne.n	8006190 <_dtoa_r+0x5e8>
 8006142:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <_dtoa_r+0x60c>)
 8006144:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006148:	f7fa f8a0 	bl	800028c <__adddf3>
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006154:	f7fa fce0 	bl	8000b18 <__aeabi_dcmpgt>
 8006158:	2800      	cmp	r0, #0
 800615a:	d174      	bne.n	8006246 <_dtoa_r+0x69e>
 800615c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006160:	2000      	movs	r0, #0
 8006162:	4914      	ldr	r1, [pc, #80]	; (80061b4 <_dtoa_r+0x60c>)
 8006164:	f7fa f890 	bl	8000288 <__aeabi_dsub>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006170:	f7fa fcb4 	bl	8000adc <__aeabi_dcmplt>
 8006174:	2800      	cmp	r0, #0
 8006176:	f43f af30 	beq.w	8005fda <_dtoa_r+0x432>
 800617a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800617e:	2b30      	cmp	r3, #48	; 0x30
 8006180:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006184:	d002      	beq.n	800618c <_dtoa_r+0x5e4>
 8006186:	f8dd a020 	ldr.w	sl, [sp, #32]
 800618a:	e04a      	b.n	8006222 <_dtoa_r+0x67a>
 800618c:	4615      	mov	r5, r2
 800618e:	e7f4      	b.n	800617a <_dtoa_r+0x5d2>
 8006190:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <_dtoa_r+0x600>)
 8006192:	f7fa fa31 	bl	80005f8 <__aeabi_dmul>
 8006196:	e9cd 0100 	strd	r0, r1, [sp]
 800619a:	e7bc      	b.n	8006116 <_dtoa_r+0x56e>
 800619c:	08007a88 	.word	0x08007a88
 80061a0:	08007a60 	.word	0x08007a60
 80061a4:	3ff00000 	.word	0x3ff00000
 80061a8:	40240000 	.word	0x40240000
 80061ac:	401c0000 	.word	0x401c0000
 80061b0:	40140000 	.word	0x40140000
 80061b4:	3fe00000 	.word	0x3fe00000
 80061b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061bc:	465d      	mov	r5, fp
 80061be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c2:	4630      	mov	r0, r6
 80061c4:	4639      	mov	r1, r7
 80061c6:	f7fa fb41 	bl	800084c <__aeabi_ddiv>
 80061ca:	f7fa fcc5 	bl	8000b58 <__aeabi_d2iz>
 80061ce:	4680      	mov	r8, r0
 80061d0:	f7fa f9a8 	bl	8000524 <__aeabi_i2d>
 80061d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061d8:	f7fa fa0e 	bl	80005f8 <__aeabi_dmul>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4630      	mov	r0, r6
 80061e2:	4639      	mov	r1, r7
 80061e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80061e8:	f7fa f84e 	bl	8000288 <__aeabi_dsub>
 80061ec:	f805 6b01 	strb.w	r6, [r5], #1
 80061f0:	eba5 060b 	sub.w	r6, r5, fp
 80061f4:	45b1      	cmp	r9, r6
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	d139      	bne.n	8006270 <_dtoa_r+0x6c8>
 80061fc:	f7fa f846 	bl	800028c <__adddf3>
 8006200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006204:	4606      	mov	r6, r0
 8006206:	460f      	mov	r7, r1
 8006208:	f7fa fc86 	bl	8000b18 <__aeabi_dcmpgt>
 800620c:	b9c8      	cbnz	r0, 8006242 <_dtoa_r+0x69a>
 800620e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006212:	4630      	mov	r0, r6
 8006214:	4639      	mov	r1, r7
 8006216:	f7fa fc57 	bl	8000ac8 <__aeabi_dcmpeq>
 800621a:	b110      	cbz	r0, 8006222 <_dtoa_r+0x67a>
 800621c:	f018 0f01 	tst.w	r8, #1
 8006220:	d10f      	bne.n	8006242 <_dtoa_r+0x69a>
 8006222:	9904      	ldr	r1, [sp, #16]
 8006224:	4620      	mov	r0, r4
 8006226:	f000 fe04 	bl	8006e32 <_Bfree>
 800622a:	2300      	movs	r3, #0
 800622c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800622e:	702b      	strb	r3, [r5, #0]
 8006230:	f10a 0301 	add.w	r3, sl, #1
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8241 	beq.w	80066c0 <_dtoa_r+0xb18>
 800623e:	601d      	str	r5, [r3, #0]
 8006240:	e23e      	b.n	80066c0 <_dtoa_r+0xb18>
 8006242:	f8cd a020 	str.w	sl, [sp, #32]
 8006246:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800624a:	2a39      	cmp	r2, #57	; 0x39
 800624c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006250:	d108      	bne.n	8006264 <_dtoa_r+0x6bc>
 8006252:	459b      	cmp	fp, r3
 8006254:	d10a      	bne.n	800626c <_dtoa_r+0x6c4>
 8006256:	9b08      	ldr	r3, [sp, #32]
 8006258:	3301      	adds	r3, #1
 800625a:	9308      	str	r3, [sp, #32]
 800625c:	2330      	movs	r3, #48	; 0x30
 800625e:	f88b 3000 	strb.w	r3, [fp]
 8006262:	465b      	mov	r3, fp
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	3201      	adds	r2, #1
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e78c      	b.n	8006186 <_dtoa_r+0x5de>
 800626c:	461d      	mov	r5, r3
 800626e:	e7ea      	b.n	8006246 <_dtoa_r+0x69e>
 8006270:	2200      	movs	r2, #0
 8006272:	4b9b      	ldr	r3, [pc, #620]	; (80064e0 <_dtoa_r+0x938>)
 8006274:	f7fa f9c0 	bl	80005f8 <__aeabi_dmul>
 8006278:	2200      	movs	r2, #0
 800627a:	2300      	movs	r3, #0
 800627c:	4606      	mov	r6, r0
 800627e:	460f      	mov	r7, r1
 8006280:	f7fa fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 8006284:	2800      	cmp	r0, #0
 8006286:	d09a      	beq.n	80061be <_dtoa_r+0x616>
 8006288:	e7cb      	b.n	8006222 <_dtoa_r+0x67a>
 800628a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800628c:	2a00      	cmp	r2, #0
 800628e:	f000 808b 	beq.w	80063a8 <_dtoa_r+0x800>
 8006292:	9a06      	ldr	r2, [sp, #24]
 8006294:	2a01      	cmp	r2, #1
 8006296:	dc6e      	bgt.n	8006376 <_dtoa_r+0x7ce>
 8006298:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800629a:	2a00      	cmp	r2, #0
 800629c:	d067      	beq.n	800636e <_dtoa_r+0x7c6>
 800629e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062a2:	9f07      	ldr	r7, [sp, #28]
 80062a4:	9d05      	ldr	r5, [sp, #20]
 80062a6:	9a05      	ldr	r2, [sp, #20]
 80062a8:	2101      	movs	r1, #1
 80062aa:	441a      	add	r2, r3
 80062ac:	4620      	mov	r0, r4
 80062ae:	9205      	str	r2, [sp, #20]
 80062b0:	4498      	add	r8, r3
 80062b2:	f000 fe9c 	bl	8006fee <__i2b>
 80062b6:	4606      	mov	r6, r0
 80062b8:	2d00      	cmp	r5, #0
 80062ba:	dd0c      	ble.n	80062d6 <_dtoa_r+0x72e>
 80062bc:	f1b8 0f00 	cmp.w	r8, #0
 80062c0:	dd09      	ble.n	80062d6 <_dtoa_r+0x72e>
 80062c2:	4545      	cmp	r5, r8
 80062c4:	9a05      	ldr	r2, [sp, #20]
 80062c6:	462b      	mov	r3, r5
 80062c8:	bfa8      	it	ge
 80062ca:	4643      	movge	r3, r8
 80062cc:	1ad2      	subs	r2, r2, r3
 80062ce:	9205      	str	r2, [sp, #20]
 80062d0:	1aed      	subs	r5, r5, r3
 80062d2:	eba8 0803 	sub.w	r8, r8, r3
 80062d6:	9b07      	ldr	r3, [sp, #28]
 80062d8:	b1eb      	cbz	r3, 8006316 <_dtoa_r+0x76e>
 80062da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d067      	beq.n	80063b0 <_dtoa_r+0x808>
 80062e0:	b18f      	cbz	r7, 8006306 <_dtoa_r+0x75e>
 80062e2:	4631      	mov	r1, r6
 80062e4:	463a      	mov	r2, r7
 80062e6:	4620      	mov	r0, r4
 80062e8:	f000 ff20 	bl	800712c <__pow5mult>
 80062ec:	9a04      	ldr	r2, [sp, #16]
 80062ee:	4601      	mov	r1, r0
 80062f0:	4606      	mov	r6, r0
 80062f2:	4620      	mov	r0, r4
 80062f4:	f000 fe84 	bl	8007000 <__multiply>
 80062f8:	9904      	ldr	r1, [sp, #16]
 80062fa:	9008      	str	r0, [sp, #32]
 80062fc:	4620      	mov	r0, r4
 80062fe:	f000 fd98 	bl	8006e32 <_Bfree>
 8006302:	9b08      	ldr	r3, [sp, #32]
 8006304:	9304      	str	r3, [sp, #16]
 8006306:	9b07      	ldr	r3, [sp, #28]
 8006308:	1bda      	subs	r2, r3, r7
 800630a:	d004      	beq.n	8006316 <_dtoa_r+0x76e>
 800630c:	9904      	ldr	r1, [sp, #16]
 800630e:	4620      	mov	r0, r4
 8006310:	f000 ff0c 	bl	800712c <__pow5mult>
 8006314:	9004      	str	r0, [sp, #16]
 8006316:	2101      	movs	r1, #1
 8006318:	4620      	mov	r0, r4
 800631a:	f000 fe68 	bl	8006fee <__i2b>
 800631e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006320:	4607      	mov	r7, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 81d0 	beq.w	80066c8 <_dtoa_r+0xb20>
 8006328:	461a      	mov	r2, r3
 800632a:	4601      	mov	r1, r0
 800632c:	4620      	mov	r0, r4
 800632e:	f000 fefd 	bl	800712c <__pow5mult>
 8006332:	9b06      	ldr	r3, [sp, #24]
 8006334:	2b01      	cmp	r3, #1
 8006336:	4607      	mov	r7, r0
 8006338:	dc40      	bgt.n	80063bc <_dtoa_r+0x814>
 800633a:	9b00      	ldr	r3, [sp, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d139      	bne.n	80063b4 <_dtoa_r+0x80c>
 8006340:	9b01      	ldr	r3, [sp, #4]
 8006342:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006346:	2b00      	cmp	r3, #0
 8006348:	d136      	bne.n	80063b8 <_dtoa_r+0x810>
 800634a:	9b01      	ldr	r3, [sp, #4]
 800634c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006350:	0d1b      	lsrs	r3, r3, #20
 8006352:	051b      	lsls	r3, r3, #20
 8006354:	b12b      	cbz	r3, 8006362 <_dtoa_r+0x7ba>
 8006356:	9b05      	ldr	r3, [sp, #20]
 8006358:	3301      	adds	r3, #1
 800635a:	9305      	str	r3, [sp, #20]
 800635c:	f108 0801 	add.w	r8, r8, #1
 8006360:	2301      	movs	r3, #1
 8006362:	9307      	str	r3, [sp, #28]
 8006364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006366:	2b00      	cmp	r3, #0
 8006368:	d12a      	bne.n	80063c0 <_dtoa_r+0x818>
 800636a:	2001      	movs	r0, #1
 800636c:	e030      	b.n	80063d0 <_dtoa_r+0x828>
 800636e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006370:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006374:	e795      	b.n	80062a2 <_dtoa_r+0x6fa>
 8006376:	9b07      	ldr	r3, [sp, #28]
 8006378:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800637c:	42bb      	cmp	r3, r7
 800637e:	bfbf      	itttt	lt
 8006380:	9b07      	ldrlt	r3, [sp, #28]
 8006382:	9707      	strlt	r7, [sp, #28]
 8006384:	1afa      	sublt	r2, r7, r3
 8006386:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006388:	bfbb      	ittet	lt
 800638a:	189b      	addlt	r3, r3, r2
 800638c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800638e:	1bdf      	subge	r7, r3, r7
 8006390:	2700      	movlt	r7, #0
 8006392:	f1b9 0f00 	cmp.w	r9, #0
 8006396:	bfb5      	itete	lt
 8006398:	9b05      	ldrlt	r3, [sp, #20]
 800639a:	9d05      	ldrge	r5, [sp, #20]
 800639c:	eba3 0509 	sublt.w	r5, r3, r9
 80063a0:	464b      	movge	r3, r9
 80063a2:	bfb8      	it	lt
 80063a4:	2300      	movlt	r3, #0
 80063a6:	e77e      	b.n	80062a6 <_dtoa_r+0x6fe>
 80063a8:	9f07      	ldr	r7, [sp, #28]
 80063aa:	9d05      	ldr	r5, [sp, #20]
 80063ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80063ae:	e783      	b.n	80062b8 <_dtoa_r+0x710>
 80063b0:	9a07      	ldr	r2, [sp, #28]
 80063b2:	e7ab      	b.n	800630c <_dtoa_r+0x764>
 80063b4:	2300      	movs	r3, #0
 80063b6:	e7d4      	b.n	8006362 <_dtoa_r+0x7ba>
 80063b8:	9b00      	ldr	r3, [sp, #0]
 80063ba:	e7d2      	b.n	8006362 <_dtoa_r+0x7ba>
 80063bc:	2300      	movs	r3, #0
 80063be:	9307      	str	r3, [sp, #28]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80063c6:	6918      	ldr	r0, [r3, #16]
 80063c8:	f000 fdc3 	bl	8006f52 <__hi0bits>
 80063cc:	f1c0 0020 	rsb	r0, r0, #32
 80063d0:	4440      	add	r0, r8
 80063d2:	f010 001f 	ands.w	r0, r0, #31
 80063d6:	d047      	beq.n	8006468 <_dtoa_r+0x8c0>
 80063d8:	f1c0 0320 	rsb	r3, r0, #32
 80063dc:	2b04      	cmp	r3, #4
 80063de:	dd3b      	ble.n	8006458 <_dtoa_r+0x8b0>
 80063e0:	9b05      	ldr	r3, [sp, #20]
 80063e2:	f1c0 001c 	rsb	r0, r0, #28
 80063e6:	4403      	add	r3, r0
 80063e8:	9305      	str	r3, [sp, #20]
 80063ea:	4405      	add	r5, r0
 80063ec:	4480      	add	r8, r0
 80063ee:	9b05      	ldr	r3, [sp, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dd05      	ble.n	8006400 <_dtoa_r+0x858>
 80063f4:	461a      	mov	r2, r3
 80063f6:	9904      	ldr	r1, [sp, #16]
 80063f8:	4620      	mov	r0, r4
 80063fa:	f000 fee5 	bl	80071c8 <__lshift>
 80063fe:	9004      	str	r0, [sp, #16]
 8006400:	f1b8 0f00 	cmp.w	r8, #0
 8006404:	dd05      	ble.n	8006412 <_dtoa_r+0x86a>
 8006406:	4639      	mov	r1, r7
 8006408:	4642      	mov	r2, r8
 800640a:	4620      	mov	r0, r4
 800640c:	f000 fedc 	bl	80071c8 <__lshift>
 8006410:	4607      	mov	r7, r0
 8006412:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006414:	b353      	cbz	r3, 800646c <_dtoa_r+0x8c4>
 8006416:	4639      	mov	r1, r7
 8006418:	9804      	ldr	r0, [sp, #16]
 800641a:	f000 ff29 	bl	8007270 <__mcmp>
 800641e:	2800      	cmp	r0, #0
 8006420:	da24      	bge.n	800646c <_dtoa_r+0x8c4>
 8006422:	2300      	movs	r3, #0
 8006424:	220a      	movs	r2, #10
 8006426:	9904      	ldr	r1, [sp, #16]
 8006428:	4620      	mov	r0, r4
 800642a:	f000 fd19 	bl	8006e60 <__multadd>
 800642e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006430:	9004      	str	r0, [sp, #16]
 8006432:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 814d 	beq.w	80066d6 <_dtoa_r+0xb2e>
 800643c:	2300      	movs	r3, #0
 800643e:	4631      	mov	r1, r6
 8006440:	220a      	movs	r2, #10
 8006442:	4620      	mov	r0, r4
 8006444:	f000 fd0c 	bl	8006e60 <__multadd>
 8006448:	9b02      	ldr	r3, [sp, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	4606      	mov	r6, r0
 800644e:	dc4f      	bgt.n	80064f0 <_dtoa_r+0x948>
 8006450:	9b06      	ldr	r3, [sp, #24]
 8006452:	2b02      	cmp	r3, #2
 8006454:	dd4c      	ble.n	80064f0 <_dtoa_r+0x948>
 8006456:	e011      	b.n	800647c <_dtoa_r+0x8d4>
 8006458:	d0c9      	beq.n	80063ee <_dtoa_r+0x846>
 800645a:	9a05      	ldr	r2, [sp, #20]
 800645c:	331c      	adds	r3, #28
 800645e:	441a      	add	r2, r3
 8006460:	9205      	str	r2, [sp, #20]
 8006462:	441d      	add	r5, r3
 8006464:	4498      	add	r8, r3
 8006466:	e7c2      	b.n	80063ee <_dtoa_r+0x846>
 8006468:	4603      	mov	r3, r0
 800646a:	e7f6      	b.n	800645a <_dtoa_r+0x8b2>
 800646c:	f1b9 0f00 	cmp.w	r9, #0
 8006470:	dc38      	bgt.n	80064e4 <_dtoa_r+0x93c>
 8006472:	9b06      	ldr	r3, [sp, #24]
 8006474:	2b02      	cmp	r3, #2
 8006476:	dd35      	ble.n	80064e4 <_dtoa_r+0x93c>
 8006478:	f8cd 9008 	str.w	r9, [sp, #8]
 800647c:	9b02      	ldr	r3, [sp, #8]
 800647e:	b963      	cbnz	r3, 800649a <_dtoa_r+0x8f2>
 8006480:	4639      	mov	r1, r7
 8006482:	2205      	movs	r2, #5
 8006484:	4620      	mov	r0, r4
 8006486:	f000 fceb 	bl	8006e60 <__multadd>
 800648a:	4601      	mov	r1, r0
 800648c:	4607      	mov	r7, r0
 800648e:	9804      	ldr	r0, [sp, #16]
 8006490:	f000 feee 	bl	8007270 <__mcmp>
 8006494:	2800      	cmp	r0, #0
 8006496:	f73f adcc 	bgt.w	8006032 <_dtoa_r+0x48a>
 800649a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800649c:	465d      	mov	r5, fp
 800649e:	ea6f 0a03 	mvn.w	sl, r3
 80064a2:	f04f 0900 	mov.w	r9, #0
 80064a6:	4639      	mov	r1, r7
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 fcc2 	bl	8006e32 <_Bfree>
 80064ae:	2e00      	cmp	r6, #0
 80064b0:	f43f aeb7 	beq.w	8006222 <_dtoa_r+0x67a>
 80064b4:	f1b9 0f00 	cmp.w	r9, #0
 80064b8:	d005      	beq.n	80064c6 <_dtoa_r+0x91e>
 80064ba:	45b1      	cmp	r9, r6
 80064bc:	d003      	beq.n	80064c6 <_dtoa_r+0x91e>
 80064be:	4649      	mov	r1, r9
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fcb6 	bl	8006e32 <_Bfree>
 80064c6:	4631      	mov	r1, r6
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fcb2 	bl	8006e32 <_Bfree>
 80064ce:	e6a8      	b.n	8006222 <_dtoa_r+0x67a>
 80064d0:	2700      	movs	r7, #0
 80064d2:	463e      	mov	r6, r7
 80064d4:	e7e1      	b.n	800649a <_dtoa_r+0x8f2>
 80064d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80064da:	463e      	mov	r6, r7
 80064dc:	e5a9      	b.n	8006032 <_dtoa_r+0x48a>
 80064de:	bf00      	nop
 80064e0:	40240000 	.word	0x40240000
 80064e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 80fa 	beq.w	80066e4 <_dtoa_r+0xb3c>
 80064f0:	2d00      	cmp	r5, #0
 80064f2:	dd05      	ble.n	8006500 <_dtoa_r+0x958>
 80064f4:	4631      	mov	r1, r6
 80064f6:	462a      	mov	r2, r5
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fe65 	bl	80071c8 <__lshift>
 80064fe:	4606      	mov	r6, r0
 8006500:	9b07      	ldr	r3, [sp, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d04c      	beq.n	80065a0 <_dtoa_r+0x9f8>
 8006506:	6871      	ldr	r1, [r6, #4]
 8006508:	4620      	mov	r0, r4
 800650a:	f000 fc5e 	bl	8006dca <_Balloc>
 800650e:	6932      	ldr	r2, [r6, #16]
 8006510:	3202      	adds	r2, #2
 8006512:	4605      	mov	r5, r0
 8006514:	0092      	lsls	r2, r2, #2
 8006516:	f106 010c 	add.w	r1, r6, #12
 800651a:	300c      	adds	r0, #12
 800651c:	f000 fc48 	bl	8006db0 <memcpy>
 8006520:	2201      	movs	r2, #1
 8006522:	4629      	mov	r1, r5
 8006524:	4620      	mov	r0, r4
 8006526:	f000 fe4f 	bl	80071c8 <__lshift>
 800652a:	9b00      	ldr	r3, [sp, #0]
 800652c:	f8cd b014 	str.w	fp, [sp, #20]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	46b1      	mov	r9, r6
 8006536:	9307      	str	r3, [sp, #28]
 8006538:	4606      	mov	r6, r0
 800653a:	4639      	mov	r1, r7
 800653c:	9804      	ldr	r0, [sp, #16]
 800653e:	f7ff faa5 	bl	8005a8c <quorem>
 8006542:	4649      	mov	r1, r9
 8006544:	4605      	mov	r5, r0
 8006546:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800654a:	9804      	ldr	r0, [sp, #16]
 800654c:	f000 fe90 	bl	8007270 <__mcmp>
 8006550:	4632      	mov	r2, r6
 8006552:	9000      	str	r0, [sp, #0]
 8006554:	4639      	mov	r1, r7
 8006556:	4620      	mov	r0, r4
 8006558:	f000 fea4 	bl	80072a4 <__mdiff>
 800655c:	68c3      	ldr	r3, [r0, #12]
 800655e:	4602      	mov	r2, r0
 8006560:	bb03      	cbnz	r3, 80065a4 <_dtoa_r+0x9fc>
 8006562:	4601      	mov	r1, r0
 8006564:	9008      	str	r0, [sp, #32]
 8006566:	9804      	ldr	r0, [sp, #16]
 8006568:	f000 fe82 	bl	8007270 <__mcmp>
 800656c:	9a08      	ldr	r2, [sp, #32]
 800656e:	4603      	mov	r3, r0
 8006570:	4611      	mov	r1, r2
 8006572:	4620      	mov	r0, r4
 8006574:	9308      	str	r3, [sp, #32]
 8006576:	f000 fc5c 	bl	8006e32 <_Bfree>
 800657a:	9b08      	ldr	r3, [sp, #32]
 800657c:	b9a3      	cbnz	r3, 80065a8 <_dtoa_r+0xa00>
 800657e:	9a06      	ldr	r2, [sp, #24]
 8006580:	b992      	cbnz	r2, 80065a8 <_dtoa_r+0xa00>
 8006582:	9a07      	ldr	r2, [sp, #28]
 8006584:	b982      	cbnz	r2, 80065a8 <_dtoa_r+0xa00>
 8006586:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800658a:	d029      	beq.n	80065e0 <_dtoa_r+0xa38>
 800658c:	9b00      	ldr	r3, [sp, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	dd01      	ble.n	8006596 <_dtoa_r+0x9ee>
 8006592:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006596:	9b05      	ldr	r3, [sp, #20]
 8006598:	1c5d      	adds	r5, r3, #1
 800659a:	f883 8000 	strb.w	r8, [r3]
 800659e:	e782      	b.n	80064a6 <_dtoa_r+0x8fe>
 80065a0:	4630      	mov	r0, r6
 80065a2:	e7c2      	b.n	800652a <_dtoa_r+0x982>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e7e3      	b.n	8006570 <_dtoa_r+0x9c8>
 80065a8:	9a00      	ldr	r2, [sp, #0]
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	db04      	blt.n	80065b8 <_dtoa_r+0xa10>
 80065ae:	d125      	bne.n	80065fc <_dtoa_r+0xa54>
 80065b0:	9a06      	ldr	r2, [sp, #24]
 80065b2:	bb1a      	cbnz	r2, 80065fc <_dtoa_r+0xa54>
 80065b4:	9a07      	ldr	r2, [sp, #28]
 80065b6:	bb0a      	cbnz	r2, 80065fc <_dtoa_r+0xa54>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	ddec      	ble.n	8006596 <_dtoa_r+0x9ee>
 80065bc:	2201      	movs	r2, #1
 80065be:	9904      	ldr	r1, [sp, #16]
 80065c0:	4620      	mov	r0, r4
 80065c2:	f000 fe01 	bl	80071c8 <__lshift>
 80065c6:	4639      	mov	r1, r7
 80065c8:	9004      	str	r0, [sp, #16]
 80065ca:	f000 fe51 	bl	8007270 <__mcmp>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	dc03      	bgt.n	80065da <_dtoa_r+0xa32>
 80065d2:	d1e0      	bne.n	8006596 <_dtoa_r+0x9ee>
 80065d4:	f018 0f01 	tst.w	r8, #1
 80065d8:	d0dd      	beq.n	8006596 <_dtoa_r+0x9ee>
 80065da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065de:	d1d8      	bne.n	8006592 <_dtoa_r+0x9ea>
 80065e0:	9b05      	ldr	r3, [sp, #20]
 80065e2:	9a05      	ldr	r2, [sp, #20]
 80065e4:	1c5d      	adds	r5, r3, #1
 80065e6:	2339      	movs	r3, #57	; 0x39
 80065e8:	7013      	strb	r3, [r2, #0]
 80065ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065ee:	2b39      	cmp	r3, #57	; 0x39
 80065f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80065f4:	d04f      	beq.n	8006696 <_dtoa_r+0xaee>
 80065f6:	3301      	adds	r3, #1
 80065f8:	7013      	strb	r3, [r2, #0]
 80065fa:	e754      	b.n	80064a6 <_dtoa_r+0x8fe>
 80065fc:	9a05      	ldr	r2, [sp, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f102 0501 	add.w	r5, r2, #1
 8006604:	dd06      	ble.n	8006614 <_dtoa_r+0xa6c>
 8006606:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800660a:	d0e9      	beq.n	80065e0 <_dtoa_r+0xa38>
 800660c:	f108 0801 	add.w	r8, r8, #1
 8006610:	9b05      	ldr	r3, [sp, #20]
 8006612:	e7c2      	b.n	800659a <_dtoa_r+0x9f2>
 8006614:	9a02      	ldr	r2, [sp, #8]
 8006616:	f805 8c01 	strb.w	r8, [r5, #-1]
 800661a:	eba5 030b 	sub.w	r3, r5, fp
 800661e:	4293      	cmp	r3, r2
 8006620:	d021      	beq.n	8006666 <_dtoa_r+0xabe>
 8006622:	2300      	movs	r3, #0
 8006624:	220a      	movs	r2, #10
 8006626:	9904      	ldr	r1, [sp, #16]
 8006628:	4620      	mov	r0, r4
 800662a:	f000 fc19 	bl	8006e60 <__multadd>
 800662e:	45b1      	cmp	r9, r6
 8006630:	9004      	str	r0, [sp, #16]
 8006632:	f04f 0300 	mov.w	r3, #0
 8006636:	f04f 020a 	mov.w	r2, #10
 800663a:	4649      	mov	r1, r9
 800663c:	4620      	mov	r0, r4
 800663e:	d105      	bne.n	800664c <_dtoa_r+0xaa4>
 8006640:	f000 fc0e 	bl	8006e60 <__multadd>
 8006644:	4681      	mov	r9, r0
 8006646:	4606      	mov	r6, r0
 8006648:	9505      	str	r5, [sp, #20]
 800664a:	e776      	b.n	800653a <_dtoa_r+0x992>
 800664c:	f000 fc08 	bl	8006e60 <__multadd>
 8006650:	4631      	mov	r1, r6
 8006652:	4681      	mov	r9, r0
 8006654:	2300      	movs	r3, #0
 8006656:	220a      	movs	r2, #10
 8006658:	4620      	mov	r0, r4
 800665a:	f000 fc01 	bl	8006e60 <__multadd>
 800665e:	4606      	mov	r6, r0
 8006660:	e7f2      	b.n	8006648 <_dtoa_r+0xaa0>
 8006662:	f04f 0900 	mov.w	r9, #0
 8006666:	2201      	movs	r2, #1
 8006668:	9904      	ldr	r1, [sp, #16]
 800666a:	4620      	mov	r0, r4
 800666c:	f000 fdac 	bl	80071c8 <__lshift>
 8006670:	4639      	mov	r1, r7
 8006672:	9004      	str	r0, [sp, #16]
 8006674:	f000 fdfc 	bl	8007270 <__mcmp>
 8006678:	2800      	cmp	r0, #0
 800667a:	dcb6      	bgt.n	80065ea <_dtoa_r+0xa42>
 800667c:	d102      	bne.n	8006684 <_dtoa_r+0xadc>
 800667e:	f018 0f01 	tst.w	r8, #1
 8006682:	d1b2      	bne.n	80065ea <_dtoa_r+0xa42>
 8006684:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006688:	2b30      	cmp	r3, #48	; 0x30
 800668a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800668e:	f47f af0a 	bne.w	80064a6 <_dtoa_r+0x8fe>
 8006692:	4615      	mov	r5, r2
 8006694:	e7f6      	b.n	8006684 <_dtoa_r+0xadc>
 8006696:	4593      	cmp	fp, r2
 8006698:	d105      	bne.n	80066a6 <_dtoa_r+0xafe>
 800669a:	2331      	movs	r3, #49	; 0x31
 800669c:	f10a 0a01 	add.w	sl, sl, #1
 80066a0:	f88b 3000 	strb.w	r3, [fp]
 80066a4:	e6ff      	b.n	80064a6 <_dtoa_r+0x8fe>
 80066a6:	4615      	mov	r5, r2
 80066a8:	e79f      	b.n	80065ea <_dtoa_r+0xa42>
 80066aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006710 <_dtoa_r+0xb68>
 80066ae:	e007      	b.n	80066c0 <_dtoa_r+0xb18>
 80066b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006714 <_dtoa_r+0xb6c>
 80066b6:	b11b      	cbz	r3, 80066c0 <_dtoa_r+0xb18>
 80066b8:	f10b 0308 	add.w	r3, fp, #8
 80066bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	4658      	mov	r0, fp
 80066c2:	b017      	add	sp, #92	; 0x5c
 80066c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c8:	9b06      	ldr	r3, [sp, #24]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	f77f ae35 	ble.w	800633a <_dtoa_r+0x792>
 80066d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066d2:	9307      	str	r3, [sp, #28]
 80066d4:	e649      	b.n	800636a <_dtoa_r+0x7c2>
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dc03      	bgt.n	80066e4 <_dtoa_r+0xb3c>
 80066dc:	9b06      	ldr	r3, [sp, #24]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	f73f aecc 	bgt.w	800647c <_dtoa_r+0x8d4>
 80066e4:	465d      	mov	r5, fp
 80066e6:	4639      	mov	r1, r7
 80066e8:	9804      	ldr	r0, [sp, #16]
 80066ea:	f7ff f9cf 	bl	8005a8c <quorem>
 80066ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80066f2:	f805 8b01 	strb.w	r8, [r5], #1
 80066f6:	9a02      	ldr	r2, [sp, #8]
 80066f8:	eba5 030b 	sub.w	r3, r5, fp
 80066fc:	429a      	cmp	r2, r3
 80066fe:	ddb0      	ble.n	8006662 <_dtoa_r+0xaba>
 8006700:	2300      	movs	r3, #0
 8006702:	220a      	movs	r2, #10
 8006704:	9904      	ldr	r1, [sp, #16]
 8006706:	4620      	mov	r0, r4
 8006708:	f000 fbaa 	bl	8006e60 <__multadd>
 800670c:	9004      	str	r0, [sp, #16]
 800670e:	e7ea      	b.n	80066e6 <_dtoa_r+0xb3e>
 8006710:	080079c8 	.word	0x080079c8
 8006714:	08007a48 	.word	0x08007a48

08006718 <rshift>:
 8006718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800671a:	6906      	ldr	r6, [r0, #16]
 800671c:	114b      	asrs	r3, r1, #5
 800671e:	429e      	cmp	r6, r3
 8006720:	f100 0414 	add.w	r4, r0, #20
 8006724:	dd30      	ble.n	8006788 <rshift+0x70>
 8006726:	f011 011f 	ands.w	r1, r1, #31
 800672a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800672e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006732:	d108      	bne.n	8006746 <rshift+0x2e>
 8006734:	4621      	mov	r1, r4
 8006736:	42b2      	cmp	r2, r6
 8006738:	460b      	mov	r3, r1
 800673a:	d211      	bcs.n	8006760 <rshift+0x48>
 800673c:	f852 3b04 	ldr.w	r3, [r2], #4
 8006740:	f841 3b04 	str.w	r3, [r1], #4
 8006744:	e7f7      	b.n	8006736 <rshift+0x1e>
 8006746:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800674a:	f1c1 0c20 	rsb	ip, r1, #32
 800674e:	40cd      	lsrs	r5, r1
 8006750:	3204      	adds	r2, #4
 8006752:	4623      	mov	r3, r4
 8006754:	42b2      	cmp	r2, r6
 8006756:	4617      	mov	r7, r2
 8006758:	d30c      	bcc.n	8006774 <rshift+0x5c>
 800675a:	601d      	str	r5, [r3, #0]
 800675c:	b105      	cbz	r5, 8006760 <rshift+0x48>
 800675e:	3304      	adds	r3, #4
 8006760:	1b1a      	subs	r2, r3, r4
 8006762:	42a3      	cmp	r3, r4
 8006764:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006768:	bf08      	it	eq
 800676a:	2300      	moveq	r3, #0
 800676c:	6102      	str	r2, [r0, #16]
 800676e:	bf08      	it	eq
 8006770:	6143      	streq	r3, [r0, #20]
 8006772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006774:	683f      	ldr	r7, [r7, #0]
 8006776:	fa07 f70c 	lsl.w	r7, r7, ip
 800677a:	433d      	orrs	r5, r7
 800677c:	f843 5b04 	str.w	r5, [r3], #4
 8006780:	f852 5b04 	ldr.w	r5, [r2], #4
 8006784:	40cd      	lsrs	r5, r1
 8006786:	e7e5      	b.n	8006754 <rshift+0x3c>
 8006788:	4623      	mov	r3, r4
 800678a:	e7e9      	b.n	8006760 <rshift+0x48>

0800678c <__hexdig_fun>:
 800678c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006790:	2b09      	cmp	r3, #9
 8006792:	d802      	bhi.n	800679a <__hexdig_fun+0xe>
 8006794:	3820      	subs	r0, #32
 8006796:	b2c0      	uxtb	r0, r0
 8006798:	4770      	bx	lr
 800679a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800679e:	2b05      	cmp	r3, #5
 80067a0:	d801      	bhi.n	80067a6 <__hexdig_fun+0x1a>
 80067a2:	3847      	subs	r0, #71	; 0x47
 80067a4:	e7f7      	b.n	8006796 <__hexdig_fun+0xa>
 80067a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80067aa:	2b05      	cmp	r3, #5
 80067ac:	d801      	bhi.n	80067b2 <__hexdig_fun+0x26>
 80067ae:	3827      	subs	r0, #39	; 0x27
 80067b0:	e7f1      	b.n	8006796 <__hexdig_fun+0xa>
 80067b2:	2000      	movs	r0, #0
 80067b4:	4770      	bx	lr

080067b6 <__gethex>:
 80067b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ba:	b08b      	sub	sp, #44	; 0x2c
 80067bc:	468a      	mov	sl, r1
 80067be:	9002      	str	r0, [sp, #8]
 80067c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80067c2:	9306      	str	r3, [sp, #24]
 80067c4:	4690      	mov	r8, r2
 80067c6:	f000 fad0 	bl	8006d6a <__localeconv_l>
 80067ca:	6803      	ldr	r3, [r0, #0]
 80067cc:	9303      	str	r3, [sp, #12]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7f9 fcfe 	bl	80001d0 <strlen>
 80067d4:	9b03      	ldr	r3, [sp, #12]
 80067d6:	9001      	str	r0, [sp, #4]
 80067d8:	4403      	add	r3, r0
 80067da:	f04f 0b00 	mov.w	fp, #0
 80067de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80067e2:	9307      	str	r3, [sp, #28]
 80067e4:	f8da 3000 	ldr.w	r3, [sl]
 80067e8:	3302      	adds	r3, #2
 80067ea:	461f      	mov	r7, r3
 80067ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80067f0:	2830      	cmp	r0, #48	; 0x30
 80067f2:	d06c      	beq.n	80068ce <__gethex+0x118>
 80067f4:	f7ff ffca 	bl	800678c <__hexdig_fun>
 80067f8:	4604      	mov	r4, r0
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d16a      	bne.n	80068d4 <__gethex+0x11e>
 80067fe:	9a01      	ldr	r2, [sp, #4]
 8006800:	9903      	ldr	r1, [sp, #12]
 8006802:	4638      	mov	r0, r7
 8006804:	f001 f840 	bl	8007888 <strncmp>
 8006808:	2800      	cmp	r0, #0
 800680a:	d166      	bne.n	80068da <__gethex+0x124>
 800680c:	9b01      	ldr	r3, [sp, #4]
 800680e:	5cf8      	ldrb	r0, [r7, r3]
 8006810:	18fe      	adds	r6, r7, r3
 8006812:	f7ff ffbb 	bl	800678c <__hexdig_fun>
 8006816:	2800      	cmp	r0, #0
 8006818:	d062      	beq.n	80068e0 <__gethex+0x12a>
 800681a:	4633      	mov	r3, r6
 800681c:	7818      	ldrb	r0, [r3, #0]
 800681e:	2830      	cmp	r0, #48	; 0x30
 8006820:	461f      	mov	r7, r3
 8006822:	f103 0301 	add.w	r3, r3, #1
 8006826:	d0f9      	beq.n	800681c <__gethex+0x66>
 8006828:	f7ff ffb0 	bl	800678c <__hexdig_fun>
 800682c:	fab0 f580 	clz	r5, r0
 8006830:	096d      	lsrs	r5, r5, #5
 8006832:	4634      	mov	r4, r6
 8006834:	f04f 0b01 	mov.w	fp, #1
 8006838:	463a      	mov	r2, r7
 800683a:	4616      	mov	r6, r2
 800683c:	3201      	adds	r2, #1
 800683e:	7830      	ldrb	r0, [r6, #0]
 8006840:	f7ff ffa4 	bl	800678c <__hexdig_fun>
 8006844:	2800      	cmp	r0, #0
 8006846:	d1f8      	bne.n	800683a <__gethex+0x84>
 8006848:	9a01      	ldr	r2, [sp, #4]
 800684a:	9903      	ldr	r1, [sp, #12]
 800684c:	4630      	mov	r0, r6
 800684e:	f001 f81b 	bl	8007888 <strncmp>
 8006852:	b950      	cbnz	r0, 800686a <__gethex+0xb4>
 8006854:	b954      	cbnz	r4, 800686c <__gethex+0xb6>
 8006856:	9b01      	ldr	r3, [sp, #4]
 8006858:	18f4      	adds	r4, r6, r3
 800685a:	4622      	mov	r2, r4
 800685c:	4616      	mov	r6, r2
 800685e:	3201      	adds	r2, #1
 8006860:	7830      	ldrb	r0, [r6, #0]
 8006862:	f7ff ff93 	bl	800678c <__hexdig_fun>
 8006866:	2800      	cmp	r0, #0
 8006868:	d1f8      	bne.n	800685c <__gethex+0xa6>
 800686a:	b10c      	cbz	r4, 8006870 <__gethex+0xba>
 800686c:	1ba4      	subs	r4, r4, r6
 800686e:	00a4      	lsls	r4, r4, #2
 8006870:	7833      	ldrb	r3, [r6, #0]
 8006872:	2b50      	cmp	r3, #80	; 0x50
 8006874:	d001      	beq.n	800687a <__gethex+0xc4>
 8006876:	2b70      	cmp	r3, #112	; 0x70
 8006878:	d140      	bne.n	80068fc <__gethex+0x146>
 800687a:	7873      	ldrb	r3, [r6, #1]
 800687c:	2b2b      	cmp	r3, #43	; 0x2b
 800687e:	d031      	beq.n	80068e4 <__gethex+0x12e>
 8006880:	2b2d      	cmp	r3, #45	; 0x2d
 8006882:	d033      	beq.n	80068ec <__gethex+0x136>
 8006884:	1c71      	adds	r1, r6, #1
 8006886:	f04f 0900 	mov.w	r9, #0
 800688a:	7808      	ldrb	r0, [r1, #0]
 800688c:	f7ff ff7e 	bl	800678c <__hexdig_fun>
 8006890:	1e43      	subs	r3, r0, #1
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b18      	cmp	r3, #24
 8006896:	d831      	bhi.n	80068fc <__gethex+0x146>
 8006898:	f1a0 0210 	sub.w	r2, r0, #16
 800689c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80068a0:	f7ff ff74 	bl	800678c <__hexdig_fun>
 80068a4:	1e43      	subs	r3, r0, #1
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b18      	cmp	r3, #24
 80068aa:	d922      	bls.n	80068f2 <__gethex+0x13c>
 80068ac:	f1b9 0f00 	cmp.w	r9, #0
 80068b0:	d000      	beq.n	80068b4 <__gethex+0xfe>
 80068b2:	4252      	negs	r2, r2
 80068b4:	4414      	add	r4, r2
 80068b6:	f8ca 1000 	str.w	r1, [sl]
 80068ba:	b30d      	cbz	r5, 8006900 <__gethex+0x14a>
 80068bc:	f1bb 0f00 	cmp.w	fp, #0
 80068c0:	bf0c      	ite	eq
 80068c2:	2706      	moveq	r7, #6
 80068c4:	2700      	movne	r7, #0
 80068c6:	4638      	mov	r0, r7
 80068c8:	b00b      	add	sp, #44	; 0x2c
 80068ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ce:	f10b 0b01 	add.w	fp, fp, #1
 80068d2:	e78a      	b.n	80067ea <__gethex+0x34>
 80068d4:	2500      	movs	r5, #0
 80068d6:	462c      	mov	r4, r5
 80068d8:	e7ae      	b.n	8006838 <__gethex+0x82>
 80068da:	463e      	mov	r6, r7
 80068dc:	2501      	movs	r5, #1
 80068de:	e7c7      	b.n	8006870 <__gethex+0xba>
 80068e0:	4604      	mov	r4, r0
 80068e2:	e7fb      	b.n	80068dc <__gethex+0x126>
 80068e4:	f04f 0900 	mov.w	r9, #0
 80068e8:	1cb1      	adds	r1, r6, #2
 80068ea:	e7ce      	b.n	800688a <__gethex+0xd4>
 80068ec:	f04f 0901 	mov.w	r9, #1
 80068f0:	e7fa      	b.n	80068e8 <__gethex+0x132>
 80068f2:	230a      	movs	r3, #10
 80068f4:	fb03 0202 	mla	r2, r3, r2, r0
 80068f8:	3a10      	subs	r2, #16
 80068fa:	e7cf      	b.n	800689c <__gethex+0xe6>
 80068fc:	4631      	mov	r1, r6
 80068fe:	e7da      	b.n	80068b6 <__gethex+0x100>
 8006900:	1bf3      	subs	r3, r6, r7
 8006902:	3b01      	subs	r3, #1
 8006904:	4629      	mov	r1, r5
 8006906:	2b07      	cmp	r3, #7
 8006908:	dc49      	bgt.n	800699e <__gethex+0x1e8>
 800690a:	9802      	ldr	r0, [sp, #8]
 800690c:	f000 fa5d 	bl	8006dca <_Balloc>
 8006910:	9b01      	ldr	r3, [sp, #4]
 8006912:	f100 0914 	add.w	r9, r0, #20
 8006916:	f04f 0b00 	mov.w	fp, #0
 800691a:	f1c3 0301 	rsb	r3, r3, #1
 800691e:	4605      	mov	r5, r0
 8006920:	f8cd 9010 	str.w	r9, [sp, #16]
 8006924:	46da      	mov	sl, fp
 8006926:	9308      	str	r3, [sp, #32]
 8006928:	42b7      	cmp	r7, r6
 800692a:	d33b      	bcc.n	80069a4 <__gethex+0x1ee>
 800692c:	9804      	ldr	r0, [sp, #16]
 800692e:	f840 ab04 	str.w	sl, [r0], #4
 8006932:	eba0 0009 	sub.w	r0, r0, r9
 8006936:	1080      	asrs	r0, r0, #2
 8006938:	6128      	str	r0, [r5, #16]
 800693a:	0147      	lsls	r7, r0, #5
 800693c:	4650      	mov	r0, sl
 800693e:	f000 fb08 	bl	8006f52 <__hi0bits>
 8006942:	f8d8 6000 	ldr.w	r6, [r8]
 8006946:	1a3f      	subs	r7, r7, r0
 8006948:	42b7      	cmp	r7, r6
 800694a:	dd64      	ble.n	8006a16 <__gethex+0x260>
 800694c:	1bbf      	subs	r7, r7, r6
 800694e:	4639      	mov	r1, r7
 8006950:	4628      	mov	r0, r5
 8006952:	f000 fe17 	bl	8007584 <__any_on>
 8006956:	4682      	mov	sl, r0
 8006958:	b178      	cbz	r0, 800697a <__gethex+0x1c4>
 800695a:	1e7b      	subs	r3, r7, #1
 800695c:	1159      	asrs	r1, r3, #5
 800695e:	f003 021f 	and.w	r2, r3, #31
 8006962:	f04f 0a01 	mov.w	sl, #1
 8006966:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800696a:	fa0a f202 	lsl.w	r2, sl, r2
 800696e:	420a      	tst	r2, r1
 8006970:	d003      	beq.n	800697a <__gethex+0x1c4>
 8006972:	4553      	cmp	r3, sl
 8006974:	dc46      	bgt.n	8006a04 <__gethex+0x24e>
 8006976:	f04f 0a02 	mov.w	sl, #2
 800697a:	4639      	mov	r1, r7
 800697c:	4628      	mov	r0, r5
 800697e:	f7ff fecb 	bl	8006718 <rshift>
 8006982:	443c      	add	r4, r7
 8006984:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006988:	42a3      	cmp	r3, r4
 800698a:	da52      	bge.n	8006a32 <__gethex+0x27c>
 800698c:	4629      	mov	r1, r5
 800698e:	9802      	ldr	r0, [sp, #8]
 8006990:	f000 fa4f 	bl	8006e32 <_Bfree>
 8006994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006996:	2300      	movs	r3, #0
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	27a3      	movs	r7, #163	; 0xa3
 800699c:	e793      	b.n	80068c6 <__gethex+0x110>
 800699e:	3101      	adds	r1, #1
 80069a0:	105b      	asrs	r3, r3, #1
 80069a2:	e7b0      	b.n	8006906 <__gethex+0x150>
 80069a4:	1e73      	subs	r3, r6, #1
 80069a6:	9305      	str	r3, [sp, #20]
 80069a8:	9a07      	ldr	r2, [sp, #28]
 80069aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d018      	beq.n	80069e4 <__gethex+0x22e>
 80069b2:	f1bb 0f20 	cmp.w	fp, #32
 80069b6:	d107      	bne.n	80069c8 <__gethex+0x212>
 80069b8:	9b04      	ldr	r3, [sp, #16]
 80069ba:	f8c3 a000 	str.w	sl, [r3]
 80069be:	3304      	adds	r3, #4
 80069c0:	f04f 0a00 	mov.w	sl, #0
 80069c4:	9304      	str	r3, [sp, #16]
 80069c6:	46d3      	mov	fp, sl
 80069c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80069cc:	f7ff fede 	bl	800678c <__hexdig_fun>
 80069d0:	f000 000f 	and.w	r0, r0, #15
 80069d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80069d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80069dc:	f10b 0b04 	add.w	fp, fp, #4
 80069e0:	9b05      	ldr	r3, [sp, #20]
 80069e2:	e00d      	b.n	8006a00 <__gethex+0x24a>
 80069e4:	9b05      	ldr	r3, [sp, #20]
 80069e6:	9a08      	ldr	r2, [sp, #32]
 80069e8:	4413      	add	r3, r2
 80069ea:	42bb      	cmp	r3, r7
 80069ec:	d3e1      	bcc.n	80069b2 <__gethex+0x1fc>
 80069ee:	4618      	mov	r0, r3
 80069f0:	9a01      	ldr	r2, [sp, #4]
 80069f2:	9903      	ldr	r1, [sp, #12]
 80069f4:	9309      	str	r3, [sp, #36]	; 0x24
 80069f6:	f000 ff47 	bl	8007888 <strncmp>
 80069fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d1d8      	bne.n	80069b2 <__gethex+0x1fc>
 8006a00:	461e      	mov	r6, r3
 8006a02:	e791      	b.n	8006928 <__gethex+0x172>
 8006a04:	1eb9      	subs	r1, r7, #2
 8006a06:	4628      	mov	r0, r5
 8006a08:	f000 fdbc 	bl	8007584 <__any_on>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d0b2      	beq.n	8006976 <__gethex+0x1c0>
 8006a10:	f04f 0a03 	mov.w	sl, #3
 8006a14:	e7b1      	b.n	800697a <__gethex+0x1c4>
 8006a16:	da09      	bge.n	8006a2c <__gethex+0x276>
 8006a18:	1bf7      	subs	r7, r6, r7
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	463a      	mov	r2, r7
 8006a1e:	9802      	ldr	r0, [sp, #8]
 8006a20:	f000 fbd2 	bl	80071c8 <__lshift>
 8006a24:	1be4      	subs	r4, r4, r7
 8006a26:	4605      	mov	r5, r0
 8006a28:	f100 0914 	add.w	r9, r0, #20
 8006a2c:	f04f 0a00 	mov.w	sl, #0
 8006a30:	e7a8      	b.n	8006984 <__gethex+0x1ce>
 8006a32:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006a36:	42a0      	cmp	r0, r4
 8006a38:	dd6a      	ble.n	8006b10 <__gethex+0x35a>
 8006a3a:	1b04      	subs	r4, r0, r4
 8006a3c:	42a6      	cmp	r6, r4
 8006a3e:	dc2e      	bgt.n	8006a9e <__gethex+0x2e8>
 8006a40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d022      	beq.n	8006a8e <__gethex+0x2d8>
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d024      	beq.n	8006a96 <__gethex+0x2e0>
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d115      	bne.n	8006a7c <__gethex+0x2c6>
 8006a50:	42a6      	cmp	r6, r4
 8006a52:	d113      	bne.n	8006a7c <__gethex+0x2c6>
 8006a54:	2e01      	cmp	r6, #1
 8006a56:	dc0b      	bgt.n	8006a70 <__gethex+0x2ba>
 8006a58:	9a06      	ldr	r2, [sp, #24]
 8006a5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	2301      	movs	r3, #1
 8006a62:	612b      	str	r3, [r5, #16]
 8006a64:	f8c9 3000 	str.w	r3, [r9]
 8006a68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a6a:	2762      	movs	r7, #98	; 0x62
 8006a6c:	601d      	str	r5, [r3, #0]
 8006a6e:	e72a      	b.n	80068c6 <__gethex+0x110>
 8006a70:	1e71      	subs	r1, r6, #1
 8006a72:	4628      	mov	r0, r5
 8006a74:	f000 fd86 	bl	8007584 <__any_on>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d1ed      	bne.n	8006a58 <__gethex+0x2a2>
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	9802      	ldr	r0, [sp, #8]
 8006a80:	f000 f9d7 	bl	8006e32 <_Bfree>
 8006a84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006a86:	2300      	movs	r3, #0
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	2750      	movs	r7, #80	; 0x50
 8006a8c:	e71b      	b.n	80068c6 <__gethex+0x110>
 8006a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0e1      	beq.n	8006a58 <__gethex+0x2a2>
 8006a94:	e7f2      	b.n	8006a7c <__gethex+0x2c6>
 8006a96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1dd      	bne.n	8006a58 <__gethex+0x2a2>
 8006a9c:	e7ee      	b.n	8006a7c <__gethex+0x2c6>
 8006a9e:	1e67      	subs	r7, r4, #1
 8006aa0:	f1ba 0f00 	cmp.w	sl, #0
 8006aa4:	d131      	bne.n	8006b0a <__gethex+0x354>
 8006aa6:	b127      	cbz	r7, 8006ab2 <__gethex+0x2fc>
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	4628      	mov	r0, r5
 8006aac:	f000 fd6a 	bl	8007584 <__any_on>
 8006ab0:	4682      	mov	sl, r0
 8006ab2:	117a      	asrs	r2, r7, #5
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	f007 071f 	and.w	r7, r7, #31
 8006aba:	fa03 f707 	lsl.w	r7, r3, r7
 8006abe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	421f      	tst	r7, r3
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	bf18      	it	ne
 8006aca:	f04a 0a02 	orrne.w	sl, sl, #2
 8006ace:	1b36      	subs	r6, r6, r4
 8006ad0:	f7ff fe22 	bl	8006718 <rshift>
 8006ad4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006ad8:	2702      	movs	r7, #2
 8006ada:	f1ba 0f00 	cmp.w	sl, #0
 8006ade:	d048      	beq.n	8006b72 <__gethex+0x3bc>
 8006ae0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d015      	beq.n	8006b14 <__gethex+0x35e>
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d017      	beq.n	8006b1c <__gethex+0x366>
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d109      	bne.n	8006b04 <__gethex+0x34e>
 8006af0:	f01a 0f02 	tst.w	sl, #2
 8006af4:	d006      	beq.n	8006b04 <__gethex+0x34e>
 8006af6:	f8d9 3000 	ldr.w	r3, [r9]
 8006afa:	ea4a 0a03 	orr.w	sl, sl, r3
 8006afe:	f01a 0f01 	tst.w	sl, #1
 8006b02:	d10e      	bne.n	8006b22 <__gethex+0x36c>
 8006b04:	f047 0710 	orr.w	r7, r7, #16
 8006b08:	e033      	b.n	8006b72 <__gethex+0x3bc>
 8006b0a:	f04f 0a01 	mov.w	sl, #1
 8006b0e:	e7d0      	b.n	8006ab2 <__gethex+0x2fc>
 8006b10:	2701      	movs	r7, #1
 8006b12:	e7e2      	b.n	8006ada <__gethex+0x324>
 8006b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b16:	f1c3 0301 	rsb	r3, r3, #1
 8006b1a:	9315      	str	r3, [sp, #84]	; 0x54
 8006b1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0f0      	beq.n	8006b04 <__gethex+0x34e>
 8006b22:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006b26:	f105 0314 	add.w	r3, r5, #20
 8006b2a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006b2e:	eb03 010a 	add.w	r1, r3, sl
 8006b32:	f04f 0c00 	mov.w	ip, #0
 8006b36:	4618      	mov	r0, r3
 8006b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b3c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006b40:	d01c      	beq.n	8006b7c <__gethex+0x3c6>
 8006b42:	3201      	adds	r2, #1
 8006b44:	6002      	str	r2, [r0, #0]
 8006b46:	2f02      	cmp	r7, #2
 8006b48:	f105 0314 	add.w	r3, r5, #20
 8006b4c:	d138      	bne.n	8006bc0 <__gethex+0x40a>
 8006b4e:	f8d8 2000 	ldr.w	r2, [r8]
 8006b52:	3a01      	subs	r2, #1
 8006b54:	42b2      	cmp	r2, r6
 8006b56:	d10a      	bne.n	8006b6e <__gethex+0x3b8>
 8006b58:	1171      	asrs	r1, r6, #5
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f006 061f 	and.w	r6, r6, #31
 8006b60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b64:	fa02 f606 	lsl.w	r6, r2, r6
 8006b68:	421e      	tst	r6, r3
 8006b6a:	bf18      	it	ne
 8006b6c:	4617      	movne	r7, r2
 8006b6e:	f047 0720 	orr.w	r7, r7, #32
 8006b72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b74:	601d      	str	r5, [r3, #0]
 8006b76:	9b06      	ldr	r3, [sp, #24]
 8006b78:	601c      	str	r4, [r3, #0]
 8006b7a:	e6a4      	b.n	80068c6 <__gethex+0x110>
 8006b7c:	4299      	cmp	r1, r3
 8006b7e:	f843 cc04 	str.w	ip, [r3, #-4]
 8006b82:	d8d8      	bhi.n	8006b36 <__gethex+0x380>
 8006b84:	68ab      	ldr	r3, [r5, #8]
 8006b86:	4599      	cmp	r9, r3
 8006b88:	db12      	blt.n	8006bb0 <__gethex+0x3fa>
 8006b8a:	6869      	ldr	r1, [r5, #4]
 8006b8c:	9802      	ldr	r0, [sp, #8]
 8006b8e:	3101      	adds	r1, #1
 8006b90:	f000 f91b 	bl	8006dca <_Balloc>
 8006b94:	692a      	ldr	r2, [r5, #16]
 8006b96:	3202      	adds	r2, #2
 8006b98:	f105 010c 	add.w	r1, r5, #12
 8006b9c:	4683      	mov	fp, r0
 8006b9e:	0092      	lsls	r2, r2, #2
 8006ba0:	300c      	adds	r0, #12
 8006ba2:	f000 f905 	bl	8006db0 <memcpy>
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	9802      	ldr	r0, [sp, #8]
 8006baa:	f000 f942 	bl	8006e32 <_Bfree>
 8006bae:	465d      	mov	r5, fp
 8006bb0:	692b      	ldr	r3, [r5, #16]
 8006bb2:	1c5a      	adds	r2, r3, #1
 8006bb4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006bb8:	612a      	str	r2, [r5, #16]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	615a      	str	r2, [r3, #20]
 8006bbe:	e7c2      	b.n	8006b46 <__gethex+0x390>
 8006bc0:	692a      	ldr	r2, [r5, #16]
 8006bc2:	454a      	cmp	r2, r9
 8006bc4:	dd0b      	ble.n	8006bde <__gethex+0x428>
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	4628      	mov	r0, r5
 8006bca:	f7ff fda5 	bl	8006718 <rshift>
 8006bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006bd2:	3401      	adds	r4, #1
 8006bd4:	42a3      	cmp	r3, r4
 8006bd6:	f6ff aed9 	blt.w	800698c <__gethex+0x1d6>
 8006bda:	2701      	movs	r7, #1
 8006bdc:	e7c7      	b.n	8006b6e <__gethex+0x3b8>
 8006bde:	f016 061f 	ands.w	r6, r6, #31
 8006be2:	d0fa      	beq.n	8006bda <__gethex+0x424>
 8006be4:	449a      	add	sl, r3
 8006be6:	f1c6 0620 	rsb	r6, r6, #32
 8006bea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006bee:	f000 f9b0 	bl	8006f52 <__hi0bits>
 8006bf2:	42b0      	cmp	r0, r6
 8006bf4:	dbe7      	blt.n	8006bc6 <__gethex+0x410>
 8006bf6:	e7f0      	b.n	8006bda <__gethex+0x424>

08006bf8 <L_shift>:
 8006bf8:	f1c2 0208 	rsb	r2, r2, #8
 8006bfc:	0092      	lsls	r2, r2, #2
 8006bfe:	b570      	push	{r4, r5, r6, lr}
 8006c00:	f1c2 0620 	rsb	r6, r2, #32
 8006c04:	6843      	ldr	r3, [r0, #4]
 8006c06:	6804      	ldr	r4, [r0, #0]
 8006c08:	fa03 f506 	lsl.w	r5, r3, r6
 8006c0c:	432c      	orrs	r4, r5
 8006c0e:	40d3      	lsrs	r3, r2
 8006c10:	6004      	str	r4, [r0, #0]
 8006c12:	f840 3f04 	str.w	r3, [r0, #4]!
 8006c16:	4288      	cmp	r0, r1
 8006c18:	d3f4      	bcc.n	8006c04 <L_shift+0xc>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}

08006c1c <__match>:
 8006c1c:	b530      	push	{r4, r5, lr}
 8006c1e:	6803      	ldr	r3, [r0, #0]
 8006c20:	3301      	adds	r3, #1
 8006c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c26:	b914      	cbnz	r4, 8006c2e <__match+0x12>
 8006c28:	6003      	str	r3, [r0, #0]
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	bd30      	pop	{r4, r5, pc}
 8006c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006c36:	2d19      	cmp	r5, #25
 8006c38:	bf98      	it	ls
 8006c3a:	3220      	addls	r2, #32
 8006c3c:	42a2      	cmp	r2, r4
 8006c3e:	d0f0      	beq.n	8006c22 <__match+0x6>
 8006c40:	2000      	movs	r0, #0
 8006c42:	e7f3      	b.n	8006c2c <__match+0x10>

08006c44 <__hexnan>:
 8006c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c48:	680b      	ldr	r3, [r1, #0]
 8006c4a:	6801      	ldr	r1, [r0, #0]
 8006c4c:	115f      	asrs	r7, r3, #5
 8006c4e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006c52:	f013 031f 	ands.w	r3, r3, #31
 8006c56:	b087      	sub	sp, #28
 8006c58:	bf18      	it	ne
 8006c5a:	3704      	addne	r7, #4
 8006c5c:	2500      	movs	r5, #0
 8006c5e:	1f3e      	subs	r6, r7, #4
 8006c60:	4682      	mov	sl, r0
 8006c62:	4690      	mov	r8, r2
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	f847 5c04 	str.w	r5, [r7, #-4]
 8006c6a:	46b1      	mov	r9, r6
 8006c6c:	4634      	mov	r4, r6
 8006c6e:	9502      	str	r5, [sp, #8]
 8006c70:	46ab      	mov	fp, r5
 8006c72:	784a      	ldrb	r2, [r1, #1]
 8006c74:	1c4b      	adds	r3, r1, #1
 8006c76:	9303      	str	r3, [sp, #12]
 8006c78:	b342      	cbz	r2, 8006ccc <__hexnan+0x88>
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	9105      	str	r1, [sp, #20]
 8006c7e:	9204      	str	r2, [sp, #16]
 8006c80:	f7ff fd84 	bl	800678c <__hexdig_fun>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d143      	bne.n	8006d10 <__hexnan+0xcc>
 8006c88:	9a04      	ldr	r2, [sp, #16]
 8006c8a:	9905      	ldr	r1, [sp, #20]
 8006c8c:	2a20      	cmp	r2, #32
 8006c8e:	d818      	bhi.n	8006cc2 <__hexnan+0x7e>
 8006c90:	9b02      	ldr	r3, [sp, #8]
 8006c92:	459b      	cmp	fp, r3
 8006c94:	dd13      	ble.n	8006cbe <__hexnan+0x7a>
 8006c96:	454c      	cmp	r4, r9
 8006c98:	d206      	bcs.n	8006ca8 <__hexnan+0x64>
 8006c9a:	2d07      	cmp	r5, #7
 8006c9c:	dc04      	bgt.n	8006ca8 <__hexnan+0x64>
 8006c9e:	462a      	mov	r2, r5
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f7ff ffa8 	bl	8006bf8 <L_shift>
 8006ca8:	4544      	cmp	r4, r8
 8006caa:	d944      	bls.n	8006d36 <__hexnan+0xf2>
 8006cac:	2300      	movs	r3, #0
 8006cae:	f1a4 0904 	sub.w	r9, r4, #4
 8006cb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8006cb6:	f8cd b008 	str.w	fp, [sp, #8]
 8006cba:	464c      	mov	r4, r9
 8006cbc:	461d      	mov	r5, r3
 8006cbe:	9903      	ldr	r1, [sp, #12]
 8006cc0:	e7d7      	b.n	8006c72 <__hexnan+0x2e>
 8006cc2:	2a29      	cmp	r2, #41	; 0x29
 8006cc4:	d14a      	bne.n	8006d5c <__hexnan+0x118>
 8006cc6:	3102      	adds	r1, #2
 8006cc8:	f8ca 1000 	str.w	r1, [sl]
 8006ccc:	f1bb 0f00 	cmp.w	fp, #0
 8006cd0:	d044      	beq.n	8006d5c <__hexnan+0x118>
 8006cd2:	454c      	cmp	r4, r9
 8006cd4:	d206      	bcs.n	8006ce4 <__hexnan+0xa0>
 8006cd6:	2d07      	cmp	r5, #7
 8006cd8:	dc04      	bgt.n	8006ce4 <__hexnan+0xa0>
 8006cda:	462a      	mov	r2, r5
 8006cdc:	4649      	mov	r1, r9
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff ff8a 	bl	8006bf8 <L_shift>
 8006ce4:	4544      	cmp	r4, r8
 8006ce6:	d928      	bls.n	8006d3a <__hexnan+0xf6>
 8006ce8:	4643      	mov	r3, r8
 8006cea:	f854 2b04 	ldr.w	r2, [r4], #4
 8006cee:	f843 2b04 	str.w	r2, [r3], #4
 8006cf2:	42a6      	cmp	r6, r4
 8006cf4:	d2f9      	bcs.n	8006cea <__hexnan+0xa6>
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f843 2b04 	str.w	r2, [r3], #4
 8006cfc:	429e      	cmp	r6, r3
 8006cfe:	d2fb      	bcs.n	8006cf8 <__hexnan+0xb4>
 8006d00:	6833      	ldr	r3, [r6, #0]
 8006d02:	b91b      	cbnz	r3, 8006d0c <__hexnan+0xc8>
 8006d04:	4546      	cmp	r6, r8
 8006d06:	d127      	bne.n	8006d58 <__hexnan+0x114>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	6033      	str	r3, [r6, #0]
 8006d0c:	2005      	movs	r0, #5
 8006d0e:	e026      	b.n	8006d5e <__hexnan+0x11a>
 8006d10:	3501      	adds	r5, #1
 8006d12:	2d08      	cmp	r5, #8
 8006d14:	f10b 0b01 	add.w	fp, fp, #1
 8006d18:	dd06      	ble.n	8006d28 <__hexnan+0xe4>
 8006d1a:	4544      	cmp	r4, r8
 8006d1c:	d9cf      	bls.n	8006cbe <__hexnan+0x7a>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d24:	2501      	movs	r5, #1
 8006d26:	3c04      	subs	r4, #4
 8006d28:	6822      	ldr	r2, [r4, #0]
 8006d2a:	f000 000f 	and.w	r0, r0, #15
 8006d2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006d32:	6020      	str	r0, [r4, #0]
 8006d34:	e7c3      	b.n	8006cbe <__hexnan+0x7a>
 8006d36:	2508      	movs	r5, #8
 8006d38:	e7c1      	b.n	8006cbe <__hexnan+0x7a>
 8006d3a:	9b01      	ldr	r3, [sp, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0df      	beq.n	8006d00 <__hexnan+0xbc>
 8006d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d44:	f1c3 0320 	rsb	r3, r3, #32
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006d50:	401a      	ands	r2, r3
 8006d52:	f847 2c04 	str.w	r2, [r7, #-4]
 8006d56:	e7d3      	b.n	8006d00 <__hexnan+0xbc>
 8006d58:	3e04      	subs	r6, #4
 8006d5a:	e7d1      	b.n	8006d00 <__hexnan+0xbc>
 8006d5c:	2004      	movs	r0, #4
 8006d5e:	b007      	add	sp, #28
 8006d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d64 <__locale_ctype_ptr_l>:
 8006d64:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006d68:	4770      	bx	lr

08006d6a <__localeconv_l>:
 8006d6a:	30f0      	adds	r0, #240	; 0xf0
 8006d6c:	4770      	bx	lr
	...

08006d70 <_localeconv_r>:
 8006d70:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <_localeconv_r+0x14>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6a18      	ldr	r0, [r3, #32]
 8006d76:	4b04      	ldr	r3, [pc, #16]	; (8006d88 <_localeconv_r+0x18>)
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	bf08      	it	eq
 8006d7c:	4618      	moveq	r0, r3
 8006d7e:	30f0      	adds	r0, #240	; 0xf0
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	20000380 	.word	0x20000380
 8006d88:	200003e4 	.word	0x200003e4

08006d8c <__ascii_mbtowc>:
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	b901      	cbnz	r1, 8006d92 <__ascii_mbtowc+0x6>
 8006d90:	a901      	add	r1, sp, #4
 8006d92:	b142      	cbz	r2, 8006da6 <__ascii_mbtowc+0x1a>
 8006d94:	b14b      	cbz	r3, 8006daa <__ascii_mbtowc+0x1e>
 8006d96:	7813      	ldrb	r3, [r2, #0]
 8006d98:	600b      	str	r3, [r1, #0]
 8006d9a:	7812      	ldrb	r2, [r2, #0]
 8006d9c:	1c10      	adds	r0, r2, #0
 8006d9e:	bf18      	it	ne
 8006da0:	2001      	movne	r0, #1
 8006da2:	b002      	add	sp, #8
 8006da4:	4770      	bx	lr
 8006da6:	4610      	mov	r0, r2
 8006da8:	e7fb      	b.n	8006da2 <__ascii_mbtowc+0x16>
 8006daa:	f06f 0001 	mvn.w	r0, #1
 8006dae:	e7f8      	b.n	8006da2 <__ascii_mbtowc+0x16>

08006db0 <memcpy>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	1e43      	subs	r3, r0, #1
 8006db4:	440a      	add	r2, r1
 8006db6:	4291      	cmp	r1, r2
 8006db8:	d100      	bne.n	8006dbc <memcpy+0xc>
 8006dba:	bd10      	pop	{r4, pc}
 8006dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dc4:	e7f7      	b.n	8006db6 <memcpy+0x6>

08006dc6 <__malloc_lock>:
 8006dc6:	4770      	bx	lr

08006dc8 <__malloc_unlock>:
 8006dc8:	4770      	bx	lr

08006dca <_Balloc>:
 8006dca:	b570      	push	{r4, r5, r6, lr}
 8006dcc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006dce:	4604      	mov	r4, r0
 8006dd0:	460e      	mov	r6, r1
 8006dd2:	b93d      	cbnz	r5, 8006de4 <_Balloc+0x1a>
 8006dd4:	2010      	movs	r0, #16
 8006dd6:	f7fd f875 	bl	8003ec4 <malloc>
 8006dda:	6260      	str	r0, [r4, #36]	; 0x24
 8006ddc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006de0:	6005      	str	r5, [r0, #0]
 8006de2:	60c5      	str	r5, [r0, #12]
 8006de4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006de6:	68eb      	ldr	r3, [r5, #12]
 8006de8:	b183      	cbz	r3, 8006e0c <_Balloc+0x42>
 8006dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006df2:	b9b8      	cbnz	r0, 8006e24 <_Balloc+0x5a>
 8006df4:	2101      	movs	r1, #1
 8006df6:	fa01 f506 	lsl.w	r5, r1, r6
 8006dfa:	1d6a      	adds	r2, r5, #5
 8006dfc:	0092      	lsls	r2, r2, #2
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f000 fbe1 	bl	80075c6 <_calloc_r>
 8006e04:	b160      	cbz	r0, 8006e20 <_Balloc+0x56>
 8006e06:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006e0a:	e00e      	b.n	8006e2a <_Balloc+0x60>
 8006e0c:	2221      	movs	r2, #33	; 0x21
 8006e0e:	2104      	movs	r1, #4
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fbd8 	bl	80075c6 <_calloc_r>
 8006e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e18:	60e8      	str	r0, [r5, #12]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e4      	bne.n	8006dea <_Balloc+0x20>
 8006e20:	2000      	movs	r0, #0
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	6802      	ldr	r2, [r0, #0]
 8006e26:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e30:	e7f7      	b.n	8006e22 <_Balloc+0x58>

08006e32 <_Bfree>:
 8006e32:	b570      	push	{r4, r5, r6, lr}
 8006e34:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e36:	4606      	mov	r6, r0
 8006e38:	460d      	mov	r5, r1
 8006e3a:	b93c      	cbnz	r4, 8006e4c <_Bfree+0x1a>
 8006e3c:	2010      	movs	r0, #16
 8006e3e:	f7fd f841 	bl	8003ec4 <malloc>
 8006e42:	6270      	str	r0, [r6, #36]	; 0x24
 8006e44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e48:	6004      	str	r4, [r0, #0]
 8006e4a:	60c4      	str	r4, [r0, #12]
 8006e4c:	b13d      	cbz	r5, 8006e5e <_Bfree+0x2c>
 8006e4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006e50:	686a      	ldr	r2, [r5, #4]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e58:	6029      	str	r1, [r5, #0]
 8006e5a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}

08006e60 <__multadd>:
 8006e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e64:	690d      	ldr	r5, [r1, #16]
 8006e66:	461f      	mov	r7, r3
 8006e68:	4606      	mov	r6, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	f101 0c14 	add.w	ip, r1, #20
 8006e70:	2300      	movs	r3, #0
 8006e72:	f8dc 0000 	ldr.w	r0, [ip]
 8006e76:	b281      	uxth	r1, r0
 8006e78:	fb02 7101 	mla	r1, r2, r1, r7
 8006e7c:	0c0f      	lsrs	r7, r1, #16
 8006e7e:	0c00      	lsrs	r0, r0, #16
 8006e80:	fb02 7000 	mla	r0, r2, r0, r7
 8006e84:	b289      	uxth	r1, r1
 8006e86:	3301      	adds	r3, #1
 8006e88:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006e8c:	429d      	cmp	r5, r3
 8006e8e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006e92:	f84c 1b04 	str.w	r1, [ip], #4
 8006e96:	dcec      	bgt.n	8006e72 <__multadd+0x12>
 8006e98:	b1d7      	cbz	r7, 8006ed0 <__multadd+0x70>
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	42ab      	cmp	r3, r5
 8006e9e:	dc12      	bgt.n	8006ec6 <__multadd+0x66>
 8006ea0:	6861      	ldr	r1, [r4, #4]
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	3101      	adds	r1, #1
 8006ea6:	f7ff ff90 	bl	8006dca <_Balloc>
 8006eaa:	6922      	ldr	r2, [r4, #16]
 8006eac:	3202      	adds	r2, #2
 8006eae:	f104 010c 	add.w	r1, r4, #12
 8006eb2:	4680      	mov	r8, r0
 8006eb4:	0092      	lsls	r2, r2, #2
 8006eb6:	300c      	adds	r0, #12
 8006eb8:	f7ff ff7a 	bl	8006db0 <memcpy>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f7ff ffb7 	bl	8006e32 <_Bfree>
 8006ec4:	4644      	mov	r4, r8
 8006ec6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006eca:	3501      	adds	r5, #1
 8006ecc:	615f      	str	r7, [r3, #20]
 8006ece:	6125      	str	r5, [r4, #16]
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ed6 <__s2b>:
 8006ed6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eda:	460c      	mov	r4, r1
 8006edc:	4615      	mov	r5, r2
 8006ede:	461f      	mov	r7, r3
 8006ee0:	2209      	movs	r2, #9
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006eea:	2100      	movs	r1, #0
 8006eec:	2201      	movs	r2, #1
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	db20      	blt.n	8006f34 <__s2b+0x5e>
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f7ff ff69 	bl	8006dca <_Balloc>
 8006ef8:	9b08      	ldr	r3, [sp, #32]
 8006efa:	6143      	str	r3, [r0, #20]
 8006efc:	2d09      	cmp	r5, #9
 8006efe:	f04f 0301 	mov.w	r3, #1
 8006f02:	6103      	str	r3, [r0, #16]
 8006f04:	dd19      	ble.n	8006f3a <__s2b+0x64>
 8006f06:	f104 0809 	add.w	r8, r4, #9
 8006f0a:	46c1      	mov	r9, r8
 8006f0c:	442c      	add	r4, r5
 8006f0e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006f12:	4601      	mov	r1, r0
 8006f14:	3b30      	subs	r3, #48	; 0x30
 8006f16:	220a      	movs	r2, #10
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f7ff ffa1 	bl	8006e60 <__multadd>
 8006f1e:	45a1      	cmp	r9, r4
 8006f20:	d1f5      	bne.n	8006f0e <__s2b+0x38>
 8006f22:	eb08 0405 	add.w	r4, r8, r5
 8006f26:	3c08      	subs	r4, #8
 8006f28:	1b2d      	subs	r5, r5, r4
 8006f2a:	1963      	adds	r3, r4, r5
 8006f2c:	42bb      	cmp	r3, r7
 8006f2e:	db07      	blt.n	8006f40 <__s2b+0x6a>
 8006f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f34:	0052      	lsls	r2, r2, #1
 8006f36:	3101      	adds	r1, #1
 8006f38:	e7d9      	b.n	8006eee <__s2b+0x18>
 8006f3a:	340a      	adds	r4, #10
 8006f3c:	2509      	movs	r5, #9
 8006f3e:	e7f3      	b.n	8006f28 <__s2b+0x52>
 8006f40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f44:	4601      	mov	r1, r0
 8006f46:	3b30      	subs	r3, #48	; 0x30
 8006f48:	220a      	movs	r2, #10
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f7ff ff88 	bl	8006e60 <__multadd>
 8006f50:	e7eb      	b.n	8006f2a <__s2b+0x54>

08006f52 <__hi0bits>:
 8006f52:	0c02      	lsrs	r2, r0, #16
 8006f54:	0412      	lsls	r2, r2, #16
 8006f56:	4603      	mov	r3, r0
 8006f58:	b9b2      	cbnz	r2, 8006f88 <__hi0bits+0x36>
 8006f5a:	0403      	lsls	r3, r0, #16
 8006f5c:	2010      	movs	r0, #16
 8006f5e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006f62:	bf04      	itt	eq
 8006f64:	021b      	lsleq	r3, r3, #8
 8006f66:	3008      	addeq	r0, #8
 8006f68:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006f6c:	bf04      	itt	eq
 8006f6e:	011b      	lsleq	r3, r3, #4
 8006f70:	3004      	addeq	r0, #4
 8006f72:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006f76:	bf04      	itt	eq
 8006f78:	009b      	lsleq	r3, r3, #2
 8006f7a:	3002      	addeq	r0, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	db06      	blt.n	8006f8e <__hi0bits+0x3c>
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	d503      	bpl.n	8006f8c <__hi0bits+0x3a>
 8006f84:	3001      	adds	r0, #1
 8006f86:	4770      	bx	lr
 8006f88:	2000      	movs	r0, #0
 8006f8a:	e7e8      	b.n	8006f5e <__hi0bits+0xc>
 8006f8c:	2020      	movs	r0, #32
 8006f8e:	4770      	bx	lr

08006f90 <__lo0bits>:
 8006f90:	6803      	ldr	r3, [r0, #0]
 8006f92:	f013 0207 	ands.w	r2, r3, #7
 8006f96:	4601      	mov	r1, r0
 8006f98:	d00b      	beq.n	8006fb2 <__lo0bits+0x22>
 8006f9a:	07da      	lsls	r2, r3, #31
 8006f9c:	d423      	bmi.n	8006fe6 <__lo0bits+0x56>
 8006f9e:	0798      	lsls	r0, r3, #30
 8006fa0:	bf49      	itett	mi
 8006fa2:	085b      	lsrmi	r3, r3, #1
 8006fa4:	089b      	lsrpl	r3, r3, #2
 8006fa6:	2001      	movmi	r0, #1
 8006fa8:	600b      	strmi	r3, [r1, #0]
 8006faa:	bf5c      	itt	pl
 8006fac:	600b      	strpl	r3, [r1, #0]
 8006fae:	2002      	movpl	r0, #2
 8006fb0:	4770      	bx	lr
 8006fb2:	b298      	uxth	r0, r3
 8006fb4:	b9a8      	cbnz	r0, 8006fe2 <__lo0bits+0x52>
 8006fb6:	0c1b      	lsrs	r3, r3, #16
 8006fb8:	2010      	movs	r0, #16
 8006fba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006fbe:	bf04      	itt	eq
 8006fc0:	0a1b      	lsreq	r3, r3, #8
 8006fc2:	3008      	addeq	r0, #8
 8006fc4:	071a      	lsls	r2, r3, #28
 8006fc6:	bf04      	itt	eq
 8006fc8:	091b      	lsreq	r3, r3, #4
 8006fca:	3004      	addeq	r0, #4
 8006fcc:	079a      	lsls	r2, r3, #30
 8006fce:	bf04      	itt	eq
 8006fd0:	089b      	lsreq	r3, r3, #2
 8006fd2:	3002      	addeq	r0, #2
 8006fd4:	07da      	lsls	r2, r3, #31
 8006fd6:	d402      	bmi.n	8006fde <__lo0bits+0x4e>
 8006fd8:	085b      	lsrs	r3, r3, #1
 8006fda:	d006      	beq.n	8006fea <__lo0bits+0x5a>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	600b      	str	r3, [r1, #0]
 8006fe0:	4770      	bx	lr
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	e7e9      	b.n	8006fba <__lo0bits+0x2a>
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	4770      	bx	lr
 8006fea:	2020      	movs	r0, #32
 8006fec:	4770      	bx	lr

08006fee <__i2b>:
 8006fee:	b510      	push	{r4, lr}
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	f7ff fee9 	bl	8006dca <_Balloc>
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	6144      	str	r4, [r0, #20]
 8006ffc:	6102      	str	r2, [r0, #16]
 8006ffe:	bd10      	pop	{r4, pc}

08007000 <__multiply>:
 8007000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	4614      	mov	r4, r2
 8007006:	690a      	ldr	r2, [r1, #16]
 8007008:	6923      	ldr	r3, [r4, #16]
 800700a:	429a      	cmp	r2, r3
 800700c:	bfb8      	it	lt
 800700e:	460b      	movlt	r3, r1
 8007010:	4688      	mov	r8, r1
 8007012:	bfbc      	itt	lt
 8007014:	46a0      	movlt	r8, r4
 8007016:	461c      	movlt	r4, r3
 8007018:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800701c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007020:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007024:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007028:	eb07 0609 	add.w	r6, r7, r9
 800702c:	42b3      	cmp	r3, r6
 800702e:	bfb8      	it	lt
 8007030:	3101      	addlt	r1, #1
 8007032:	f7ff feca 	bl	8006dca <_Balloc>
 8007036:	f100 0514 	add.w	r5, r0, #20
 800703a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800703e:	462b      	mov	r3, r5
 8007040:	2200      	movs	r2, #0
 8007042:	4573      	cmp	r3, lr
 8007044:	d316      	bcc.n	8007074 <__multiply+0x74>
 8007046:	f104 0214 	add.w	r2, r4, #20
 800704a:	f108 0114 	add.w	r1, r8, #20
 800704e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007052:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	9b00      	ldr	r3, [sp, #0]
 800705a:	9201      	str	r2, [sp, #4]
 800705c:	4293      	cmp	r3, r2
 800705e:	d80c      	bhi.n	800707a <__multiply+0x7a>
 8007060:	2e00      	cmp	r6, #0
 8007062:	dd03      	ble.n	800706c <__multiply+0x6c>
 8007064:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007068:	2b00      	cmp	r3, #0
 800706a:	d05d      	beq.n	8007128 <__multiply+0x128>
 800706c:	6106      	str	r6, [r0, #16]
 800706e:	b003      	add	sp, #12
 8007070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007074:	f843 2b04 	str.w	r2, [r3], #4
 8007078:	e7e3      	b.n	8007042 <__multiply+0x42>
 800707a:	f8b2 b000 	ldrh.w	fp, [r2]
 800707e:	f1bb 0f00 	cmp.w	fp, #0
 8007082:	d023      	beq.n	80070cc <__multiply+0xcc>
 8007084:	4689      	mov	r9, r1
 8007086:	46ac      	mov	ip, r5
 8007088:	f04f 0800 	mov.w	r8, #0
 800708c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007090:	f8dc a000 	ldr.w	sl, [ip]
 8007094:	b2a3      	uxth	r3, r4
 8007096:	fa1f fa8a 	uxth.w	sl, sl
 800709a:	fb0b a303 	mla	r3, fp, r3, sl
 800709e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80070a2:	f8dc 4000 	ldr.w	r4, [ip]
 80070a6:	4443      	add	r3, r8
 80070a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80070ac:	fb0b 840a 	mla	r4, fp, sl, r8
 80070b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80070b4:	46e2      	mov	sl, ip
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80070bc:	454f      	cmp	r7, r9
 80070be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80070c2:	f84a 3b04 	str.w	r3, [sl], #4
 80070c6:	d82b      	bhi.n	8007120 <__multiply+0x120>
 80070c8:	f8cc 8004 	str.w	r8, [ip, #4]
 80070cc:	9b01      	ldr	r3, [sp, #4]
 80070ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80070d2:	3204      	adds	r2, #4
 80070d4:	f1ba 0f00 	cmp.w	sl, #0
 80070d8:	d020      	beq.n	800711c <__multiply+0x11c>
 80070da:	682b      	ldr	r3, [r5, #0]
 80070dc:	4689      	mov	r9, r1
 80070de:	46a8      	mov	r8, r5
 80070e0:	f04f 0b00 	mov.w	fp, #0
 80070e4:	f8b9 c000 	ldrh.w	ip, [r9]
 80070e8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80070ec:	fb0a 440c 	mla	r4, sl, ip, r4
 80070f0:	445c      	add	r4, fp
 80070f2:	46c4      	mov	ip, r8
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80070fa:	f84c 3b04 	str.w	r3, [ip], #4
 80070fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8007102:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007106:	0c1b      	lsrs	r3, r3, #16
 8007108:	fb0a b303 	mla	r3, sl, r3, fp
 800710c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007110:	454f      	cmp	r7, r9
 8007112:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007116:	d805      	bhi.n	8007124 <__multiply+0x124>
 8007118:	f8c8 3004 	str.w	r3, [r8, #4]
 800711c:	3504      	adds	r5, #4
 800711e:	e79b      	b.n	8007058 <__multiply+0x58>
 8007120:	46d4      	mov	ip, sl
 8007122:	e7b3      	b.n	800708c <__multiply+0x8c>
 8007124:	46e0      	mov	r8, ip
 8007126:	e7dd      	b.n	80070e4 <__multiply+0xe4>
 8007128:	3e01      	subs	r6, #1
 800712a:	e799      	b.n	8007060 <__multiply+0x60>

0800712c <__pow5mult>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	4615      	mov	r5, r2
 8007132:	f012 0203 	ands.w	r2, r2, #3
 8007136:	4606      	mov	r6, r0
 8007138:	460f      	mov	r7, r1
 800713a:	d007      	beq.n	800714c <__pow5mult+0x20>
 800713c:	3a01      	subs	r2, #1
 800713e:	4c21      	ldr	r4, [pc, #132]	; (80071c4 <__pow5mult+0x98>)
 8007140:	2300      	movs	r3, #0
 8007142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007146:	f7ff fe8b 	bl	8006e60 <__multadd>
 800714a:	4607      	mov	r7, r0
 800714c:	10ad      	asrs	r5, r5, #2
 800714e:	d035      	beq.n	80071bc <__pow5mult+0x90>
 8007150:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007152:	b93c      	cbnz	r4, 8007164 <__pow5mult+0x38>
 8007154:	2010      	movs	r0, #16
 8007156:	f7fc feb5 	bl	8003ec4 <malloc>
 800715a:	6270      	str	r0, [r6, #36]	; 0x24
 800715c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007160:	6004      	str	r4, [r0, #0]
 8007162:	60c4      	str	r4, [r0, #12]
 8007164:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800716c:	b94c      	cbnz	r4, 8007182 <__pow5mult+0x56>
 800716e:	f240 2171 	movw	r1, #625	; 0x271
 8007172:	4630      	mov	r0, r6
 8007174:	f7ff ff3b 	bl	8006fee <__i2b>
 8007178:	2300      	movs	r3, #0
 800717a:	f8c8 0008 	str.w	r0, [r8, #8]
 800717e:	4604      	mov	r4, r0
 8007180:	6003      	str	r3, [r0, #0]
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	07eb      	lsls	r3, r5, #31
 8007188:	d50a      	bpl.n	80071a0 <__pow5mult+0x74>
 800718a:	4639      	mov	r1, r7
 800718c:	4622      	mov	r2, r4
 800718e:	4630      	mov	r0, r6
 8007190:	f7ff ff36 	bl	8007000 <__multiply>
 8007194:	4639      	mov	r1, r7
 8007196:	4681      	mov	r9, r0
 8007198:	4630      	mov	r0, r6
 800719a:	f7ff fe4a 	bl	8006e32 <_Bfree>
 800719e:	464f      	mov	r7, r9
 80071a0:	106d      	asrs	r5, r5, #1
 80071a2:	d00b      	beq.n	80071bc <__pow5mult+0x90>
 80071a4:	6820      	ldr	r0, [r4, #0]
 80071a6:	b938      	cbnz	r0, 80071b8 <__pow5mult+0x8c>
 80071a8:	4622      	mov	r2, r4
 80071aa:	4621      	mov	r1, r4
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7ff ff27 	bl	8007000 <__multiply>
 80071b2:	6020      	str	r0, [r4, #0]
 80071b4:	f8c0 8000 	str.w	r8, [r0]
 80071b8:	4604      	mov	r4, r0
 80071ba:	e7e4      	b.n	8007186 <__pow5mult+0x5a>
 80071bc:	4638      	mov	r0, r7
 80071be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c2:	bf00      	nop
 80071c4:	08007b50 	.word	0x08007b50

080071c8 <__lshift>:
 80071c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071cc:	460c      	mov	r4, r1
 80071ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071d2:	6923      	ldr	r3, [r4, #16]
 80071d4:	6849      	ldr	r1, [r1, #4]
 80071d6:	eb0a 0903 	add.w	r9, sl, r3
 80071da:	68a3      	ldr	r3, [r4, #8]
 80071dc:	4607      	mov	r7, r0
 80071de:	4616      	mov	r6, r2
 80071e0:	f109 0501 	add.w	r5, r9, #1
 80071e4:	42ab      	cmp	r3, r5
 80071e6:	db32      	blt.n	800724e <__lshift+0x86>
 80071e8:	4638      	mov	r0, r7
 80071ea:	f7ff fdee 	bl	8006dca <_Balloc>
 80071ee:	2300      	movs	r3, #0
 80071f0:	4680      	mov	r8, r0
 80071f2:	f100 0114 	add.w	r1, r0, #20
 80071f6:	461a      	mov	r2, r3
 80071f8:	4553      	cmp	r3, sl
 80071fa:	db2b      	blt.n	8007254 <__lshift+0x8c>
 80071fc:	6920      	ldr	r0, [r4, #16]
 80071fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007202:	f104 0314 	add.w	r3, r4, #20
 8007206:	f016 021f 	ands.w	r2, r6, #31
 800720a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800720e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007212:	d025      	beq.n	8007260 <__lshift+0x98>
 8007214:	f1c2 0e20 	rsb	lr, r2, #32
 8007218:	2000      	movs	r0, #0
 800721a:	681e      	ldr	r6, [r3, #0]
 800721c:	468a      	mov	sl, r1
 800721e:	4096      	lsls	r6, r2
 8007220:	4330      	orrs	r0, r6
 8007222:	f84a 0b04 	str.w	r0, [sl], #4
 8007226:	f853 0b04 	ldr.w	r0, [r3], #4
 800722a:	459c      	cmp	ip, r3
 800722c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007230:	d814      	bhi.n	800725c <__lshift+0x94>
 8007232:	6048      	str	r0, [r1, #4]
 8007234:	b108      	cbz	r0, 800723a <__lshift+0x72>
 8007236:	f109 0502 	add.w	r5, r9, #2
 800723a:	3d01      	subs	r5, #1
 800723c:	4638      	mov	r0, r7
 800723e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007242:	4621      	mov	r1, r4
 8007244:	f7ff fdf5 	bl	8006e32 <_Bfree>
 8007248:	4640      	mov	r0, r8
 800724a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724e:	3101      	adds	r1, #1
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	e7c7      	b.n	80071e4 <__lshift+0x1c>
 8007254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007258:	3301      	adds	r3, #1
 800725a:	e7cd      	b.n	80071f8 <__lshift+0x30>
 800725c:	4651      	mov	r1, sl
 800725e:	e7dc      	b.n	800721a <__lshift+0x52>
 8007260:	3904      	subs	r1, #4
 8007262:	f853 2b04 	ldr.w	r2, [r3], #4
 8007266:	f841 2f04 	str.w	r2, [r1, #4]!
 800726a:	459c      	cmp	ip, r3
 800726c:	d8f9      	bhi.n	8007262 <__lshift+0x9a>
 800726e:	e7e4      	b.n	800723a <__lshift+0x72>

08007270 <__mcmp>:
 8007270:	6903      	ldr	r3, [r0, #16]
 8007272:	690a      	ldr	r2, [r1, #16]
 8007274:	1a9b      	subs	r3, r3, r2
 8007276:	b530      	push	{r4, r5, lr}
 8007278:	d10c      	bne.n	8007294 <__mcmp+0x24>
 800727a:	0092      	lsls	r2, r2, #2
 800727c:	3014      	adds	r0, #20
 800727e:	3114      	adds	r1, #20
 8007280:	1884      	adds	r4, r0, r2
 8007282:	4411      	add	r1, r2
 8007284:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007288:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800728c:	4295      	cmp	r5, r2
 800728e:	d003      	beq.n	8007298 <__mcmp+0x28>
 8007290:	d305      	bcc.n	800729e <__mcmp+0x2e>
 8007292:	2301      	movs	r3, #1
 8007294:	4618      	mov	r0, r3
 8007296:	bd30      	pop	{r4, r5, pc}
 8007298:	42a0      	cmp	r0, r4
 800729a:	d3f3      	bcc.n	8007284 <__mcmp+0x14>
 800729c:	e7fa      	b.n	8007294 <__mcmp+0x24>
 800729e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072a2:	e7f7      	b.n	8007294 <__mcmp+0x24>

080072a4 <__mdiff>:
 80072a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a8:	460d      	mov	r5, r1
 80072aa:	4607      	mov	r7, r0
 80072ac:	4611      	mov	r1, r2
 80072ae:	4628      	mov	r0, r5
 80072b0:	4614      	mov	r4, r2
 80072b2:	f7ff ffdd 	bl	8007270 <__mcmp>
 80072b6:	1e06      	subs	r6, r0, #0
 80072b8:	d108      	bne.n	80072cc <__mdiff+0x28>
 80072ba:	4631      	mov	r1, r6
 80072bc:	4638      	mov	r0, r7
 80072be:	f7ff fd84 	bl	8006dca <_Balloc>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80072c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072cc:	bfa4      	itt	ge
 80072ce:	4623      	movge	r3, r4
 80072d0:	462c      	movge	r4, r5
 80072d2:	4638      	mov	r0, r7
 80072d4:	6861      	ldr	r1, [r4, #4]
 80072d6:	bfa6      	itte	ge
 80072d8:	461d      	movge	r5, r3
 80072da:	2600      	movge	r6, #0
 80072dc:	2601      	movlt	r6, #1
 80072de:	f7ff fd74 	bl	8006dca <_Balloc>
 80072e2:	692b      	ldr	r3, [r5, #16]
 80072e4:	60c6      	str	r6, [r0, #12]
 80072e6:	6926      	ldr	r6, [r4, #16]
 80072e8:	f105 0914 	add.w	r9, r5, #20
 80072ec:	f104 0214 	add.w	r2, r4, #20
 80072f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80072f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80072f8:	f100 0514 	add.w	r5, r0, #20
 80072fc:	f04f 0e00 	mov.w	lr, #0
 8007300:	f852 ab04 	ldr.w	sl, [r2], #4
 8007304:	f859 4b04 	ldr.w	r4, [r9], #4
 8007308:	fa1e f18a 	uxtah	r1, lr, sl
 800730c:	b2a3      	uxth	r3, r4
 800730e:	1ac9      	subs	r1, r1, r3
 8007310:	0c23      	lsrs	r3, r4, #16
 8007312:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007316:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800731a:	b289      	uxth	r1, r1
 800731c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007320:	45c8      	cmp	r8, r9
 8007322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007326:	4694      	mov	ip, r2
 8007328:	f845 3b04 	str.w	r3, [r5], #4
 800732c:	d8e8      	bhi.n	8007300 <__mdiff+0x5c>
 800732e:	45bc      	cmp	ip, r7
 8007330:	d304      	bcc.n	800733c <__mdiff+0x98>
 8007332:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007336:	b183      	cbz	r3, 800735a <__mdiff+0xb6>
 8007338:	6106      	str	r6, [r0, #16]
 800733a:	e7c5      	b.n	80072c8 <__mdiff+0x24>
 800733c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007340:	fa1e f381 	uxtah	r3, lr, r1
 8007344:	141a      	asrs	r2, r3, #16
 8007346:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800734a:	b29b      	uxth	r3, r3
 800734c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007350:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007354:	f845 3b04 	str.w	r3, [r5], #4
 8007358:	e7e9      	b.n	800732e <__mdiff+0x8a>
 800735a:	3e01      	subs	r6, #1
 800735c:	e7e9      	b.n	8007332 <__mdiff+0x8e>
	...

08007360 <__ulp>:
 8007360:	4b12      	ldr	r3, [pc, #72]	; (80073ac <__ulp+0x4c>)
 8007362:	ee10 2a90 	vmov	r2, s1
 8007366:	401a      	ands	r2, r3
 8007368:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800736c:	2b00      	cmp	r3, #0
 800736e:	dd04      	ble.n	800737a <__ulp+0x1a>
 8007370:	2000      	movs	r0, #0
 8007372:	4619      	mov	r1, r3
 8007374:	ec41 0b10 	vmov	d0, r0, r1
 8007378:	4770      	bx	lr
 800737a:	425b      	negs	r3, r3
 800737c:	151b      	asrs	r3, r3, #20
 800737e:	2b13      	cmp	r3, #19
 8007380:	f04f 0000 	mov.w	r0, #0
 8007384:	f04f 0100 	mov.w	r1, #0
 8007388:	dc04      	bgt.n	8007394 <__ulp+0x34>
 800738a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800738e:	fa42 f103 	asr.w	r1, r2, r3
 8007392:	e7ef      	b.n	8007374 <__ulp+0x14>
 8007394:	3b14      	subs	r3, #20
 8007396:	2b1e      	cmp	r3, #30
 8007398:	f04f 0201 	mov.w	r2, #1
 800739c:	bfda      	itte	le
 800739e:	f1c3 031f 	rsble	r3, r3, #31
 80073a2:	fa02 f303 	lslle.w	r3, r2, r3
 80073a6:	4613      	movgt	r3, r2
 80073a8:	4618      	mov	r0, r3
 80073aa:	e7e3      	b.n	8007374 <__ulp+0x14>
 80073ac:	7ff00000 	.word	0x7ff00000

080073b0 <__b2d>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	6905      	ldr	r5, [r0, #16]
 80073b4:	f100 0714 	add.w	r7, r0, #20
 80073b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80073bc:	1f2e      	subs	r6, r5, #4
 80073be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80073c2:	4620      	mov	r0, r4
 80073c4:	f7ff fdc5 	bl	8006f52 <__hi0bits>
 80073c8:	f1c0 0320 	rsb	r3, r0, #32
 80073cc:	280a      	cmp	r0, #10
 80073ce:	600b      	str	r3, [r1, #0]
 80073d0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007448 <__b2d+0x98>
 80073d4:	dc14      	bgt.n	8007400 <__b2d+0x50>
 80073d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80073da:	fa24 f10e 	lsr.w	r1, r4, lr
 80073de:	42b7      	cmp	r7, r6
 80073e0:	ea41 030c 	orr.w	r3, r1, ip
 80073e4:	bf34      	ite	cc
 80073e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80073ea:	2100      	movcs	r1, #0
 80073ec:	3015      	adds	r0, #21
 80073ee:	fa04 f000 	lsl.w	r0, r4, r0
 80073f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80073f6:	ea40 0201 	orr.w	r2, r0, r1
 80073fa:	ec43 2b10 	vmov	d0, r2, r3
 80073fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007400:	42b7      	cmp	r7, r6
 8007402:	bf3a      	itte	cc
 8007404:	f1a5 0608 	subcc.w	r6, r5, #8
 8007408:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800740c:	2100      	movcs	r1, #0
 800740e:	380b      	subs	r0, #11
 8007410:	d015      	beq.n	800743e <__b2d+0x8e>
 8007412:	4084      	lsls	r4, r0
 8007414:	f1c0 0520 	rsb	r5, r0, #32
 8007418:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800741c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007420:	42be      	cmp	r6, r7
 8007422:	fa21 fc05 	lsr.w	ip, r1, r5
 8007426:	ea44 030c 	orr.w	r3, r4, ip
 800742a:	bf8c      	ite	hi
 800742c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007430:	2400      	movls	r4, #0
 8007432:	fa01 f000 	lsl.w	r0, r1, r0
 8007436:	40ec      	lsrs	r4, r5
 8007438:	ea40 0204 	orr.w	r2, r0, r4
 800743c:	e7dd      	b.n	80073fa <__b2d+0x4a>
 800743e:	ea44 030c 	orr.w	r3, r4, ip
 8007442:	460a      	mov	r2, r1
 8007444:	e7d9      	b.n	80073fa <__b2d+0x4a>
 8007446:	bf00      	nop
 8007448:	3ff00000 	.word	0x3ff00000

0800744c <__d2b>:
 800744c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007450:	460e      	mov	r6, r1
 8007452:	2101      	movs	r1, #1
 8007454:	ec59 8b10 	vmov	r8, r9, d0
 8007458:	4615      	mov	r5, r2
 800745a:	f7ff fcb6 	bl	8006dca <_Balloc>
 800745e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007462:	4607      	mov	r7, r0
 8007464:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007468:	bb34      	cbnz	r4, 80074b8 <__d2b+0x6c>
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	f1b8 0300 	subs.w	r3, r8, #0
 8007470:	d027      	beq.n	80074c2 <__d2b+0x76>
 8007472:	a802      	add	r0, sp, #8
 8007474:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007478:	f7ff fd8a 	bl	8006f90 <__lo0bits>
 800747c:	9900      	ldr	r1, [sp, #0]
 800747e:	b1f0      	cbz	r0, 80074be <__d2b+0x72>
 8007480:	9a01      	ldr	r2, [sp, #4]
 8007482:	f1c0 0320 	rsb	r3, r0, #32
 8007486:	fa02 f303 	lsl.w	r3, r2, r3
 800748a:	430b      	orrs	r3, r1
 800748c:	40c2      	lsrs	r2, r0
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	9201      	str	r2, [sp, #4]
 8007492:	9b01      	ldr	r3, [sp, #4]
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	2b00      	cmp	r3, #0
 8007498:	bf14      	ite	ne
 800749a:	2102      	movne	r1, #2
 800749c:	2101      	moveq	r1, #1
 800749e:	6139      	str	r1, [r7, #16]
 80074a0:	b1c4      	cbz	r4, 80074d4 <__d2b+0x88>
 80074a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80074a6:	4404      	add	r4, r0
 80074a8:	6034      	str	r4, [r6, #0]
 80074aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074ae:	6028      	str	r0, [r5, #0]
 80074b0:	4638      	mov	r0, r7
 80074b2:	b003      	add	sp, #12
 80074b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074bc:	e7d5      	b.n	800746a <__d2b+0x1e>
 80074be:	6179      	str	r1, [r7, #20]
 80074c0:	e7e7      	b.n	8007492 <__d2b+0x46>
 80074c2:	a801      	add	r0, sp, #4
 80074c4:	f7ff fd64 	bl	8006f90 <__lo0bits>
 80074c8:	9b01      	ldr	r3, [sp, #4]
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	2101      	movs	r1, #1
 80074ce:	6139      	str	r1, [r7, #16]
 80074d0:	3020      	adds	r0, #32
 80074d2:	e7e5      	b.n	80074a0 <__d2b+0x54>
 80074d4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80074d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074dc:	6030      	str	r0, [r6, #0]
 80074de:	6918      	ldr	r0, [r3, #16]
 80074e0:	f7ff fd37 	bl	8006f52 <__hi0bits>
 80074e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80074e8:	e7e1      	b.n	80074ae <__d2b+0x62>

080074ea <__ratio>:
 80074ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ee:	4688      	mov	r8, r1
 80074f0:	4669      	mov	r1, sp
 80074f2:	4681      	mov	r9, r0
 80074f4:	f7ff ff5c 	bl	80073b0 <__b2d>
 80074f8:	a901      	add	r1, sp, #4
 80074fa:	4640      	mov	r0, r8
 80074fc:	ec57 6b10 	vmov	r6, r7, d0
 8007500:	f7ff ff56 	bl	80073b0 <__b2d>
 8007504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007508:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800750c:	eba3 0c02 	sub.w	ip, r3, r2
 8007510:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007514:	1a9b      	subs	r3, r3, r2
 8007516:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800751a:	ec5b ab10 	vmov	sl, fp, d0
 800751e:	2b00      	cmp	r3, #0
 8007520:	bfce      	itee	gt
 8007522:	463a      	movgt	r2, r7
 8007524:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007528:	465a      	movle	r2, fp
 800752a:	4659      	mov	r1, fp
 800752c:	463d      	mov	r5, r7
 800752e:	bfd4      	ite	le
 8007530:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007534:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007538:	4630      	mov	r0, r6
 800753a:	ee10 2a10 	vmov	r2, s0
 800753e:	460b      	mov	r3, r1
 8007540:	4629      	mov	r1, r5
 8007542:	f7f9 f983 	bl	800084c <__aeabi_ddiv>
 8007546:	ec41 0b10 	vmov	d0, r0, r1
 800754a:	b003      	add	sp, #12
 800754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007550 <__copybits>:
 8007550:	3901      	subs	r1, #1
 8007552:	b510      	push	{r4, lr}
 8007554:	1149      	asrs	r1, r1, #5
 8007556:	6914      	ldr	r4, [r2, #16]
 8007558:	3101      	adds	r1, #1
 800755a:	f102 0314 	add.w	r3, r2, #20
 800755e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007562:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007566:	42a3      	cmp	r3, r4
 8007568:	4602      	mov	r2, r0
 800756a:	d303      	bcc.n	8007574 <__copybits+0x24>
 800756c:	2300      	movs	r3, #0
 800756e:	428a      	cmp	r2, r1
 8007570:	d305      	bcc.n	800757e <__copybits+0x2e>
 8007572:	bd10      	pop	{r4, pc}
 8007574:	f853 2b04 	ldr.w	r2, [r3], #4
 8007578:	f840 2b04 	str.w	r2, [r0], #4
 800757c:	e7f3      	b.n	8007566 <__copybits+0x16>
 800757e:	f842 3b04 	str.w	r3, [r2], #4
 8007582:	e7f4      	b.n	800756e <__copybits+0x1e>

08007584 <__any_on>:
 8007584:	f100 0214 	add.w	r2, r0, #20
 8007588:	6900      	ldr	r0, [r0, #16]
 800758a:	114b      	asrs	r3, r1, #5
 800758c:	4298      	cmp	r0, r3
 800758e:	b510      	push	{r4, lr}
 8007590:	db11      	blt.n	80075b6 <__any_on+0x32>
 8007592:	dd0a      	ble.n	80075aa <__any_on+0x26>
 8007594:	f011 011f 	ands.w	r1, r1, #31
 8007598:	d007      	beq.n	80075aa <__any_on+0x26>
 800759a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800759e:	fa24 f001 	lsr.w	r0, r4, r1
 80075a2:	fa00 f101 	lsl.w	r1, r0, r1
 80075a6:	428c      	cmp	r4, r1
 80075a8:	d10b      	bne.n	80075c2 <__any_on+0x3e>
 80075aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d803      	bhi.n	80075ba <__any_on+0x36>
 80075b2:	2000      	movs	r0, #0
 80075b4:	bd10      	pop	{r4, pc}
 80075b6:	4603      	mov	r3, r0
 80075b8:	e7f7      	b.n	80075aa <__any_on+0x26>
 80075ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075be:	2900      	cmp	r1, #0
 80075c0:	d0f5      	beq.n	80075ae <__any_on+0x2a>
 80075c2:	2001      	movs	r0, #1
 80075c4:	e7f6      	b.n	80075b4 <__any_on+0x30>

080075c6 <_calloc_r>:
 80075c6:	b538      	push	{r3, r4, r5, lr}
 80075c8:	fb02 f401 	mul.w	r4, r2, r1
 80075cc:	4621      	mov	r1, r4
 80075ce:	f7fc fcdf 	bl	8003f90 <_malloc_r>
 80075d2:	4605      	mov	r5, r0
 80075d4:	b118      	cbz	r0, 80075de <_calloc_r+0x18>
 80075d6:	4622      	mov	r2, r4
 80075d8:	2100      	movs	r1, #0
 80075da:	f7fc fc83 	bl	8003ee4 <memset>
 80075de:	4628      	mov	r0, r5
 80075e0:	bd38      	pop	{r3, r4, r5, pc}

080075e2 <__ssputs_r>:
 80075e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e6:	688e      	ldr	r6, [r1, #8]
 80075e8:	429e      	cmp	r6, r3
 80075ea:	4682      	mov	sl, r0
 80075ec:	460c      	mov	r4, r1
 80075ee:	4690      	mov	r8, r2
 80075f0:	4699      	mov	r9, r3
 80075f2:	d837      	bhi.n	8007664 <__ssputs_r+0x82>
 80075f4:	898a      	ldrh	r2, [r1, #12]
 80075f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075fa:	d031      	beq.n	8007660 <__ssputs_r+0x7e>
 80075fc:	6825      	ldr	r5, [r4, #0]
 80075fe:	6909      	ldr	r1, [r1, #16]
 8007600:	1a6f      	subs	r7, r5, r1
 8007602:	6965      	ldr	r5, [r4, #20]
 8007604:	2302      	movs	r3, #2
 8007606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800760a:	fb95 f5f3 	sdiv	r5, r5, r3
 800760e:	f109 0301 	add.w	r3, r9, #1
 8007612:	443b      	add	r3, r7
 8007614:	429d      	cmp	r5, r3
 8007616:	bf38      	it	cc
 8007618:	461d      	movcc	r5, r3
 800761a:	0553      	lsls	r3, r2, #21
 800761c:	d530      	bpl.n	8007680 <__ssputs_r+0x9e>
 800761e:	4629      	mov	r1, r5
 8007620:	f7fc fcb6 	bl	8003f90 <_malloc_r>
 8007624:	4606      	mov	r6, r0
 8007626:	b950      	cbnz	r0, 800763e <__ssputs_r+0x5c>
 8007628:	230c      	movs	r3, #12
 800762a:	f8ca 3000 	str.w	r3, [sl]
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007634:	81a3      	strh	r3, [r4, #12]
 8007636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800763a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763e:	463a      	mov	r2, r7
 8007640:	6921      	ldr	r1, [r4, #16]
 8007642:	f7ff fbb5 	bl	8006db0 <memcpy>
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800764c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007650:	81a3      	strh	r3, [r4, #12]
 8007652:	6126      	str	r6, [r4, #16]
 8007654:	6165      	str	r5, [r4, #20]
 8007656:	443e      	add	r6, r7
 8007658:	1bed      	subs	r5, r5, r7
 800765a:	6026      	str	r6, [r4, #0]
 800765c:	60a5      	str	r5, [r4, #8]
 800765e:	464e      	mov	r6, r9
 8007660:	454e      	cmp	r6, r9
 8007662:	d900      	bls.n	8007666 <__ssputs_r+0x84>
 8007664:	464e      	mov	r6, r9
 8007666:	4632      	mov	r2, r6
 8007668:	4641      	mov	r1, r8
 800766a:	6820      	ldr	r0, [r4, #0]
 800766c:	f000 f92b 	bl	80078c6 <memmove>
 8007670:	68a3      	ldr	r3, [r4, #8]
 8007672:	1b9b      	subs	r3, r3, r6
 8007674:	60a3      	str	r3, [r4, #8]
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	441e      	add	r6, r3
 800767a:	6026      	str	r6, [r4, #0]
 800767c:	2000      	movs	r0, #0
 800767e:	e7dc      	b.n	800763a <__ssputs_r+0x58>
 8007680:	462a      	mov	r2, r5
 8007682:	f000 f939 	bl	80078f8 <_realloc_r>
 8007686:	4606      	mov	r6, r0
 8007688:	2800      	cmp	r0, #0
 800768a:	d1e2      	bne.n	8007652 <__ssputs_r+0x70>
 800768c:	6921      	ldr	r1, [r4, #16]
 800768e:	4650      	mov	r0, sl
 8007690:	f7fc fc30 	bl	8003ef4 <_free_r>
 8007694:	e7c8      	b.n	8007628 <__ssputs_r+0x46>
	...

08007698 <_svfiprintf_r>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	461d      	mov	r5, r3
 800769e:	898b      	ldrh	r3, [r1, #12]
 80076a0:	061f      	lsls	r7, r3, #24
 80076a2:	b09d      	sub	sp, #116	; 0x74
 80076a4:	4680      	mov	r8, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	4616      	mov	r6, r2
 80076aa:	d50f      	bpl.n	80076cc <_svfiprintf_r+0x34>
 80076ac:	690b      	ldr	r3, [r1, #16]
 80076ae:	b96b      	cbnz	r3, 80076cc <_svfiprintf_r+0x34>
 80076b0:	2140      	movs	r1, #64	; 0x40
 80076b2:	f7fc fc6d 	bl	8003f90 <_malloc_r>
 80076b6:	6020      	str	r0, [r4, #0]
 80076b8:	6120      	str	r0, [r4, #16]
 80076ba:	b928      	cbnz	r0, 80076c8 <_svfiprintf_r+0x30>
 80076bc:	230c      	movs	r3, #12
 80076be:	f8c8 3000 	str.w	r3, [r8]
 80076c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076c6:	e0c8      	b.n	800785a <_svfiprintf_r+0x1c2>
 80076c8:	2340      	movs	r3, #64	; 0x40
 80076ca:	6163      	str	r3, [r4, #20]
 80076cc:	2300      	movs	r3, #0
 80076ce:	9309      	str	r3, [sp, #36]	; 0x24
 80076d0:	2320      	movs	r3, #32
 80076d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076d6:	2330      	movs	r3, #48	; 0x30
 80076d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076dc:	9503      	str	r5, [sp, #12]
 80076de:	f04f 0b01 	mov.w	fp, #1
 80076e2:	4637      	mov	r7, r6
 80076e4:	463d      	mov	r5, r7
 80076e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076ea:	b10b      	cbz	r3, 80076f0 <_svfiprintf_r+0x58>
 80076ec:	2b25      	cmp	r3, #37	; 0x25
 80076ee:	d13e      	bne.n	800776e <_svfiprintf_r+0xd6>
 80076f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80076f4:	d00b      	beq.n	800770e <_svfiprintf_r+0x76>
 80076f6:	4653      	mov	r3, sl
 80076f8:	4632      	mov	r2, r6
 80076fa:	4621      	mov	r1, r4
 80076fc:	4640      	mov	r0, r8
 80076fe:	f7ff ff70 	bl	80075e2 <__ssputs_r>
 8007702:	3001      	adds	r0, #1
 8007704:	f000 80a4 	beq.w	8007850 <_svfiprintf_r+0x1b8>
 8007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770a:	4453      	add	r3, sl
 800770c:	9309      	str	r3, [sp, #36]	; 0x24
 800770e:	783b      	ldrb	r3, [r7, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 809d 	beq.w	8007850 <_svfiprintf_r+0x1b8>
 8007716:	2300      	movs	r3, #0
 8007718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800771c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	9307      	str	r3, [sp, #28]
 8007724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007728:	931a      	str	r3, [sp, #104]	; 0x68
 800772a:	462f      	mov	r7, r5
 800772c:	2205      	movs	r2, #5
 800772e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007732:	4850      	ldr	r0, [pc, #320]	; (8007874 <_svfiprintf_r+0x1dc>)
 8007734:	f7f8 fd54 	bl	80001e0 <memchr>
 8007738:	9b04      	ldr	r3, [sp, #16]
 800773a:	b9d0      	cbnz	r0, 8007772 <_svfiprintf_r+0xda>
 800773c:	06d9      	lsls	r1, r3, #27
 800773e:	bf44      	itt	mi
 8007740:	2220      	movmi	r2, #32
 8007742:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007746:	071a      	lsls	r2, r3, #28
 8007748:	bf44      	itt	mi
 800774a:	222b      	movmi	r2, #43	; 0x2b
 800774c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007750:	782a      	ldrb	r2, [r5, #0]
 8007752:	2a2a      	cmp	r2, #42	; 0x2a
 8007754:	d015      	beq.n	8007782 <_svfiprintf_r+0xea>
 8007756:	9a07      	ldr	r2, [sp, #28]
 8007758:	462f      	mov	r7, r5
 800775a:	2000      	movs	r0, #0
 800775c:	250a      	movs	r5, #10
 800775e:	4639      	mov	r1, r7
 8007760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007764:	3b30      	subs	r3, #48	; 0x30
 8007766:	2b09      	cmp	r3, #9
 8007768:	d94d      	bls.n	8007806 <_svfiprintf_r+0x16e>
 800776a:	b1b8      	cbz	r0, 800779c <_svfiprintf_r+0x104>
 800776c:	e00f      	b.n	800778e <_svfiprintf_r+0xf6>
 800776e:	462f      	mov	r7, r5
 8007770:	e7b8      	b.n	80076e4 <_svfiprintf_r+0x4c>
 8007772:	4a40      	ldr	r2, [pc, #256]	; (8007874 <_svfiprintf_r+0x1dc>)
 8007774:	1a80      	subs	r0, r0, r2
 8007776:	fa0b f000 	lsl.w	r0, fp, r0
 800777a:	4318      	orrs	r0, r3
 800777c:	9004      	str	r0, [sp, #16]
 800777e:	463d      	mov	r5, r7
 8007780:	e7d3      	b.n	800772a <_svfiprintf_r+0x92>
 8007782:	9a03      	ldr	r2, [sp, #12]
 8007784:	1d11      	adds	r1, r2, #4
 8007786:	6812      	ldr	r2, [r2, #0]
 8007788:	9103      	str	r1, [sp, #12]
 800778a:	2a00      	cmp	r2, #0
 800778c:	db01      	blt.n	8007792 <_svfiprintf_r+0xfa>
 800778e:	9207      	str	r2, [sp, #28]
 8007790:	e004      	b.n	800779c <_svfiprintf_r+0x104>
 8007792:	4252      	negs	r2, r2
 8007794:	f043 0302 	orr.w	r3, r3, #2
 8007798:	9207      	str	r2, [sp, #28]
 800779a:	9304      	str	r3, [sp, #16]
 800779c:	783b      	ldrb	r3, [r7, #0]
 800779e:	2b2e      	cmp	r3, #46	; 0x2e
 80077a0:	d10c      	bne.n	80077bc <_svfiprintf_r+0x124>
 80077a2:	787b      	ldrb	r3, [r7, #1]
 80077a4:	2b2a      	cmp	r3, #42	; 0x2a
 80077a6:	d133      	bne.n	8007810 <_svfiprintf_r+0x178>
 80077a8:	9b03      	ldr	r3, [sp, #12]
 80077aa:	1d1a      	adds	r2, r3, #4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	9203      	str	r2, [sp, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	bfb8      	it	lt
 80077b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077b8:	3702      	adds	r7, #2
 80077ba:	9305      	str	r3, [sp, #20]
 80077bc:	4d2e      	ldr	r5, [pc, #184]	; (8007878 <_svfiprintf_r+0x1e0>)
 80077be:	7839      	ldrb	r1, [r7, #0]
 80077c0:	2203      	movs	r2, #3
 80077c2:	4628      	mov	r0, r5
 80077c4:	f7f8 fd0c 	bl	80001e0 <memchr>
 80077c8:	b138      	cbz	r0, 80077da <_svfiprintf_r+0x142>
 80077ca:	2340      	movs	r3, #64	; 0x40
 80077cc:	1b40      	subs	r0, r0, r5
 80077ce:	fa03 f000 	lsl.w	r0, r3, r0
 80077d2:	9b04      	ldr	r3, [sp, #16]
 80077d4:	4303      	orrs	r3, r0
 80077d6:	3701      	adds	r7, #1
 80077d8:	9304      	str	r3, [sp, #16]
 80077da:	7839      	ldrb	r1, [r7, #0]
 80077dc:	4827      	ldr	r0, [pc, #156]	; (800787c <_svfiprintf_r+0x1e4>)
 80077de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077e2:	2206      	movs	r2, #6
 80077e4:	1c7e      	adds	r6, r7, #1
 80077e6:	f7f8 fcfb 	bl	80001e0 <memchr>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d038      	beq.n	8007860 <_svfiprintf_r+0x1c8>
 80077ee:	4b24      	ldr	r3, [pc, #144]	; (8007880 <_svfiprintf_r+0x1e8>)
 80077f0:	bb13      	cbnz	r3, 8007838 <_svfiprintf_r+0x1a0>
 80077f2:	9b03      	ldr	r3, [sp, #12]
 80077f4:	3307      	adds	r3, #7
 80077f6:	f023 0307 	bic.w	r3, r3, #7
 80077fa:	3308      	adds	r3, #8
 80077fc:	9303      	str	r3, [sp, #12]
 80077fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007800:	444b      	add	r3, r9
 8007802:	9309      	str	r3, [sp, #36]	; 0x24
 8007804:	e76d      	b.n	80076e2 <_svfiprintf_r+0x4a>
 8007806:	fb05 3202 	mla	r2, r5, r2, r3
 800780a:	2001      	movs	r0, #1
 800780c:	460f      	mov	r7, r1
 800780e:	e7a6      	b.n	800775e <_svfiprintf_r+0xc6>
 8007810:	2300      	movs	r3, #0
 8007812:	3701      	adds	r7, #1
 8007814:	9305      	str	r3, [sp, #20]
 8007816:	4619      	mov	r1, r3
 8007818:	250a      	movs	r5, #10
 800781a:	4638      	mov	r0, r7
 800781c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007820:	3a30      	subs	r2, #48	; 0x30
 8007822:	2a09      	cmp	r2, #9
 8007824:	d903      	bls.n	800782e <_svfiprintf_r+0x196>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0c8      	beq.n	80077bc <_svfiprintf_r+0x124>
 800782a:	9105      	str	r1, [sp, #20]
 800782c:	e7c6      	b.n	80077bc <_svfiprintf_r+0x124>
 800782e:	fb05 2101 	mla	r1, r5, r1, r2
 8007832:	2301      	movs	r3, #1
 8007834:	4607      	mov	r7, r0
 8007836:	e7f0      	b.n	800781a <_svfiprintf_r+0x182>
 8007838:	ab03      	add	r3, sp, #12
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	4622      	mov	r2, r4
 800783e:	4b11      	ldr	r3, [pc, #68]	; (8007884 <_svfiprintf_r+0x1ec>)
 8007840:	a904      	add	r1, sp, #16
 8007842:	4640      	mov	r0, r8
 8007844:	f7fc fc92 	bl	800416c <_printf_float>
 8007848:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800784c:	4681      	mov	r9, r0
 800784e:	d1d6      	bne.n	80077fe <_svfiprintf_r+0x166>
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	065b      	lsls	r3, r3, #25
 8007854:	f53f af35 	bmi.w	80076c2 <_svfiprintf_r+0x2a>
 8007858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800785a:	b01d      	add	sp, #116	; 0x74
 800785c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007860:	ab03      	add	r3, sp, #12
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	4622      	mov	r2, r4
 8007866:	4b07      	ldr	r3, [pc, #28]	; (8007884 <_svfiprintf_r+0x1ec>)
 8007868:	a904      	add	r1, sp, #16
 800786a:	4640      	mov	r0, r8
 800786c:	f7fc ff34 	bl	80046d8 <_printf_i>
 8007870:	e7ea      	b.n	8007848 <_svfiprintf_r+0x1b0>
 8007872:	bf00      	nop
 8007874:	08007b5c 	.word	0x08007b5c
 8007878:	08007b62 	.word	0x08007b62
 800787c:	08007b66 	.word	0x08007b66
 8007880:	0800416d 	.word	0x0800416d
 8007884:	080075e3 	.word	0x080075e3

08007888 <strncmp>:
 8007888:	b510      	push	{r4, lr}
 800788a:	b16a      	cbz	r2, 80078a8 <strncmp+0x20>
 800788c:	3901      	subs	r1, #1
 800788e:	1884      	adds	r4, r0, r2
 8007890:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007894:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007898:	4293      	cmp	r3, r2
 800789a:	d103      	bne.n	80078a4 <strncmp+0x1c>
 800789c:	42a0      	cmp	r0, r4
 800789e:	d001      	beq.n	80078a4 <strncmp+0x1c>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1f5      	bne.n	8007890 <strncmp+0x8>
 80078a4:	1a98      	subs	r0, r3, r2
 80078a6:	bd10      	pop	{r4, pc}
 80078a8:	4610      	mov	r0, r2
 80078aa:	e7fc      	b.n	80078a6 <strncmp+0x1e>

080078ac <__ascii_wctomb>:
 80078ac:	b149      	cbz	r1, 80078c2 <__ascii_wctomb+0x16>
 80078ae:	2aff      	cmp	r2, #255	; 0xff
 80078b0:	bf85      	ittet	hi
 80078b2:	238a      	movhi	r3, #138	; 0x8a
 80078b4:	6003      	strhi	r3, [r0, #0]
 80078b6:	700a      	strbls	r2, [r1, #0]
 80078b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80078bc:	bf98      	it	ls
 80078be:	2001      	movls	r0, #1
 80078c0:	4770      	bx	lr
 80078c2:	4608      	mov	r0, r1
 80078c4:	4770      	bx	lr

080078c6 <memmove>:
 80078c6:	4288      	cmp	r0, r1
 80078c8:	b510      	push	{r4, lr}
 80078ca:	eb01 0302 	add.w	r3, r1, r2
 80078ce:	d807      	bhi.n	80078e0 <memmove+0x1a>
 80078d0:	1e42      	subs	r2, r0, #1
 80078d2:	4299      	cmp	r1, r3
 80078d4:	d00a      	beq.n	80078ec <memmove+0x26>
 80078d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80078de:	e7f8      	b.n	80078d2 <memmove+0xc>
 80078e0:	4283      	cmp	r3, r0
 80078e2:	d9f5      	bls.n	80078d0 <memmove+0xa>
 80078e4:	1881      	adds	r1, r0, r2
 80078e6:	1ad2      	subs	r2, r2, r3
 80078e8:	42d3      	cmn	r3, r2
 80078ea:	d100      	bne.n	80078ee <memmove+0x28>
 80078ec:	bd10      	pop	{r4, pc}
 80078ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80078f6:	e7f7      	b.n	80078e8 <memmove+0x22>

080078f8 <_realloc_r>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	4607      	mov	r7, r0
 80078fc:	4614      	mov	r4, r2
 80078fe:	460e      	mov	r6, r1
 8007900:	b921      	cbnz	r1, 800790c <_realloc_r+0x14>
 8007902:	4611      	mov	r1, r2
 8007904:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007908:	f7fc bb42 	b.w	8003f90 <_malloc_r>
 800790c:	b922      	cbnz	r2, 8007918 <_realloc_r+0x20>
 800790e:	f7fc faf1 	bl	8003ef4 <_free_r>
 8007912:	4625      	mov	r5, r4
 8007914:	4628      	mov	r0, r5
 8007916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007918:	f000 f814 	bl	8007944 <_malloc_usable_size_r>
 800791c:	42a0      	cmp	r0, r4
 800791e:	d20f      	bcs.n	8007940 <_realloc_r+0x48>
 8007920:	4621      	mov	r1, r4
 8007922:	4638      	mov	r0, r7
 8007924:	f7fc fb34 	bl	8003f90 <_malloc_r>
 8007928:	4605      	mov	r5, r0
 800792a:	2800      	cmp	r0, #0
 800792c:	d0f2      	beq.n	8007914 <_realloc_r+0x1c>
 800792e:	4631      	mov	r1, r6
 8007930:	4622      	mov	r2, r4
 8007932:	f7ff fa3d 	bl	8006db0 <memcpy>
 8007936:	4631      	mov	r1, r6
 8007938:	4638      	mov	r0, r7
 800793a:	f7fc fadb 	bl	8003ef4 <_free_r>
 800793e:	e7e9      	b.n	8007914 <_realloc_r+0x1c>
 8007940:	4635      	mov	r5, r6
 8007942:	e7e7      	b.n	8007914 <_realloc_r+0x1c>

08007944 <_malloc_usable_size_r>:
 8007944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007948:	1f18      	subs	r0, r3, #4
 800794a:	2b00      	cmp	r3, #0
 800794c:	bfbc      	itt	lt
 800794e:	580b      	ldrlt	r3, [r1, r0]
 8007950:	18c0      	addlt	r0, r0, r3
 8007952:	4770      	bx	lr

08007954 <_init>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	bf00      	nop
 8007958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795a:	bc08      	pop	{r3}
 800795c:	469e      	mov	lr, r3
 800795e:	4770      	bx	lr

08007960 <_fini>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	bf00      	nop
 8007964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007966:	bc08      	pop	{r3}
 8007968:	469e      	mov	lr, r3
 800796a:	4770      	bx	lr
