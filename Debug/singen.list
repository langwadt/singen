
singen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000782c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  080079c0  080079c0  000179c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080c0  080080c0  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  080080c0  080080c0  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080c0  080080c0  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080c0  080080c0  000180c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  080080c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001910  20000354  0800841c  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c64  0800841c  00021c64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8a1  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c65  00000000  00000000  0003ac25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000093aa  00000000  00000000  0003e88a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c68  00000000  00000000  00047c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  000488a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002652c  00000000  00000000  000493d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f59f  00000000  00000000  0006f8fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d60bc  00000000  00000000  0007ee9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000eb  00000000  00000000  00154f57  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002af8  00000000  00000000  00155044  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000354 	.word	0x20000354
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079a4 	.word	0x080079a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000358 	.word	0x20000358
 80001cc:	080079a4 	.word	0x080079a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b500      	push	{lr}
 8000c8a:	b08b      	sub	sp, #44	; 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	9306      	str	r3, [sp, #24]
 8000c90:	9307      	str	r3, [sp, #28]
 8000c92:	9308      	str	r3, [sp, #32]
 8000c94:	9309      	str	r3, [sp, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_GPIO_Init+0x60>)
 8000c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c9e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ca2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000ca6:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000ca8:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cac:	f042 0201 	orr.w	r2, r2, #1
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cb4:	f002 0201 	and.w	r2, r2, #1
 8000cb8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000cba:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cbe:	f042 0210 	orr.w	r2, r2, #16
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0310 	and.w	r3, r3, #16
 8000cca:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ccc:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000cce:	4807      	ldr	r0, [pc, #28]	; (8000cec <MX_GPIO_Init+0x64>)
 8000cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd4:	6183      	str	r3, [r0, #24]

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cda:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	a904      	add	r1, sp, #16
 8000cde:	f001 f984 	bl	8001fea <LL_GPIO_Init>

}
 8000ce2:	b00b      	add	sp, #44	; 0x2c
 8000ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40021000 	.word	0x40021000

08000cf0 <MX_DAC_Init>:
{
 8000cf0:	b510      	push	{r4, lr}
 8000cf2:	b08c      	sub	sp, #48	; 0x30
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8000cf4:	2400      	movs	r4, #0
 8000cf6:	9408      	str	r4, [sp, #32]
 8000cf8:	9409      	str	r4, [sp, #36]	; 0x24
 8000cfa:	940a      	str	r4, [sp, #40]	; 0x28
 8000cfc:	940b      	str	r4, [sp, #44]	; 0x2c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	9404      	str	r4, [sp, #16]
 8000d00:	9405      	str	r4, [sp, #20]
 8000d02:	9406      	str	r4, [sp, #24]
 8000d04:	9407      	str	r4, [sp, #28]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d06:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <MX_DAC_Init+0x90>)
 8000d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000d0e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d12:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000d16:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000d18:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d1c:	f042 0201 	orr.w	r2, r2, #1
 8000d20:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000d2a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8000d2c:	2330      	movs	r3, #48	; 0x30
 8000d2e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d30:	2303      	movs	r3, #3
 8000d32:	9303      	str	r3, [sp, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	a902      	add	r1, sp, #8
 8000d36:	4813      	ldr	r0, [pc, #76]	; (8000d84 <MX_DAC_Init+0x94>)
 8000d38:	f001 f957 	bl	8001fea <LL_GPIO_Init>
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_EXT_TIM2_TRGO;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	9308      	str	r3, [sp, #32]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8000d40:	9409      	str	r4, [sp, #36]	; 0x24
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_DISABLE;
 8000d42:	2302      	movs	r3, #2
 8000d44:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000d46:	4c10      	ldr	r4, [pc, #64]	; (8000d88 <MX_DAC_Init+0x98>)
 8000d48:	aa08      	add	r2, sp, #32
 8000d4a:	4910      	ldr	r1, [pc, #64]	; (8000d8c <MX_DAC_Init+0x9c>)
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f001 f91f 	bl	8001f90 <LL_DAC_Init>
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8000d52:	aa08      	add	r2, sp, #32
 8000d54:	490e      	ldr	r1, [pc, #56]	; (8000d90 <MX_DAC_Init+0xa0>)
 8000d56:	4620      	mov	r0, r4
 8000d58:	f001 f91a 	bl	8001f90 <LL_DAC_Init>
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6023      	str	r3, [r4, #0]
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6a:	6023      	str	r3, [r4, #0]
  SET_BIT(DACx->CR,
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6023      	str	r3, [r4, #0]
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7a:	6023      	str	r3, [r4, #0]
}
 8000d7c:	b00c      	add	sp, #48	; 0x30
 8000d7e:	bd10      	pop	{r4, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40007400 	.word	0x40007400
 8000d8c:	02100001 	.word	0x02100001
 8000d90:	15430012 	.word	0x15430012

08000d94 <MX_TIM2_Init>:
{
 8000d94:	b500      	push	{lr}
 8000d96:	b087      	sub	sp, #28
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d98:	2300      	movs	r3, #0
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	9302      	str	r3, [sp, #8]
 8000d9e:	9303      	str	r3, [sp, #12]
 8000da0:	9304      	str	r3, [sp, #16]
 8000da2:	9305      	str	r3, [sp, #20]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <MX_TIM2_Init+0x80>)
 8000da6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000da8:	f041 0101 	orr.w	r1, r1, #1
 8000dac:	6411      	str	r1, [r2, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000dae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000db0:	f002 0201 	and.w	r2, r2, #1
 8000db4:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8000db6:	9a00      	ldr	r2, [sp, #0]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db8:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <MX_TIM2_Init+0x84>)
 8000dba:	68d2      	ldr	r2, [r2, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <MX_TIM2_Init+0x88>)
 8000dbe:	f882 331c 	strb.w	r3, [r2, #796]	; 0x31c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8000dc6:	6011      	str	r1, [r2, #0]
  TIM_InitStruct.Prescaler = 0;
 8000dc8:	f8ad 3004 	strh.w	r3, [sp, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000dcc:	9302      	str	r3, [sp, #8]
  TIM_InitStruct.Autoreload = 2099;
 8000dce:	f640 0233 	movw	r2, #2099	; 0x833
 8000dd2:	9203      	str	r2, [sp, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000dd4:	9304      	str	r3, [sp, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000dd6:	a901      	add	r1, sp, #4
 8000dd8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ddc:	f001 f99c 	bl	8002118 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000dea:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000df2:	f022 0207 	bic.w	r2, r2, #7
 8000df6:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000dfe:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000e02:	605a      	str	r2, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e0a:	609a      	str	r2, [r3, #8]
}
 8000e0c:	b007      	add	sp, #28
 8000e0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	e000ed00 	.word	0xe000ed00
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
 8000e22:	e7fe      	b.n	8000e22 <Error_Handler+0x2>

08000e24 <SystemClock_Config>:
{
 8000e24:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e26:	4a2f      	ldr	r2, [pc, #188]	; (8000ee4 <SystemClock_Config+0xc0>)
 8000e28:	6813      	ldr	r3, [r2, #0]
 8000e2a:	f023 030f 	bic.w	r3, r3, #15
 8000e2e:	f043 0305 	orr.w	r3, r3, #5
 8000e32:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <SystemClock_Config+0xc0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 030f 	and.w	r3, r3, #15
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000e3c:	2b05      	cmp	r3, #5
 8000e3e:	d1f9      	bne.n	8000e34 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000e40:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <SystemClock_Config+0xc4>)
 8000e42:	6813      	ldr	r3, [r2, #0]
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e4a:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8000e4e:	6813      	ldr	r3, [r2, #0]
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <SystemClock_Config+0xc8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSE_IsReady() != 1)
 8000e5a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e5e:	d0fa      	beq.n	8000e56 <SystemClock_Config+0x32>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <SystemClock_Config+0xc8>)
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	4922      	ldr	r1, [pc, #136]	; (8000ef0 <SystemClock_Config+0xcc>)
 8000e66:	4011      	ands	r1, r2
 8000e68:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <SystemClock_Config+0xd0>)
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000e74:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	491f      	ldr	r1, [pc, #124]	; (8000ef8 <SystemClock_Config+0xd4>)
 8000e7a:	4011      	ands	r1, r2
 8000e7c:	4a1f      	ldr	r2, [pc, #124]	; (8000efc <SystemClock_Config+0xd8>)
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e88:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <SystemClock_Config+0xc8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8000e8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e92:	d0fa      	beq.n	8000e8a <SystemClock_Config+0x66>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <SystemClock_Config+0xc8>)
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e9c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000ea4:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000ea8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000eb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eb4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	f022 0203 	bic.w	r2, r2, #3
 8000ebc:	f042 0202 	orr.w	r2, r2, #2
 8000ec0:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <SystemClock_Config+0xc8>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000eca:	2b08      	cmp	r3, #8
 8000ecc:	d1f9      	bne.n	8000ec2 <SystemClock_Config+0x9e>
  LL_SetSystemCoreClock(168000000);
 8000ece:	480c      	ldr	r0, [pc, #48]	; (8000f00 <SystemClock_Config+0xdc>)
 8000ed0:	f001 ff04 	bl	8002cdc <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f000 f8fb 	bl	80010d0 <HAL_InitTick>
 8000eda:	b900      	cbnz	r0, 8000ede <SystemClock_Config+0xba>
}
 8000edc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ede:	f7ff ff9f 	bl	8000e20 <Error_Handler>
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00
 8000ee8:	40007000 	.word	0x40007000
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	ffbf8000 	.word	0xffbf8000
 8000ef4:	00402a04 	.word	0x00402a04
 8000ef8:	f0bf8000 	.word	0xf0bf8000
 8000efc:	07402a04 	.word	0x07402a04
 8000f00:	0a037a00 	.word	0x0a037a00

08000f04 <main>:
{
 8000f04:	b508      	push	{r3, lr}
  HAL_Init();
 8000f06:	f000 f909 	bl	800111c <HAL_Init>
  SystemClock_Config();
 8000f0a:	f7ff ff8b 	bl	8000e24 <SystemClock_Config>
  MX_GPIO_Init();
 8000f0e:	f7ff febb 	bl	8000c88 <MX_GPIO_Init>
  MX_DAC_Init();
 8000f12:	f7ff feed 	bl	8000cf0 <MX_DAC_Init>
  MX_USB_DEVICE_Init();
 8000f16:	f002 fd85 	bl	8003a24 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000f1a:	f7ff ff3b 	bl	8000d94 <MX_TIM2_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000f1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	f042 0201 	orr.w	r2, r2, #1
 8000f28:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	f042 0201 	orr.w	r2, r2, #1
 8000f30:	601a      	str	r2, [r3, #0]
	  angle_offset+=0x7fff/360/10;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <main+0x40>)
 8000f34:	8813      	ldrh	r3, [r2, #0]
 8000f36:	3309      	adds	r3, #9
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	8013      	strh	r3, [r2, #0]
	  HAL_Delay(5);
 8000f3c:	2005      	movs	r0, #5
 8000f3e:	f000 f919 	bl	8001174 <HAL_Delay>
 8000f42:	e7f6      	b.n	8000f32 <main+0x2e>
 8000f44:	20000000 	.word	0x20000000

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	9100      	str	r1, [sp, #0]
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_MspInit+0x34>)
 8000f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f56:	645a      	str	r2, [r3, #68]	; 0x44
 8000f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f5a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f5e:	9200      	str	r2, [sp, #0]
 8000f60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	9101      	str	r1, [sp, #4]
 8000f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	b002      	add	sp, #8
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	e7fe      	b.n	8000f84 <MemManage_Handler>

08000f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	e7fe      	b.n	8000f88 <UsageFault_Handler>

08000f8a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	4770      	bx	lr

08000f8e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f92:	f000 f8dd 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f96:	bd08      	pop	{r3, pc}

08000f98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f98:	b538      	push	{r3, r4, r5, lr}
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <TIM2_IRQHandler+0x60>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	619a      	str	r2, [r3, #24]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	f013 0f01 	tst.w	r3, #1
 8000faa:	d104      	bne.n	8000fb6 <TIM2_IRQHandler+0x1e>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <TIM2_IRQHandler+0x60>)
 8000fae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fb2:	619a      	str	r2, [r3, #24]

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fb4:	bd38      	pop	{r3, r4, r5, pc}
		angle += 328;
 8000fb6:	4c11      	ldr	r4, [pc, #68]	; (8000ffc <TIM2_IRQHandler+0x64>)
 8000fb8:	8823      	ldrh	r3, [r4, #0]
 8000fba:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	8023      	strh	r3, [r4, #0]
		sine  = arm_sin_q15(angle&0x7fff);
 8000fc2:	8820      	ldrh	r0, [r4, #0]
 8000fc4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8000fc8:	f002 ff60 	bl	8003e8c <arm_sin_q15>
 8000fcc:	4605      	mov	r5, r0
		sine1 = arm_sin_q15((angle+angle_offset)&0x7fff);
 8000fce:	8820      	ldrh	r0, [r4, #0]
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <TIM2_IRQHandler+0x68>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	4418      	add	r0, r3
 8000fd6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8000fda:	f002 ff57 	bl	8003e8c <arm_sin_q15>
		DAC->DHR12L1 =sine^0x8000;
 8000fde:	f485 4500 	eor.w	r5, r5, #32768	; 0x8000
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <TIM2_IRQHandler+0x6c>)
 8000fe4:	60dd      	str	r5, [r3, #12]
		DAC->DHR12L2 =sine1^0x8000;
 8000fe6:	f480 4000 	eor.w	r0, r0, #32768	; 0x8000
 8000fea:	6198      	str	r0, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000fec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff0:	f06f 0201 	mvn.w	r2, #1
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	e7d9      	b.n	8000fac <TIM2_IRQHandler+0x14>
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	20000370 	.word	0x20000370
 8001000:	20000000 	.word	0x20000000
 8001004:	40007400 	.word	0x40007400

08001008 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001008:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800100a:	4802      	ldr	r0, [pc, #8]	; (8001014 <OTG_FS_IRQHandler+0xc>)
 800100c:	f000 fbd8 	bl	80017c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001010:	bd08      	pop	{r3, pc}
 8001012:	bf00      	nop
 8001014:	20001858 	.word	0x20001858

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b510      	push	{r4, lr}
 800101a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <_sbrk+0x38>)
 800101e:	490d      	ldr	r1, [pc, #52]	; (8001054 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <_sbrk+0x40>)
 8001022:	6800      	ldr	r0, [r0, #0]
 8001024:	b140      	cbz	r0, 8001038 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001026:	480c      	ldr	r0, [pc, #48]	; (8001058 <_sbrk+0x40>)
 8001028:	6800      	ldr	r0, [r0, #0]
 800102a:	4403      	add	r3, r0
 800102c:	1a52      	subs	r2, r2, r1
 800102e:	4293      	cmp	r3, r2
 8001030:	d806      	bhi.n	8001040 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <_sbrk+0x40>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001036:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <_sbrk+0x40>)
 800103a:	4c08      	ldr	r4, [pc, #32]	; (800105c <_sbrk+0x44>)
 800103c:	6004      	str	r4, [r0, #0]
 800103e:	e7f2      	b.n	8001026 <_sbrk+0xe>
    errno = ENOMEM;
 8001040:	f002 ff40 	bl	8003ec4 <__errno>
 8001044:	230c      	movs	r3, #12
 8001046:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800104c:	e7f3      	b.n	8001036 <_sbrk+0x1e>
 800104e:	bf00      	nop
 8001050:	20020000 	.word	0x20020000
 8001054:	00000400 	.word	0x00000400
 8001058:	20000374 	.word	0x20000374
 800105c:	20001c68 	.word	0x20001c68

08001060 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SystemInit+0x18>)
 8001062:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001066:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800106a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800106e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001072:	609a      	str	r2, [r3, #8]
#endif
}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001080:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001082:	e003      	b.n	800108c <LoopCopyDataInit>

08001084 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001086:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001088:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800108a:	3104      	adds	r1, #4

0800108c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001090:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001092:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001094:	d3f6      	bcc.n	8001084 <CopyDataInit>
  ldr  r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001098:	e002      	b.n	80010a0 <LoopFillZerobss>

0800109a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800109a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800109c:	f842 3b04 	str.w	r3, [r2], #4

080010a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010a4:	d3f9      	bcc.n	800109a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010a6:	f7ff ffdb 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f002 ff11 	bl	8003ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff ff29 	bl	8000f04 <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010b8:	080080c8 	.word	0x080080c8
  ldr  r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010c0:	20000354 	.word	0x20000354
  ldr  r2, =_sbss
 80010c4:	20000354 	.word	0x20000354
  ldr  r3, = _ebss
 80010c8:	20001c64 	.word	0x20001c64

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b510      	push	{r4, lr}
 80010d2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_InitTick+0x40>)
 80010d6:	7818      	ldrb	r0, [r3, #0]
 80010d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80010e0:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <HAL_InitTick+0x44>)
 80010e2:	6810      	ldr	r0, [r2, #0]
 80010e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80010e8:	f000 f8ac 	bl	8001244 <HAL_SYSTICK_Config>
 80010ec:	b968      	cbnz	r0, 800110a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	2c0f      	cmp	r4, #15
 80010f0:	d901      	bls.n	80010f6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80010f2:	2001      	movs	r0, #1
 80010f4:	e00a      	b.n	800110c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f6:	2200      	movs	r2, #0
 80010f8:	4621      	mov	r1, r4
 80010fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010fe:	f000 f85f 	bl	80011c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_InitTick+0x48>)
 8001104:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2000      	movs	r0, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800110a:	2001      	movs	r0, #1
}
 800110c:	bd10      	pop	{r4, pc}
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008
 8001114:	20000004 	.word	0x20000004
 8001118:	2000000c 	.word	0x2000000c

0800111c <HAL_Init>:
{
 800111c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_Init+0x30>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001126:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800112e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001136:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f82f 	bl	800119c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff ffc6 	bl	80010d0 <HAL_InitTick>
  HAL_MspInit();
 8001144:	f7ff ff00 	bl	8000f48 <HAL_MspInit>
}
 8001148:	2000      	movs	r0, #0
 800114a:	bd08      	pop	{r3, pc}
 800114c:	40023c00 	.word	0x40023c00

08001150 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001150:	4a03      	ldr	r2, [pc, #12]	; (8001160 <HAL_IncTick+0x10>)
 8001152:	6811      	ldr	r1, [r2, #0]
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <HAL_IncTick+0x14>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	440b      	add	r3, r1
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000384 	.word	0x20000384
 8001164:	20000008 	.word	0x20000008

08001168 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001168:	4b01      	ldr	r3, [pc, #4]	; (8001170 <HAL_GetTick+0x8>)
 800116a:	6818      	ldr	r0, [r3, #0]
}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000384 	.word	0x20000384

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b538      	push	{r3, r4, r5, lr}
 8001176:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff fff6 	bl	8001168 <HAL_GetTick>
 800117c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001182:	d002      	beq.n	800118a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <HAL_Delay+0x24>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800118a:	f7ff ffed 	bl	8001168 <HAL_GetTick>
 800118e:	1b40      	subs	r0, r0, r5
 8001190:	42a0      	cmp	r0, r4
 8001192:	d3fa      	bcc.n	800118a <HAL_Delay+0x16>
  {
  }
}
 8001194:	bd38      	pop	{r3, r4, r5, pc}
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008

0800119c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800119e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011a4:	041b      	lsls	r3, r3, #16
 80011a6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	0200      	lsls	r0, r0, #8
 80011aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ae:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80011b0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80011b4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80011b8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c0:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_NVIC_SetPriority+0x60>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ca:	f1c3 0407 	rsb	r4, r3, #7
 80011ce:	2c04      	cmp	r4, #4
 80011d0:	bf28      	it	cs
 80011d2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d4:	1d1d      	adds	r5, r3, #4
 80011d6:	2d06      	cmp	r5, #6
 80011d8:	d918      	bls.n	800120c <HAL_NVIC_SetPriority+0x4c>
 80011da:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80011e0:	fa05 f404 	lsl.w	r4, r5, r4
 80011e4:	ea21 0104 	bic.w	r1, r1, r4
 80011e8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ea:	fa05 f303 	lsl.w	r3, r5, r3
 80011ee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80011f4:	2800      	cmp	r0, #0
 80011f6:	db0b      	blt.n	8001210 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	0109      	lsls	r1, r1, #4
 80011fa:	b2c9      	uxtb	r1, r1
 80011fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001200:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001204:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001208:	bc30      	pop	{r4, r5}
 800120a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120c:	2300      	movs	r3, #0
 800120e:	e7e5      	b.n	80011dc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	f000 000f 	and.w	r0, r0, #15
 8001214:	0109      	lsls	r1, r1, #4
 8001216:	b2c9      	uxtb	r1, r1
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <HAL_NVIC_SetPriority+0x64>)
 800121a:	5419      	strb	r1, [r3, r0]
 800121c:	e7f4      	b.n	8001208 <HAL_NVIC_SetPriority+0x48>
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00
 8001224:	e000ed14 	.word	0xe000ed14

08001228 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001228:	2800      	cmp	r0, #0
 800122a:	db07      	blt.n	800123c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122c:	f000 021f 	and.w	r2, r0, #31
 8001230:	0940      	lsrs	r0, r0, #5
 8001232:	2301      	movs	r3, #1
 8001234:	4093      	lsls	r3, r2
 8001236:	4a02      	ldr	r2, [pc, #8]	; (8001240 <HAL_NVIC_EnableIRQ+0x18>)
 8001238:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100

08001244 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	3801      	subs	r0, #1
 8001246:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800124a:	d20a      	bcs.n	8001262 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_SYSTICK_Config+0x24>)
 800124e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_SYSTICK_Config+0x28>)
 8001252:	21f0      	movs	r1, #240	; 0xf0
 8001254:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	2000      	movs	r0, #0
 800125a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001270:	2300      	movs	r3, #0
 8001272:	2b0f      	cmp	r3, #15
 8001274:	f200 80d7 	bhi.w	8001426 <HAL_GPIO_Init+0x1b6>
{
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	e039      	b.n	80012f2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127e:	2207      	movs	r2, #7
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x14>
 8001282:	2200      	movs	r2, #0
 8001284:	40aa      	lsls	r2, r5
 8001286:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001288:	3402      	adds	r4, #2
 800128a:	4d67      	ldr	r5, [pc, #412]	; (8001428 <HAL_GPIO_Init+0x1b8>)
 800128c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001290:	4a66      	ldr	r2, [pc, #408]	; (800142c <HAL_GPIO_Init+0x1bc>)
 8001292:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001294:	43f2      	mvns	r2, r6
 8001296:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129a:	684f      	ldr	r7, [r1, #4]
 800129c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80012a0:	d001      	beq.n	80012a6 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80012a2:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 80012a6:	4c61      	ldr	r4, [pc, #388]	; (800142c <HAL_GPIO_Init+0x1bc>)
 80012a8:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80012aa:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b0:	684f      	ldr	r7, [r1, #4]
 80012b2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80012b6:	d001      	beq.n	80012bc <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80012b8:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 80012bc:	4c5b      	ldr	r4, [pc, #364]	; (800142c <HAL_GPIO_Init+0x1bc>)
 80012be:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c0:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c6:	684f      	ldr	r7, [r1, #4]
 80012c8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80012cc:	d001      	beq.n	80012d2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80012ce:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 80012d2:	4c56      	ldr	r4, [pc, #344]	; (800142c <HAL_GPIO_Init+0x1bc>)
 80012d4:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80012d6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012da:	684d      	ldr	r5, [r1, #4]
 80012dc:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80012e0:	d001      	beq.n	80012e6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80012e2:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 80012e6:	4c51      	ldr	r4, [pc, #324]	; (800142c <HAL_GPIO_Init+0x1bc>)
 80012e8:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	3301      	adds	r3, #1
 80012ec:	2b0f      	cmp	r3, #15
 80012ee:	f200 8098 	bhi.w	8001422 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80012f2:	2201      	movs	r2, #1
 80012f4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	680c      	ldr	r4, [r1, #0]
 80012f8:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 80012fc:	42b2      	cmp	r2, r6
 80012fe:	d1f4      	bne.n	80012ea <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001300:	684c      	ldr	r4, [r1, #4]
 8001302:	1e65      	subs	r5, r4, #1
 8001304:	2d01      	cmp	r5, #1
 8001306:	d903      	bls.n	8001310 <HAL_GPIO_Init+0xa0>
 8001308:	2c11      	cmp	r4, #17
 800130a:	d001      	beq.n	8001310 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130c:	2c12      	cmp	r4, #18
 800130e:	d112      	bne.n	8001336 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8001310:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001312:	005f      	lsls	r7, r3, #1
 8001314:	2403      	movs	r4, #3
 8001316:	40bc      	lsls	r4, r7
 8001318:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131c:	68cc      	ldr	r4, [r1, #12]
 800131e:	40bc      	lsls	r4, r7
 8001320:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001322:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001324:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001326:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800132a:	684c      	ldr	r4, [r1, #4]
 800132c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001330:	409a      	lsls	r2, r3
 8001332:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001334:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001336:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001338:	005f      	lsls	r7, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	40ba      	lsls	r2, r7
 800133e:	43d2      	mvns	r2, r2
 8001340:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001342:	688d      	ldr	r5, [r1, #8]
 8001344:	40bd      	lsls	r5, r7
 8001346:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8001348:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800134a:	684c      	ldr	r4, [r1, #4]
 800134c:	2c02      	cmp	r4, #2
 800134e:	d001      	beq.n	8001354 <HAL_GPIO_Init+0xe4>
 8001350:	2c12      	cmp	r4, #18
 8001352:	d113      	bne.n	800137c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8001354:	08dd      	lsrs	r5, r3, #3
 8001356:	3508      	adds	r5, #8
 8001358:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800135c:	f003 0407 	and.w	r4, r3, #7
 8001360:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001364:	240f      	movs	r4, #15
 8001366:	fa04 f40c 	lsl.w	r4, r4, ip
 800136a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800136e:	690c      	ldr	r4, [r1, #16]
 8001370:	fa04 f40c 	lsl.w	r4, r4, ip
 8001374:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001378:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 800137c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137e:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001380:	684c      	ldr	r4, [r1, #4]
 8001382:	f004 0403 	and.w	r4, r4, #3
 8001386:	40bc      	lsls	r4, r7
 8001388:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800138a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138c:	684a      	ldr	r2, [r1, #4]
 800138e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001392:	d0aa      	beq.n	80012ea <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001394:	2200      	movs	r2, #0
 8001396:	9201      	str	r2, [sp, #4]
 8001398:	4a25      	ldr	r2, [pc, #148]	; (8001430 <HAL_GPIO_Init+0x1c0>)
 800139a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800139c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80013a0:	6454      	str	r4, [r2, #68]	; 0x44
 80013a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013a4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80013a8:	9201      	str	r2, [sp, #4]
 80013aa:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80013ac:	089c      	lsrs	r4, r3, #2
 80013ae:	1ca5      	adds	r5, r4, #2
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_GPIO_Init+0x1b8>)
 80013b2:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b6:	f003 0203 	and.w	r2, r3, #3
 80013ba:	0095      	lsls	r5, r2, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	40aa      	lsls	r2, r5
 80013c0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_GPIO_Init+0x1c4>)
 80013c6:	4290      	cmp	r0, r2
 80013c8:	f43f af5b 	beq.w	8001282 <HAL_GPIO_Init+0x12>
 80013cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013d0:	4290      	cmp	r0, r2
 80013d2:	d01a      	beq.n	800140a <HAL_GPIO_Init+0x19a>
 80013d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013d8:	4290      	cmp	r0, r2
 80013da:	d018      	beq.n	800140e <HAL_GPIO_Init+0x19e>
 80013dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013e0:	4290      	cmp	r0, r2
 80013e2:	d016      	beq.n	8001412 <HAL_GPIO_Init+0x1a2>
 80013e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013e8:	4290      	cmp	r0, r2
 80013ea:	d014      	beq.n	8001416 <HAL_GPIO_Init+0x1a6>
 80013ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013f0:	4290      	cmp	r0, r2
 80013f2:	d012      	beq.n	800141a <HAL_GPIO_Init+0x1aa>
 80013f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013f8:	4290      	cmp	r0, r2
 80013fa:	d010      	beq.n	800141e <HAL_GPIO_Init+0x1ae>
 80013fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001400:	4290      	cmp	r0, r2
 8001402:	f43f af3c 	beq.w	800127e <HAL_GPIO_Init+0xe>
 8001406:	2208      	movs	r2, #8
 8001408:	e73c      	b.n	8001284 <HAL_GPIO_Init+0x14>
 800140a:	2201      	movs	r2, #1
 800140c:	e73a      	b.n	8001284 <HAL_GPIO_Init+0x14>
 800140e:	2202      	movs	r2, #2
 8001410:	e738      	b.n	8001284 <HAL_GPIO_Init+0x14>
 8001412:	2203      	movs	r2, #3
 8001414:	e736      	b.n	8001284 <HAL_GPIO_Init+0x14>
 8001416:	2204      	movs	r2, #4
 8001418:	e734      	b.n	8001284 <HAL_GPIO_Init+0x14>
 800141a:	2205      	movs	r2, #5
 800141c:	e732      	b.n	8001284 <HAL_GPIO_Init+0x14>
 800141e:	2206      	movs	r2, #6
 8001420:	e730      	b.n	8001284 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001422:	b003      	add	sp, #12
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001426:	4770      	bx	lr
 8001428:	40013800 	.word	0x40013800
 800142c:	40013c00 	.word	0x40013c00
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000

08001438 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800143c:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800143e:	6807      	ldr	r7, [r0, #0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001440:	00ca      	lsls	r2, r1, #3
 8001442:	1a52      	subs	r2, r2, r1
 8001444:	0093      	lsls	r3, r2, #2
 8001446:	4403      	add	r3, r0
 8001448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800144a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144c:	429a      	cmp	r2, r3
 800144e:	d857      	bhi.n	8001500 <PCD_WriteEmptyTxFifo+0xc8>
 8001450:	46b8      	mov	r8, r7
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001452:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001454:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
 8001458:	00a2      	lsls	r2, r4, #2
 800145a:	4402      	add	r2, r0
 800145c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800145e:	429a      	cmp	r2, r3
 8001460:	d300      	bcc.n	8001464 <PCD_WriteEmptyTxFifo+0x2c>
  len = ep->xfer_len - ep->xfer_count;
 8001462:	461a      	mov	r2, r3
 8001464:	460c      	mov	r4, r1
 8001466:	4606      	mov	r6, r0
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001468:	f102 0a03 	add.w	sl, r2, #3
 800146c:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001470:	e016      	b.n	80014a0 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001472:	f109 0a03 	add.w	sl, r9, #3
 8001476:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800147a:	00e3      	lsls	r3, r4, #3
 800147c:	1b1b      	subs	r3, r3, r4
 800147e:	009d      	lsls	r5, r3, #2
 8001480:	4435      	add	r5, r6
 8001482:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001484:	7c33      	ldrb	r3, [r6, #16]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	fa1f f389 	uxth.w	r3, r9
 800148c:	b2e2      	uxtb	r2, r4
 800148e:	4638      	mov	r0, r7
 8001490:	f001 f9f2 	bl	8002878 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001494:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001496:	444b      	add	r3, r9
 8001498:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800149a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800149c:	444b      	add	r3, r9
 800149e:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80014a0:	eb08 1344 	add.w	r3, r8, r4, lsl #5
 80014a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4553      	cmp	r3, sl
 80014ae:	d313      	bcc.n	80014d8 <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80014b0:	00e3      	lsls	r3, r4, #3
 80014b2:	1b1b      	subs	r3, r3, r4
 80014b4:	009a      	lsls	r2, r3, #2
 80014b6:	4432      	add	r2, r6
 80014b8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80014ba:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80014bc:	4299      	cmp	r1, r3
 80014be:	d20b      	bcs.n	80014d8 <PCD_WriteEmptyTxFifo+0xa0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80014c0:	b153      	cbz	r3, 80014d8 <PCD_WriteEmptyTxFifo+0xa0>
    len = ep->xfer_len - ep->xfer_count;
 80014c2:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 80014c4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80014c8:	008a      	lsls	r2, r1, #2
 80014ca:	4432      	add	r2, r6
 80014cc:	f8d2 9044 	ldr.w	r9, [r2, #68]	; 0x44
 80014d0:	4599      	cmp	r9, r3
 80014d2:	d3ce      	bcc.n	8001472 <PCD_WriteEmptyTxFifo+0x3a>
    len = ep->xfer_len - ep->xfer_count;
 80014d4:	4699      	mov	r9, r3
 80014d6:	e7cc      	b.n	8001472 <PCD_WriteEmptyTxFifo+0x3a>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80014d8:	00e3      	lsls	r3, r4, #3
 80014da:	1b1b      	subs	r3, r3, r4
 80014dc:	0098      	lsls	r0, r3, #2
 80014de:	4406      	add	r6, r0
 80014e0:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80014e2:	6d73      	ldr	r3, [r6, #84]	; 0x54
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d80f      	bhi.n	8001508 <PCD_WriteEmptyTxFifo+0xd0>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014e8:	f004 040f 	and.w	r4, r4, #15
 80014ec:	2101      	movs	r1, #1
 80014ee:	40a1      	lsls	r1, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014f0:	f8d7 4834 	ldr.w	r4, [r7, #2100]	; 0x834
 80014f4:	ea24 0401 	bic.w	r4, r4, r1
 80014f8:	f8c7 4834 	str.w	r4, [r7, #2100]	; 0x834
  }

  return HAL_OK;
 80014fc:	2000      	movs	r0, #0
 80014fe:	e000      	b.n	8001502 <PCD_WriteEmptyTxFifo+0xca>
    return HAL_ERROR;
 8001500:	2001      	movs	r0, #1
}
 8001502:	b002      	add	sp, #8
 8001504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8001508:	2000      	movs	r0, #0
 800150a:	e7fa      	b.n	8001502 <PCD_WriteEmptyTxFifo+0xca>

0800150c <HAL_PCD_Init>:
{
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8001510:	2800      	cmp	r0, #0
 8001512:	f000 808a 	beq.w	800162a <HAL_PCD_Init+0x11e>
 8001516:	4604      	mov	r4, r0
  USBx = hpcd->Instance;
 8001518:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800151a:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800151e:	b323      	cbz	r3, 800156a <HAL_PCD_Init+0x5e>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001520:	2303      	movs	r3, #3
 8001522:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001526:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001528:	f413 7f80 	tst.w	r3, #256	; 0x100
 800152c:	d101      	bne.n	8001532 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 800152e:	2300      	movs	r3, #0
 8001530:	6123      	str	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001532:	6820      	ldr	r0, [r4, #0]
 8001534:	f000 ff34 	bl	80023a0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001538:	4625      	mov	r5, r4
 800153a:	f855 7b10 	ldr.w	r7, [r5], #16
 800153e:	466e      	mov	r6, sp
 8001540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001542:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001546:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001548:	e895 0003 	ldmia.w	r5, {r0, r1}
 800154c:	e886 0003 	stmia.w	r6, {r0, r1}
 8001550:	1d23      	adds	r3, r4, #4
 8001552:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001554:	4638      	mov	r0, r7
 8001556:	f000 fe61 	bl	800221c <USB_CoreInit>
 800155a:	b158      	cbz	r0, 8001574 <HAL_PCD_Init+0x68>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800155c:	2302      	movs	r3, #2
 800155e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001562:	2501      	movs	r5, #1
}
 8001564:	4628      	mov	r0, r5
 8001566:	b00b      	add	sp, #44	; 0x2c
 8001568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800156a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800156e:	f002 fb3b 	bl	8003be8 <HAL_PCD_MspInit>
 8001572:	e7d5      	b.n	8001520 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001574:	2100      	movs	r1, #0
 8001576:	6820      	ldr	r0, [r4, #0]
 8001578:	f000 ff18 	bl	80023ac <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157c:	2300      	movs	r3, #0
 800157e:	e015      	b.n	80015ac <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8001580:	00d9      	lsls	r1, r3, #3
 8001582:	1ac8      	subs	r0, r1, r3
 8001584:	0082      	lsls	r2, r0, #2
 8001586:	4422      	add	r2, r4
 8001588:	2001      	movs	r0, #1
 800158a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 800158e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001592:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001596:	2000      	movs	r0, #0
 8001598:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800159c:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 800159e:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80015a0:	1aca      	subs	r2, r1, r3
 80015a2:	0091      	lsls	r1, r2, #2
 80015a4:	4421      	add	r1, r4
 80015a6:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a8:	3301      	adds	r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	6865      	ldr	r5, [r4, #4]
 80015ae:	42ab      	cmp	r3, r5
 80015b0:	d3e6      	bcc.n	8001580 <HAL_PCD_Init+0x74>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	e015      	b.n	80015e2 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 80015b6:	00d8      	lsls	r0, r3, #3
 80015b8:	1ac1      	subs	r1, r0, r3
 80015ba:	008a      	lsls	r2, r1, #2
 80015bc:	4422      	add	r2, r4
 80015be:	2100      	movs	r1, #0
 80015c0:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80015c4:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015c8:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015cc:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015d0:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015d4:	1ac2      	subs	r2, r0, r3
 80015d6:	0090      	lsls	r0, r2, #2
 80015d8:	4420      	add	r0, r4
 80015da:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015de:	3301      	adds	r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	429d      	cmp	r5, r3
 80015e4:	d8e7      	bhi.n	80015b6 <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015e6:	4625      	mov	r5, r4
 80015e8:	f855 7b10 	ldr.w	r7, [r5], #16
 80015ec:	466e      	mov	r6, sp
 80015ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80015f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80015f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015fa:	e886 0003 	stmia.w	r6, {r0, r1}
 80015fe:	1d23      	adds	r3, r4, #4
 8001600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001602:	4638      	mov	r0, r7
 8001604:	f000 ff18 	bl	8002438 <USB_DevInit>
 8001608:	4605      	mov	r5, r0
 800160a:	b120      	cbz	r0, 8001616 <HAL_PCD_Init+0x10a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800160c:	2302      	movs	r3, #2
 800160e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8001612:	2501      	movs	r5, #1
 8001614:	e7a6      	b.n	8001564 <HAL_PCD_Init+0x58>
  hpcd->USB_Address = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800161c:	2301      	movs	r3, #1
 800161e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001622:	6820      	ldr	r0, [r4, #0]
 8001624:	f001 fad7 	bl	8002bd6 <USB_DevDisconnect>
  return HAL_OK;
 8001628:	e79c      	b.n	8001564 <HAL_PCD_Init+0x58>
    return HAL_ERROR;
 800162a:	2501      	movs	r5, #1
 800162c:	e79a      	b.n	8001564 <HAL_PCD_Init+0x58>

0800162e <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800162e:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8001630:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001634:	2b01      	cmp	r3, #1
 8001636:	d019      	beq.n	800166c <HAL_PCD_Start+0x3e>
{
 8001638:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800163a:	2301      	movs	r3, #1
 800163c:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001640:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001642:	2b01      	cmp	r3, #1
 8001644:	d00a      	beq.n	800165c <HAL_PCD_Start+0x2e>
 8001646:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 8001648:	6800      	ldr	r0, [r0, #0]
 800164a:	f000 fea3 	bl	8002394 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800164e:	6820      	ldr	r0, [r4, #0]
 8001650:	f001 fab3 	bl	8002bba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001654:	2000      	movs	r0, #0
 8001656:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800165a:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800165c:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800165e:	2b01      	cmp	r3, #1
 8001660:	d0f1      	beq.n	8001646 <HAL_PCD_Start+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001662:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6393      	str	r3, [r2, #56]	; 0x38
 800166a:	e7ec      	b.n	8001646 <HAL_PCD_Start+0x18>
  __HAL_LOCK(hpcd);
 800166c:	2002      	movs	r0, #2
}
 800166e:	4770      	bx	lr

08001670 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	4604      	mov	r4, r0
 8001674:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001676:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001678:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800167a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800167e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001682:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001684:	6921      	ldr	r1, [r4, #16]
 8001686:	2901      	cmp	r1, #1
 8001688:	d011      	beq.n	80016ae <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800168a:	4937      	ldr	r1, [pc, #220]	; (8001768 <PCD_EP_OutXfrComplete_int+0xf8>)
 800168c:	428e      	cmp	r6, r1
 800168e:	d054      	beq.n	800173a <PCD_EP_OutXfrComplete_int+0xca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001690:	b93d      	cbnz	r5, 80016a2 <PCD_EP_OutXfrComplete_int+0x32>
 8001692:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8001696:	0093      	lsls	r3, r2, #2
 8001698:	4423      	add	r3, r4
 800169a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d05c      	beq.n	800175c <PCD_EP_OutXfrComplete_int+0xec>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80016a2:	b2e9      	uxtb	r1, r5
 80016a4:	4620      	mov	r0, r4
 80016a6:	f002 fae9 	bl	8003c7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 80016aa:	2000      	movs	r0, #0
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80016ae:	f012 0f08 	tst.w	r2, #8
 80016b2:	d009      	beq.n	80016c8 <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80016b4:	492d      	ldr	r1, [pc, #180]	; (800176c <PCD_EP_OutXfrComplete_int+0xfc>)
 80016b6:	428e      	cmp	r6, r1
 80016b8:	d9f7      	bls.n	80016aa <PCD_EP_OutXfrComplete_int+0x3a>
 80016ba:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80016be:	d0f4      	beq.n	80016aa <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80016c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	e7f0      	b.n	80016aa <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80016c8:	f012 0f20 	tst.w	r2, #32
 80016cc:	d128      	bne.n	8001720 <PCD_EP_OutXfrComplete_int+0xb0>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80016ce:	f012 0f28 	tst.w	r2, #40	; 0x28
 80016d2:	d1ea      	bne.n	80016aa <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80016d4:	4925      	ldr	r1, [pc, #148]	; (800176c <PCD_EP_OutXfrComplete_int+0xfc>)
 80016d6:	428e      	cmp	r6, r1
 80016d8:	d902      	bls.n	80016e0 <PCD_EP_OutXfrComplete_int+0x70>
 80016da:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80016de:	d122      	bne.n	8001726 <PCD_EP_OutXfrComplete_int+0xb6>
          hpcd->OUT_ep[epnum].maxpacket -
 80016e0:	00e9      	lsls	r1, r5, #3
 80016e2:	1b49      	subs	r1, r1, r5
 80016e4:	008a      	lsls	r2, r1, #2
 80016e6:	4422      	add	r2, r4
 80016e8:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80016f2:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80016f4:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80016f8:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80016fc:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8001700:	440b      	add	r3, r1
 8001702:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001706:	b935      	cbnz	r5, 8001716 <PCD_EP_OutXfrComplete_int+0xa6>
 8001708:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 800170c:	0093      	lsls	r3, r2, #2
 800170e:	4423      	add	r3, r4
 8001710:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001714:	b15b      	cbz	r3, 800172e <PCD_EP_OutXfrComplete_int+0xbe>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001716:	b2e9      	uxtb	r1, r5
 8001718:	4620      	mov	r0, r4
 800171a:	f002 faaf 	bl	8003c7c <HAL_PCD_DataOutStageCallback>
 800171e:	e7c4      	b.n	80016aa <PCD_EP_OutXfrComplete_int+0x3a>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001720:	2220      	movs	r2, #32
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	e7c1      	b.n	80016aa <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001726:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	e7bd      	b.n	80016aa <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800172e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001732:	2101      	movs	r1, #1
 8001734:	f001 faa2 	bl	8002c7c <USB_EP0_OutStart>
 8001738:	e7ed      	b.n	8001716 <PCD_EP_OutXfrComplete_int+0xa6>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800173a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800173e:	d109      	bne.n	8001754 <PCD_EP_OutXfrComplete_int+0xe4>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001740:	f012 0f20 	tst.w	r2, #32
 8001744:	d001      	beq.n	800174a <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001746:	2220      	movs	r2, #32
 8001748:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800174a:	b2e9      	uxtb	r1, r5
 800174c:	4620      	mov	r0, r4
 800174e:	f002 fa95 	bl	8003c7c <HAL_PCD_DataOutStageCallback>
 8001752:	e7aa      	b.n	80016aa <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001754:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	e7a6      	b.n	80016aa <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800175c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001760:	2100      	movs	r1, #0
 8001762:	f001 fa8b 	bl	8002c7c <USB_EP0_OutStart>
 8001766:	e79c      	b.n	80016a2 <PCD_EP_OutXfrComplete_int+0x32>
 8001768:	4f54310a 	.word	0x4f54310a
 800176c:	4f54300a 	.word	0x4f54300a

08001770 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001770:	b538      	push	{r3, r4, r5, lr}
 8001772:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001774:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001776:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001778:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800177c:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <PCD_EP_OutSetupPacket_int+0x4c>)
 8001782:	429d      	cmp	r5, r3
 8001784:	d907      	bls.n	8001796 <PCD_EP_OutSetupPacket_int+0x26>
 8001786:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800178a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800178e:	d002      	beq.n	8001796 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001794:	608b      	str	r3, [r1, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001796:	4620      	mov	r0, r4
 8001798:	f002 fa68 	bl	8003c6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <PCD_EP_OutSetupPacket_int+0x4c>)
 800179e:	429d      	cmp	r5, r3
 80017a0:	d902      	bls.n	80017a8 <PCD_EP_OutSetupPacket_int+0x38>
 80017a2:	6923      	ldr	r3, [r4, #16]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d001      	beq.n	80017ac <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 80017a8:	2000      	movs	r0, #0
 80017aa:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017ac:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80017b0:	2101      	movs	r1, #1
 80017b2:	6820      	ldr	r0, [r4, #0]
 80017b4:	f001 fa62 	bl	8002c7c <USB_EP0_OutStart>
 80017b8:	e7f6      	b.n	80017a8 <PCD_EP_OutSetupPacket_int+0x38>
 80017ba:	bf00      	nop
 80017bc:	4f54300a 	.word	0x4f54300a

080017c0 <HAL_PCD_IRQHandler>:
{
 80017c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017c4:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017c6:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017c8:	4628      	mov	r0, r5
 80017ca:	f001 fa43 	bl	8002c54 <USB_GetMode>
 80017ce:	b108      	cbz	r0, 80017d4 <HAL_PCD_IRQHandler+0x14>
}
 80017d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017d4:	462f      	mov	r7, r5
 80017d6:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017d8:	6820      	ldr	r0, [r4, #0]
 80017da:	f001 fa0a 	bl	8002bf2 <USB_ReadInterrupts>
 80017de:	2800      	cmp	r0, #0
 80017e0:	d0f6      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x10>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	f001 fa05 	bl	8002bf2 <USB_ReadInterrupts>
 80017e8:	f010 0f02 	tst.w	r0, #2
 80017ec:	d004      	beq.n	80017f8 <HAL_PCD_IRQHandler+0x38>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017ee:	6822      	ldr	r2, [r4, #0]
 80017f0:	6953      	ldr	r3, [r2, #20]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017f8:	6820      	ldr	r0, [r4, #0]
 80017fa:	f001 f9fa 	bl	8002bf2 <USB_ReadInterrupts>
 80017fe:	f010 0f10 	tst.w	r0, #16
 8001802:	d014      	beq.n	800182e <HAL_PCD_IRQHandler+0x6e>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001804:	6822      	ldr	r2, [r4, #0]
 8001806:	6993      	ldr	r3, [r2, #24]
 8001808:	f023 0310 	bic.w	r3, r3, #16
 800180c:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 800180e:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001812:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001816:	f3c8 4343 	ubfx	r3, r8, #17, #4
 800181a:	2b02      	cmp	r3, #2
 800181c:	d068      	beq.n	80018f0 <HAL_PCD_IRQHandler+0x130>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800181e:	2b06      	cmp	r3, #6
 8001820:	f000 8088 	beq.w	8001934 <HAL_PCD_IRQHandler+0x174>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001824:	6822      	ldr	r2, [r4, #0]
 8001826:	6993      	ldr	r3, [r2, #24]
 8001828:	f043 0310 	orr.w	r3, r3, #16
 800182c:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800182e:	6820      	ldr	r0, [r4, #0]
 8001830:	f001 f9df 	bl	8002bf2 <USB_ReadInterrupts>
 8001834:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8001838:	f040 8090 	bne.w	800195c <HAL_PCD_IRQHandler+0x19c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800183c:	6820      	ldr	r0, [r4, #0]
 800183e:	f001 f9d8 	bl	8002bf2 <USB_ReadInterrupts>
 8001842:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8001846:	f040 80d4 	bne.w	80019f2 <HAL_PCD_IRQHandler+0x232>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800184a:	6820      	ldr	r0, [r4, #0]
 800184c:	f001 f9d1 	bl	8002bf2 <USB_ReadInterrupts>
 8001850:	2800      	cmp	r0, #0
 8001852:	f2c0 8142 	blt.w	8001ada <HAL_PCD_IRQHandler+0x31a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001856:	6820      	ldr	r0, [r4, #0]
 8001858:	f001 f9cb 	bl	8002bf2 <USB_ReadInterrupts>
 800185c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001860:	d00a      	beq.n	8001878 <HAL_PCD_IRQHandler+0xb8>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001862:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8001866:	f013 0f01 	tst.w	r3, #1
 800186a:	f040 8150 	bne.w	8001b0e <HAL_PCD_IRQHandler+0x34e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800186e:	6822      	ldr	r2, [r4, #0]
 8001870:	6953      	ldr	r3, [r2, #20]
 8001872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001876:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001878:	6820      	ldr	r0, [r4, #0]
 800187a:	f001 f9ba 	bl	8002bf2 <USB_ReadInterrupts>
 800187e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001882:	f040 8148 	bne.w	8001b16 <HAL_PCD_IRQHandler+0x356>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001886:	6820      	ldr	r0, [r4, #0]
 8001888:	f001 f9b3 	bl	8002bf2 <USB_ReadInterrupts>
 800188c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001890:	f040 81a7 	bne.w	8001be2 <HAL_PCD_IRQHandler+0x422>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001894:	6820      	ldr	r0, [r4, #0]
 8001896:	f001 f9ac 	bl	8002bf2 <USB_ReadInterrupts>
 800189a:	f010 0f08 	tst.w	r0, #8
 800189e:	f040 81b8 	bne.w	8001c12 <HAL_PCD_IRQHandler+0x452>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018a2:	6820      	ldr	r0, [r4, #0]
 80018a4:	f001 f9a5 	bl	8002bf2 <USB_ReadInterrupts>
 80018a8:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80018ac:	f040 81ba 	bne.w	8001c24 <HAL_PCD_IRQHandler+0x464>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018b0:	6820      	ldr	r0, [r4, #0]
 80018b2:	f001 f99e 	bl	8002bf2 <USB_ReadInterrupts>
 80018b6:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80018ba:	f040 81bd 	bne.w	8001c38 <HAL_PCD_IRQHandler+0x478>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018be:	6820      	ldr	r0, [r4, #0]
 80018c0:	f001 f997 	bl	8002bf2 <USB_ReadInterrupts>
 80018c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80018c8:	f040 81c0 	bne.w	8001c4c <HAL_PCD_IRQHandler+0x48c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018cc:	6820      	ldr	r0, [r4, #0]
 80018ce:	f001 f990 	bl	8002bf2 <USB_ReadInterrupts>
 80018d2:	f010 0f04 	tst.w	r0, #4
 80018d6:	f43f af7b 	beq.w	80017d0 <HAL_PCD_IRQHandler+0x10>
      temp = hpcd->Instance->GOTGINT;
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80018de:	f015 0f04 	tst.w	r5, #4
 80018e2:	f040 81bc 	bne.w	8001c5e <HAL_PCD_IRQHandler+0x49e>
      hpcd->Instance->GOTGINT |= temp;
 80018e6:	6822      	ldr	r2, [r4, #0]
 80018e8:	6853      	ldr	r3, [r2, #4]
 80018ea:	432b      	orrs	r3, r5
 80018ec:	6053      	str	r3, [r2, #4]
 80018ee:	e76f      	b.n	80017d0 <HAL_PCD_IRQHandler+0x10>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80018f0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80018f4:	ea18 0f03 	tst.w	r8, r3
 80018f8:	d094      	beq.n	8001824 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80018fa:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
 80018fe:	ebab 0309 	sub.w	r3, fp, r9
 8001902:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8001906:	44a2      	add	sl, r4
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001908:	ea4f 1818 	mov.w	r8, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800190c:	f3c8 020a 	ubfx	r2, r8, #0, #11
 8001910:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8001914:	4628      	mov	r0, r5
 8001916:	f001 f8d1 	bl	8002abc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800191a:	f3c8 080a 	ubfx	r8, r8, #0, #11
 800191e:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8001922:	4443      	add	r3, r8
 8001924:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001928:	f8da 3214 	ldr.w	r3, [sl, #532]	; 0x214
 800192c:	4443      	add	r3, r8
 800192e:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8001932:	e777      	b.n	8001824 <HAL_PCD_IRQHandler+0x64>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001934:	2208      	movs	r2, #8
 8001936:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800193a:	4628      	mov	r0, r5
 800193c:	f001 f8be 	bl	8002abc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001940:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001944:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001948:	eba3 0109 	sub.w	r1, r3, r9
 800194c:	008a      	lsls	r2, r1, #2
 800194e:	4422      	add	r2, r4
 8001950:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001954:	4443      	add	r3, r8
 8001956:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800195a:	e763      	b.n	8001824 <HAL_PCD_IRQHandler+0x64>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800195c:	6820      	ldr	r0, [r4, #0]
 800195e:	f001 f94c 	bl	8002bfa <USB_ReadDevAllOutEpInterrupt>
 8001962:	4680      	mov	r8, r0
      epnum = 0U;
 8001964:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001966:	e017      	b.n	8001998 <HAL_PCD_IRQHandler+0x1d8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001968:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800196c:	2201      	movs	r2, #1
 800196e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001972:	4649      	mov	r1, r9
 8001974:	4620      	mov	r0, r4
 8001976:	f7ff fe7b 	bl	8001670 <PCD_EP_OutXfrComplete_int>
 800197a:	e01d      	b.n	80019b8 <HAL_PCD_IRQHandler+0x1f8>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800197c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001980:	2208      	movs	r2, #8
 8001982:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001986:	4649      	mov	r1, r9
 8001988:	4620      	mov	r0, r4
 800198a:	f7ff fef1 	bl	8001770 <PCD_EP_OutSetupPacket_int>
 800198e:	e016      	b.n	80019be <HAL_PCD_IRQHandler+0x1fe>
        epnum++;
 8001990:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001994:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001998:	f1b8 0f00 	cmp.w	r8, #0
 800199c:	f43f af4e 	beq.w	800183c <HAL_PCD_IRQHandler+0x7c>
        if ((ep_intr & 0x1U) != 0U)
 80019a0:	f018 0f01 	tst.w	r8, #1
 80019a4:	d0f4      	beq.n	8001990 <HAL_PCD_IRQHandler+0x1d0>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019a6:	fa5f f189 	uxtb.w	r1, r9
 80019aa:	6820      	ldr	r0, [r4, #0]
 80019ac:	f001 f935 	bl	8002c1a <USB_ReadDevOutEPInterrupt>
 80019b0:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80019b2:	f010 0f01 	tst.w	r0, #1
 80019b6:	d1d7      	bne.n	8001968 <HAL_PCD_IRQHandler+0x1a8>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80019b8:	f01a 0f08 	tst.w	sl, #8
 80019bc:	d1de      	bne.n	800197c <HAL_PCD_IRQHandler+0x1bc>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80019be:	f01a 0f10 	tst.w	sl, #16
 80019c2:	d004      	beq.n	80019ce <HAL_PCD_IRQHandler+0x20e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80019c4:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80019c8:	2210      	movs	r2, #16
 80019ca:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80019ce:	f01a 0f20 	tst.w	sl, #32
 80019d2:	d004      	beq.n	80019de <HAL_PCD_IRQHandler+0x21e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019d4:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80019d8:	2220      	movs	r2, #32
 80019da:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80019de:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 80019e2:	d0d5      	beq.n	8001990 <HAL_PCD_IRQHandler+0x1d0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80019e4:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80019e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ec:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 80019f0:	e7ce      	b.n	8001990 <HAL_PCD_IRQHandler+0x1d0>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80019f2:	6820      	ldr	r0, [r4, #0]
 80019f4:	f001 f909 	bl	8002c0a <USB_ReadDevAllInEpInterrupt>
 80019f8:	4680      	mov	r8, r0
      epnum = 0U;
 80019fa:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 80019fc:	e02a      	b.n	8001a54 <HAL_PCD_IRQHandler+0x294>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80019fe:	4659      	mov	r1, fp
 8001a00:	4620      	mov	r0, r4
 8001a02:	f002 f947 	bl	8003c94 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a06:	f01a 0f08 	tst.w	sl, #8
 8001a0a:	d004      	beq.n	8001a16 <HAL_PCD_IRQHandler+0x256>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a0c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001a10:	2208      	movs	r2, #8
 8001a12:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a16:	f01a 0f10 	tst.w	sl, #16
 8001a1a:	d004      	beq.n	8001a26 <HAL_PCD_IRQHandler+0x266>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a1c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001a20:	2210      	movs	r2, #16
 8001a22:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a26:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8001a2a:	d004      	beq.n	8001a36 <HAL_PCD_IRQHandler+0x276>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a2c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001a30:	2240      	movs	r2, #64	; 0x40
 8001a32:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a36:	f01a 0f02 	tst.w	sl, #2
 8001a3a:	d004      	beq.n	8001a46 <HAL_PCD_IRQHandler+0x286>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a3c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001a40:	2202      	movs	r2, #2
 8001a42:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a46:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8001a4a:	d141      	bne.n	8001ad0 <HAL_PCD_IRQHandler+0x310>
        epnum++;
 8001a4c:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001a50:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001a54:	f1b8 0f00 	cmp.w	r8, #0
 8001a58:	f43f aef7 	beq.w	800184a <HAL_PCD_IRQHandler+0x8a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001a5c:	f018 0f01 	tst.w	r8, #1
 8001a60:	d0f4      	beq.n	8001a4c <HAL_PCD_IRQHandler+0x28c>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a62:	fa5f fb89 	uxtb.w	fp, r9
 8001a66:	4659      	mov	r1, fp
 8001a68:	6820      	ldr	r0, [r4, #0]
 8001a6a:	f001 f8df 	bl	8002c2c <USB_ReadDevInEPInterrupt>
 8001a6e:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a70:	f010 0f01 	tst.w	r0, #1
 8001a74:	d0c7      	beq.n	8001a06 <HAL_PCD_IRQHandler+0x246>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a76:	f009 030f 	and.w	r3, r9, #15
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a80:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8001a84:	ea23 0302 	bic.w	r3, r3, r2
 8001a88:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a8c:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001a90:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001a94:	6923      	ldr	r3, [r4, #16]
 8001a96:	428b      	cmp	r3, r1
 8001a98:	d1b1      	bne.n	80019fe <HAL_PCD_IRQHandler+0x23e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001a9e:	eba2 0209 	sub.w	r2, r2, r9
 8001aa2:	0093      	lsls	r3, r2, #2
 8001aa4:	4423      	add	r3, r4
 8001aa6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001aa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001aaa:	440a      	add	r2, r1
 8001aac:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001aae:	f1b9 0f00 	cmp.w	r9, #0
 8001ab2:	d1a4      	bne.n	80019fe <HAL_PCD_IRQHandler+0x23e>
 8001ab4:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8001ab8:	0093      	lsls	r3, r2, #2
 8001aba:	4423      	add	r3, r4
 8001abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d19d      	bne.n	80019fe <HAL_PCD_IRQHandler+0x23e>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ac2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	f001 f8d7 	bl	8002c7c <USB_EP0_OutStart>
 8001ace:	e796      	b.n	80019fe <HAL_PCD_IRQHandler+0x23e>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff fcb0 	bl	8001438 <PCD_WriteEmptyTxFifo>
 8001ad8:	e7b8      	b.n	8001a4c <HAL_PCD_IRQHandler+0x28c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ada:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8001ae6:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d008      	beq.n	8001b00 <HAL_PCD_IRQHandler+0x340>
        HAL_PCD_ResumeCallback(hpcd);
 8001aee:	4620      	mov	r0, r4
 8001af0:	f002 f910 	bl	8003d14 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001af4:	6822      	ldr	r2, [r4, #0]
 8001af6:	6953      	ldr	r3, [r2, #20]
 8001af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001afc:	6153      	str	r3, [r2, #20]
 8001afe:	e6aa      	b.n	8001856 <HAL_PCD_IRQHandler+0x96>
        hpcd->LPM_State = LPM_L0;
 8001b00:	2100      	movs	r1, #0
 8001b02:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b06:	4620      	mov	r0, r4
 8001b08:	f000 fa3a 	bl	8001f80 <HAL_PCDEx_LPM_Callback>
 8001b0c:	e7f2      	b.n	8001af4 <HAL_PCD_IRQHandler+0x334>
        HAL_PCD_SuspendCallback(hpcd);
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f002 f8e8 	bl	8003ce4 <HAL_PCD_SuspendCallback>
 8001b14:	e6ab      	b.n	800186e <HAL_PCD_IRQHandler+0xae>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b16:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8001b1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b26:	2110      	movs	r1, #16
 8001b28:	6820      	ldr	r0, [r4, #0]
 8001b2a:	f000 fc57 	bl	80023dc <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b2e:	e020      	b.n	8001b72 <HAL_PCD_IRQHandler+0x3b2>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b30:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8001b34:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8001b38:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b3c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001b40:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001b44:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001b48:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001b4c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001b50:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b54:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b58:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001b5c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001b60:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b64:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001b68:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001b6c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b70:	3601      	adds	r6, #1
 8001b72:	6863      	ldr	r3, [r4, #4]
 8001b74:	42b3      	cmp	r3, r6
 8001b76:	d8db      	bhi.n	8001b30 <HAL_PCD_IRQHandler+0x370>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b78:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8001b7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b80:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b86:	b1eb      	cbz	r3, 8001bc4 <HAL_PCD_IRQHandler+0x404>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b88:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8001b8c:	f043 030b 	orr.w	r3, r3, #11
 8001b90:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b94:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001b98:	f043 030b 	orr.w	r3, r3, #11
 8001b9c:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ba0:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8001ba4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ba8:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bac:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001bb0:	7c21      	ldrb	r1, [r4, #16]
 8001bb2:	6820      	ldr	r0, [r4, #0]
 8001bb4:	f001 f862 	bl	8002c7c <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bb8:	6822      	ldr	r2, [r4, #0]
 8001bba:	6953      	ldr	r3, [r2, #20]
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc0:	6153      	str	r3, [r2, #20]
 8001bc2:	e660      	b.n	8001886 <HAL_PCD_IRQHandler+0xc6>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001bc4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001bc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bcc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001bd0:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bd4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001bd8:	f043 030b 	orr.w	r3, r3, #11
 8001bdc:	f8c8 3010 	str.w	r3, [r8, #16]
 8001be0:	e7de      	b.n	8001ba0 <HAL_PCD_IRQHandler+0x3e0>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001be2:	6820      	ldr	r0, [r4, #0]
 8001be4:	f001 f83a 	bl	8002c5c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001be8:	6820      	ldr	r0, [r4, #0]
 8001bea:	f000 fced 	bl	80025c8 <USB_GetDevSpeed>
 8001bee:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bf0:	6825      	ldr	r5, [r4, #0]
 8001bf2:	f000 f9c7 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001bf6:	7b22      	ldrb	r2, [r4, #12]
 8001bf8:	4601      	mov	r1, r0
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	f000 fb54 	bl	80022a8 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001c00:	4620      	mov	r0, r4
 8001c02:	f002 f858 	bl	8003cb6 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c06:	6822      	ldr	r2, [r4, #0]
 8001c08:	6953      	ldr	r3, [r2, #20]
 8001c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0e:	6153      	str	r3, [r2, #20]
 8001c10:	e640      	b.n	8001894 <HAL_PCD_IRQHandler+0xd4>
      HAL_PCD_SOFCallback(hpcd);
 8001c12:	4620      	mov	r0, r4
 8001c14:	f002 f849 	bl	8003caa <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c18:	6822      	ldr	r2, [r4, #0]
 8001c1a:	6953      	ldr	r3, [r2, #20]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	6153      	str	r3, [r2, #20]
 8001c22:	e63e      	b.n	80018a2 <HAL_PCD_IRQHandler+0xe2>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c24:	2100      	movs	r1, #0
 8001c26:	4620      	mov	r0, r4
 8001c28:	f002 f880 	bl	8003d2c <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c2c:	6822      	ldr	r2, [r4, #0]
 8001c2e:	6953      	ldr	r3, [r2, #20]
 8001c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c34:	6153      	str	r3, [r2, #20]
 8001c36:	e63b      	b.n	80018b0 <HAL_PCD_IRQHandler+0xf0>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f002 f870 	bl	8003d20 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c40:	6822      	ldr	r2, [r4, #0]
 8001c42:	6953      	ldr	r3, [r2, #20]
 8001c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c48:	6153      	str	r3, [r2, #20]
 8001c4a:	e638      	b.n	80018be <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_ConnectCallback(hpcd);
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f002 f873 	bl	8003d38 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	6953      	ldr	r3, [r2, #20]
 8001c56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c5a:	6153      	str	r3, [r2, #20]
 8001c5c:	e636      	b.n	80018cc <HAL_PCD_IRQHandler+0x10c>
        HAL_PCD_DisconnectCallback(hpcd);
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f002 f870 	bl	8003d44 <HAL_PCD_DisconnectCallback>
 8001c64:	e63f      	b.n	80018e6 <HAL_PCD_IRQHandler+0x126>

08001c66 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001c66:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d00d      	beq.n	8001c8a <HAL_PCD_SetAddress+0x24>
{
 8001c6e:	b510      	push	{r4, lr}
 8001c70:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001c72:	2301      	movs	r3, #1
 8001c74:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c78:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c7c:	6800      	ldr	r0, [r0, #0]
 8001c7e:	f000 ff8c 	bl	8002b9a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001c88:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001c8a:	2002      	movs	r0, #2
}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_PCD_EP_Open>:
{
 8001c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8001c90:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001c94:	d128      	bne.n	8001ce8 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c96:	f001 060f 	and.w	r6, r1, #15
 8001c9a:	00f5      	lsls	r5, r6, #3
 8001c9c:	1baf      	subs	r7, r5, r6
 8001c9e:	00bc      	lsls	r4, r7, #2
 8001ca0:	4627      	mov	r7, r4
 8001ca2:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001ca6:	4404      	add	r4, r0
 8001ca8:	3404      	adds	r4, #4
    ep->is_in = 0U;
 8001caa:	463e      	mov	r6, r7
 8001cac:	4406      	add	r6, r0
 8001cae:	2500      	movs	r5, #0
 8001cb0:	f886 51fd 	strb.w	r5, [r6, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb4:	f001 010f 	and.w	r1, r1, #15
 8001cb8:	7021      	strb	r1, [r4, #0]
  ep->maxpacket = ep_mps;
 8001cba:	60a2      	str	r2, [r4, #8]
  ep->type = ep_type;
 8001cbc:	70e3      	strb	r3, [r4, #3]
  if (ep->is_in != 0U)
 8001cbe:	7862      	ldrb	r2, [r4, #1]
 8001cc0:	b102      	cbz	r2, 8001cc4 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8001cc2:	80e1      	strh	r1, [r4, #6]
  if (ep_type == EP_TYPE_BULK)
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d01e      	beq.n	8001d06 <HAL_PCD_EP_Open+0x78>
  __HAL_LOCK(hpcd);
 8001cc8:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d01d      	beq.n	8001d0c <HAL_PCD_EP_Open+0x7e>
 8001cd0:	4605      	mov	r5, r0
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cd8:	4621      	mov	r1, r4
 8001cda:	6800      	ldr	r0, [r0, #0]
 8001cdc:	f000 fc85 	bl	80025ea <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8001ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce8:	f001 060f 	and.w	r6, r1, #15
 8001cec:	00f5      	lsls	r5, r6, #3
 8001cee:	1baf      	subs	r7, r5, r6
 8001cf0:	00bc      	lsls	r4, r7, #2
 8001cf2:	4627      	mov	r7, r4
 8001cf4:	3438      	adds	r4, #56	; 0x38
 8001cf6:	4404      	add	r4, r0
 8001cf8:	3404      	adds	r4, #4
    ep->is_in = 1U;
 8001cfa:	463e      	mov	r6, r7
 8001cfc:	4406      	add	r6, r0
 8001cfe:	2501      	movs	r5, #1
 8001d00:	f886 503d 	strb.w	r5, [r6, #61]	; 0x3d
 8001d04:	e7d6      	b.n	8001cb4 <HAL_PCD_EP_Open+0x26>
    ep->data_pid_start = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	7123      	strb	r3, [r4, #4]
 8001d0a:	e7dd      	b.n	8001cc8 <HAL_PCD_EP_Open+0x3a>
  __HAL_LOCK(hpcd);
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	e7ea      	b.n	8001ce6 <HAL_PCD_EP_Open+0x58>

08001d10 <HAL_PCD_EP_Close>:
{
 8001d10:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8001d12:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001d16:	d121      	bne.n	8001d5c <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d18:	f001 050f 	and.w	r5, r1, #15
 8001d1c:	00ea      	lsls	r2, r5, #3
 8001d1e:	1b54      	subs	r4, r2, r5
 8001d20:	00a3      	lsls	r3, r4, #2
 8001d22:	461c      	mov	r4, r3
 8001d24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d28:	4403      	add	r3, r0
 8001d2a:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8001d2c:	4625      	mov	r5, r4
 8001d2e:	4405      	add	r5, r0
 8001d30:	2200      	movs	r2, #0
 8001d32:	f885 21fd 	strb.w	r2, [r5, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d36:	f001 010f 	and.w	r1, r1, #15
 8001d3a:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd);
 8001d3c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001d40:	2a01      	cmp	r2, #1
 8001d42:	d01a      	beq.n	8001d7a <HAL_PCD_EP_Close+0x6a>
 8001d44:	4604      	mov	r4, r0
 8001d46:	2201      	movs	r2, #1
 8001d48:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	6800      	ldr	r0, [r0, #0]
 8001d50:	f000 fc96 	bl	8002680 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5c:	f001 040f 	and.w	r4, r1, #15
 8001d60:	00e2      	lsls	r2, r4, #3
 8001d62:	1b15      	subs	r5, r2, r4
 8001d64:	00ab      	lsls	r3, r5, #2
 8001d66:	461d      	mov	r5, r3
 8001d68:	3338      	adds	r3, #56	; 0x38
 8001d6a:	4403      	add	r3, r0
 8001d6c:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8001d6e:	462c      	mov	r4, r5
 8001d70:	4404      	add	r4, r0
 8001d72:	2201      	movs	r2, #1
 8001d74:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001d78:	e7dd      	b.n	8001d36 <HAL_PCD_EP_Close+0x26>
  __HAL_LOCK(hpcd);
 8001d7a:	2002      	movs	r0, #2
 8001d7c:	e7ed      	b.n	8001d5a <HAL_PCD_EP_Close+0x4a>

08001d7e <HAL_PCD_EP_Receive>:
{
 8001d7e:	b570      	push	{r4, r5, r6, lr}
 8001d80:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d84:	00ee      	lsls	r6, r5, #3
 8001d86:	1b71      	subs	r1, r6, r5
 8001d88:	008c      	lsls	r4, r1, #2
 8001d8a:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8
 8001d8e:	4404      	add	r4, r0
 8001d90:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8001d92:	1b76      	subs	r6, r6, r5
 8001d94:	00b4      	lsls	r4, r6, #2
 8001d96:	4404      	add	r4, r0
 8001d98:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 8001d9c:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001da6:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001daa:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8001dae:	6903      	ldr	r3, [r0, #16]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d006      	beq.n	8001dc2 <HAL_PCD_EP_Receive+0x44>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001db4:	b165      	cbz	r5, 8001dd0 <HAL_PCD_EP_Receive+0x52>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	6800      	ldr	r0, [r0, #0]
 8001dba:	f000 fd71 	bl	80028a0 <USB_EPStartXfer>
}
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001dc2:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001dc6:	00b4      	lsls	r4, r6, #2
 8001dc8:	4404      	add	r4, r0
 8001dca:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
 8001dce:	e7f1      	b.n	8001db4 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	6800      	ldr	r0, [r0, #0]
 8001dd4:	f000 fcc2 	bl	800275c <USB_EP0StartXfer>
 8001dd8:	e7f1      	b.n	8001dbe <HAL_PCD_EP_Receive+0x40>

08001dda <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dda:	f001 010f 	and.w	r1, r1, #15
 8001dde:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001de2:	008b      	lsls	r3, r1, #2
 8001de4:	4418      	add	r0, r3
}
 8001de6:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8001dea:	4770      	bx	lr

08001dec <HAL_PCD_EP_Transmit>:
{
 8001dec:	b570      	push	{r4, r5, r6, lr}
 8001dee:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df2:	00ee      	lsls	r6, r5, #3
 8001df4:	1b71      	subs	r1, r6, r5
 8001df6:	008c      	lsls	r4, r1, #2
 8001df8:	3438      	adds	r4, #56	; 0x38
 8001dfa:	4404      	add	r4, r0
 8001dfc:	1d21      	adds	r1, r4, #4
  ep->xfer_buff = pBuf;
 8001dfe:	1b76      	subs	r6, r6, r5
 8001e00:	00b4      	lsls	r4, r6, #2
 8001e02:	4404      	add	r4, r0
 8001e04:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 8001e06:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e12:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8001e16:	6903      	ldr	r3, [r0, #16]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d006      	beq.n	8001e2a <HAL_PCD_EP_Transmit+0x3e>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e1c:	b15d      	cbz	r5, 8001e36 <HAL_PCD_EP_Transmit+0x4a>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	6800      	ldr	r0, [r0, #0]
 8001e22:	f000 fd3d 	bl	80028a0 <USB_EPStartXfer>
}
 8001e26:	2000      	movs	r0, #0
 8001e28:	bd70      	pop	{r4, r5, r6, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8001e2a:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001e2e:	00b4      	lsls	r4, r6, #2
 8001e30:	4404      	add	r4, r0
 8001e32:	64e2      	str	r2, [r4, #76]	; 0x4c
 8001e34:	e7f2      	b.n	8001e1c <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	6800      	ldr	r0, [r0, #0]
 8001e3a:	f000 fc8f 	bl	800275c <USB_EP0StartXfer>
 8001e3e:	e7f2      	b.n	8001e26 <HAL_PCD_EP_Transmit+0x3a>

08001e40 <HAL_PCD_EP_SetStall>:
{
 8001e40:	b538      	push	{r3, r4, r5, lr}
 8001e42:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e46:	6843      	ldr	r3, [r0, #4]
 8001e48:	429d      	cmp	r5, r3
 8001e4a:	d836      	bhi.n	8001eba <HAL_PCD_EP_SetStall+0x7a>
  if ((0x80U & ep_addr) == 0x80U)
 8001e4c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001e50:	d120      	bne.n	8001e94 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8001e52:	00ca      	lsls	r2, r1, #3
 8001e54:	1a54      	subs	r4, r2, r1
 8001e56:	00a3      	lsls	r3, r4, #2
 8001e58:	461c      	mov	r4, r3
 8001e5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e5e:	4403      	add	r3, r0
 8001e60:	3304      	adds	r3, #4
    ep->is_in = 0U;
 8001e62:	4622      	mov	r2, r4
 8001e64:	4402      	add	r2, r0
 8001e66:	2100      	movs	r1, #0
 8001e68:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
  ep->is_stall = 1U;
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8001e72:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8001e76:	2a01      	cmp	r2, #1
 8001e78:	d021      	beq.n	8001ebe <HAL_PCD_EP_SetStall+0x7e>
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e82:	4619      	mov	r1, r3
 8001e84:	6800      	ldr	r0, [r0, #0]
 8001e86:	f000 fe2d 	bl	8002ae4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e8a:	b17d      	cbz	r5, 8001eac <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001e92:	e013      	b.n	8001ebc <HAL_PCD_EP_SetStall+0x7c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e94:	00ea      	lsls	r2, r5, #3
 8001e96:	1b51      	subs	r1, r2, r5
 8001e98:	008b      	lsls	r3, r1, #2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	3338      	adds	r3, #56	; 0x38
 8001e9e:	4403      	add	r3, r0
 8001ea0:	3304      	adds	r3, #4
    ep->is_in = 1U;
 8001ea2:	4401      	add	r1, r0
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
 8001eaa:	e7df      	b.n	8001e6c <HAL_PCD_EP_SetStall+0x2c>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001eac:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001eb0:	7c21      	ldrb	r1, [r4, #16]
 8001eb2:	6820      	ldr	r0, [r4, #0]
 8001eb4:	f000 fee2 	bl	8002c7c <USB_EP0_OutStart>
 8001eb8:	e7e8      	b.n	8001e8c <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8001eba:	2001      	movs	r0, #1
}
 8001ebc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001ebe:	2002      	movs	r0, #2
 8001ec0:	e7fc      	b.n	8001ebc <HAL_PCD_EP_SetStall+0x7c>

08001ec2 <HAL_PCD_EP_ClrStall>:
{
 8001ec2:	b510      	push	{r4, lr}
 8001ec4:	f001 040f 	and.w	r4, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ec8:	6843      	ldr	r3, [r0, #4]
 8001eca:	429c      	cmp	r4, r3
 8001ecc:	d82c      	bhi.n	8001f28 <HAL_PCD_EP_ClrStall+0x66>
  if ((0x80U & ep_addr) == 0x80U)
 8001ece:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ed2:	d11d      	bne.n	8001f10 <HAL_PCD_EP_ClrStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed4:	00e3      	lsls	r3, r4, #3
 8001ed6:	1b1a      	subs	r2, r3, r4
 8001ed8:	0091      	lsls	r1, r2, #2
 8001eda:	460a      	mov	r2, r1
 8001edc:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8001ee0:	4401      	add	r1, r0
 8001ee2:	3104      	adds	r1, #4
    ep->is_in = 0U;
 8001ee4:	4402      	add	r2, r0
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ef0:	700c      	strb	r4, [r1, #0]
  __HAL_LOCK(hpcd);
 8001ef2:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d018      	beq.n	8001f2c <HAL_PCD_EP_ClrStall+0x6a>
 8001efa:	4604      	mov	r4, r0
 8001efc:	2301      	movs	r3, #1
 8001efe:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f02:	6800      	ldr	r0, [r0, #0]
 8001f04:	f000 fe1b 	bl	8002b3e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8001f0e:	e00c      	b.n	8001f2a <HAL_PCD_EP_ClrStall+0x68>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f10:	00e3      	lsls	r3, r4, #3
 8001f12:	1b1a      	subs	r2, r3, r4
 8001f14:	0091      	lsls	r1, r2, #2
 8001f16:	460a      	mov	r2, r1
 8001f18:	3138      	adds	r1, #56	; 0x38
 8001f1a:	4401      	add	r1, r0
 8001f1c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8001f1e:	4402      	add	r2, r0
 8001f20:	2301      	movs	r3, #1
 8001f22:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
 8001f26:	e7e1      	b.n	8001eec <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 8001f28:	2001      	movs	r0, #1
}
 8001f2a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	e7fc      	b.n	8001f2a <HAL_PCD_EP_ClrStall+0x68>

08001f30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001f30:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001f32:	6804      	ldr	r4, [r0, #0]
 8001f34:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8001f36:	b129      	cbz	r1, 8001f44 <HAL_PCDEx_SetTxFiFo+0x14>
 8001f38:	460d      	mov	r5, r1
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001f3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f3c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	e00c      	b.n	8001f5e <HAL_PCDEx_SetTxFiFo+0x2e>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001f44:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001f48:	62a0      	str	r0, [r4, #40]	; 0x28
 8001f4a:	e012      	b.n	8001f72 <HAL_PCDEx_SetTxFiFo+0x42>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f4c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001f50:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001f54:	6849      	ldr	r1, [r1, #4]
 8001f56:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	1e69      	subs	r1, r5, #1
 8001f60:	428b      	cmp	r3, r1
 8001f62:	d3f3      	bcc.n	8001f4c <HAL_PCDEx_SetTxFiFo+0x1c>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001f64:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001f68:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 8001f6c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001f70:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 8001f72:	2000      	movs	r0, #0
 8001f74:	bc30      	pop	{r4, r5}
 8001f76:	4770      	bx	lr

08001f78 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8001f78:	6803      	ldr	r3, [r0, #0]
 8001f7a:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	4770      	bx	lr

08001f80 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001f84:	4b01      	ldr	r3, [pc, #4]	; (8001f8c <HAL_RCC_GetHCLKFreq+0x8>)
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000004 	.word	0x20000004

08001f90 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8001f90:	b430      	push	{r4, r5}
  assert_param(IS_DAC_ALL_INSTANCE(DACx));
  assert_param(IS_LL_DAC_CHANNEL(DACx, DAC_Channel));
  assert_param(IS_LL_DAC_TRIGGER_SOURCE(DAC_InitStruct->TriggerSource));
  assert_param(IS_LL_DAC_OUTPUT_BUFFER(DAC_InitStruct->OutputBuffer));
  assert_param(IS_LL_DAC_WAVE_AUTO_GENER_MODE(DAC_InitStruct->WaveAutoGeneration));
  if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8001f92:	6853      	ldr	r3, [r2, #4]
  return (READ_BIT(DACx->CR,
 8001f94:	6805      	ldr	r5, [r0, #0]
 8001f96:	f001 0110 	and.w	r1, r1, #16
 8001f9a:	2401      	movs	r4, #1
 8001f9c:	408c      	lsls	r4, r1
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8001f9e:	43ac      	bics	r4, r5
 8001fa0:	d021      	beq.n	8001fe6 <LL_DAC_Init+0x56>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8001fa2:	b973      	cbnz	r3, 8001fc2 <LL_DAC_Init+0x32>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8001fa4:	6803      	ldr	r3, [r0, #0]
 8001fa6:	24fa      	movs	r4, #250	; 0xfa
 8001fa8:	408c      	lsls	r4, r1
 8001faa:	ea23 0304 	bic.w	r3, r3, r4
 8001fae:	6814      	ldr	r4, [r2, #0]
 8001fb0:	68d2      	ldr	r2, [r2, #12]
 8001fb2:	4322      	orrs	r2, r4
 8001fb4:	fa02 f101 	lsl.w	r1, r2, r1
 8001fb8:	4319      	orrs	r1, r3
 8001fba:	6001      	str	r1, [r0, #0]
  ErrorStatus status = SUCCESS;
 8001fbc:	2000      	movs	r0, #0
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
  }
  return status;
}
 8001fbe:	bc30      	pop	{r4, r5}
 8001fc0:	4770      	bx	lr
      MODIFY_REG(DACx->CR,
 8001fc2:	6804      	ldr	r4, [r0, #0]
 8001fc4:	f640 75fa 	movw	r5, #4090	; 0xffa
 8001fc8:	408d      	lsls	r5, r1
 8001fca:	ea24 0405 	bic.w	r4, r4, r5
 8001fce:	6815      	ldr	r5, [r2, #0]
 8001fd0:	432b      	orrs	r3, r5
 8001fd2:	6895      	ldr	r5, [r2, #8]
 8001fd4:	432b      	orrs	r3, r5
 8001fd6:	68d2      	ldr	r2, [r2, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	fa03 f101 	lsl.w	r1, r3, r1
 8001fde:	4321      	orrs	r1, r4
 8001fe0:	6001      	str	r1, [r0, #0]
  ErrorStatus status = SUCCESS;
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	e7eb      	b.n	8001fbe <LL_DAC_Init+0x2e>
    status = ERROR;
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	e7e9      	b.n	8001fbe <LL_DAC_Init+0x2e>

08001fea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001fea:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001fec:	680a      	ldr	r2, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	fa92 f2a2 	rbit	r2, r2
 8001ff2:	fab2 f282 	clz	r2, r2
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001ff6:	e02d      	b.n	8002054 <LL_GPIO_Init+0x6a>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ff8:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001ffa:	68c4      	ldr	r4, [r0, #12]
 8001ffc:	fa93 f5a3 	rbit	r5, r3
 8002000:	fab5 f585 	clz	r5, r5
 8002004:	006d      	lsls	r5, r5, #1
 8002006:	2703      	movs	r7, #3
 8002008:	fa07 f505 	lsl.w	r5, r7, r5
 800200c:	ea24 0405 	bic.w	r4, r4, r5
 8002010:	fa93 f5a3 	rbit	r5, r3
 8002014:	fab5 f585 	clz	r5, r5
 8002018:	006d      	lsls	r5, r5, #1
 800201a:	fa06 f505 	lsl.w	r5, r6, r5
 800201e:	432c      	orrs	r4, r5
 8002020:	60c4      	str	r4, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002022:	684c      	ldr	r4, [r1, #4]
 8002024:	2c02      	cmp	r4, #2
 8002026:	d03f      	beq.n	80020a8 <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002028:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800202a:	6805      	ldr	r5, [r0, #0]
 800202c:	fa93 f6a3 	rbit	r6, r3
 8002030:	fab6 f686 	clz	r6, r6
 8002034:	0076      	lsls	r6, r6, #1
 8002036:	2703      	movs	r7, #3
 8002038:	fa07 f606 	lsl.w	r6, r7, r6
 800203c:	ea25 0506 	bic.w	r5, r5, r6
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fa04 f303 	lsl.w	r3, r4, r3
 800204e:	432b      	orrs	r3, r5
 8002050:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8002052:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002054:	680b      	ldr	r3, [r1, #0]
 8002056:	fa33 f402 	lsrs.w	r4, r3, r2
 800205a:	d059      	beq.n	8002110 <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800205c:	2401      	movs	r4, #1
 800205e:	4094      	lsls	r4, r2
    if (currentpin)
 8002060:	4023      	ands	r3, r4
 8002062:	d0f6      	beq.n	8002052 <LL_GPIO_Init+0x68>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002064:	684c      	ldr	r4, [r1, #4]
 8002066:	3c01      	subs	r4, #1
 8002068:	2c01      	cmp	r4, #1
 800206a:	d8c5      	bhi.n	8001ff8 <LL_GPIO_Init+0xe>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800206c:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800206e:	6884      	ldr	r4, [r0, #8]
 8002070:	fa93 f5a3 	rbit	r5, r3
 8002074:	fab5 f585 	clz	r5, r5
 8002078:	006d      	lsls	r5, r5, #1
 800207a:	2703      	movs	r7, #3
 800207c:	fa07 f505 	lsl.w	r5, r7, r5
 8002080:	ea24 0405 	bic.w	r4, r4, r5
 8002084:	fa93 f5a3 	rbit	r5, r3
 8002088:	fab5 f585 	clz	r5, r5
 800208c:	006d      	lsls	r5, r5, #1
 800208e:	fa06 f505 	lsl.w	r5, r6, r5
 8002092:	432c      	orrs	r4, r5
 8002094:	6084      	str	r4, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002096:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002098:	6844      	ldr	r4, [r0, #4]
 800209a:	ea24 0403 	bic.w	r4, r4, r3
 800209e:	fb03 f505 	mul.w	r5, r3, r5
 80020a2:	432c      	orrs	r4, r5
 80020a4:	6044      	str	r4, [r0, #4]
 80020a6:	e7a7      	b.n	8001ff8 <LL_GPIO_Init+0xe>
 80020a8:	fa93 f4a3 	rbit	r4, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80020ac:	fab4 f484 	clz	r4, r4
 80020b0:	2c07      	cmp	r4, #7
 80020b2:	d815      	bhi.n	80020e0 <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020b4:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80020b6:	6a04      	ldr	r4, [r0, #32]
 80020b8:	fa93 f5a3 	rbit	r5, r3
 80020bc:	fab5 f585 	clz	r5, r5
 80020c0:	00ad      	lsls	r5, r5, #2
 80020c2:	270f      	movs	r7, #15
 80020c4:	fa07 f505 	lsl.w	r5, r7, r5
 80020c8:	ea24 0405 	bic.w	r4, r4, r5
 80020cc:	fa93 f5a3 	rbit	r5, r3
 80020d0:	fab5 f585 	clz	r5, r5
 80020d4:	00ad      	lsls	r5, r5, #2
 80020d6:	fa06 f505 	lsl.w	r5, r6, r5
 80020da:	432c      	orrs	r4, r5
 80020dc:	6204      	str	r4, [r0, #32]
 80020de:	e7a3      	b.n	8002028 <LL_GPIO_Init+0x3e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80020e0:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80020e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80020e4:	0a1c      	lsrs	r4, r3, #8
 80020e6:	fa94 f7a4 	rbit	r7, r4
 80020ea:	fab7 f787 	clz	r7, r7
 80020ee:	00bf      	lsls	r7, r7, #2
 80020f0:	f04f 0c0f 	mov.w	ip, #15
 80020f4:	fa0c f707 	lsl.w	r7, ip, r7
 80020f8:	ea26 0607 	bic.w	r6, r6, r7
 80020fc:	fa94 f4a4 	rbit	r4, r4
 8002100:	fab4 f484 	clz	r4, r4
 8002104:	00a4      	lsls	r4, r4, #2
 8002106:	fa05 f404 	lsl.w	r4, r5, r4
 800210a:	4334      	orrs	r4, r6
 800210c:	6244      	str	r4, [r0, #36]	; 0x24
 800210e:	e78b      	b.n	8002028 <LL_GPIO_Init+0x3e>
  }

  return (SUCCESS);
}
 8002110:	2000      	movs	r0, #0
 8002112:	bcf0      	pop	{r4, r5, r6, r7}
 8002114:	4770      	bx	lr
	...

08002118 <LL_TIM_Init>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002118:	6803      	ldr	r3, [r0, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800211a:	4a30      	ldr	r2, [pc, #192]	; (80021dc <LL_TIM_Init+0xc4>)
 800211c:	4290      	cmp	r0, r2
 800211e:	d012      	beq.n	8002146 <LL_TIM_Init+0x2e>
 8002120:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002124:	d00f      	beq.n	8002146 <LL_TIM_Init+0x2e>
 8002126:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800212a:	4290      	cmp	r0, r2
 800212c:	d00b      	beq.n	8002146 <LL_TIM_Init+0x2e>
 800212e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002132:	4290      	cmp	r0, r2
 8002134:	d007      	beq.n	8002146 <LL_TIM_Init+0x2e>
 8002136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800213a:	4290      	cmp	r0, r2
 800213c:	d003      	beq.n	8002146 <LL_TIM_Init+0x2e>
 800213e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002142:	4290      	cmp	r0, r2
 8002144:	d103      	bne.n	800214e <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214a:	684a      	ldr	r2, [r1, #4]
 800214c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800214e:	4a23      	ldr	r2, [pc, #140]	; (80021dc <LL_TIM_Init+0xc4>)
 8002150:	4290      	cmp	r0, r2
 8002152:	d02a      	beq.n	80021aa <LL_TIM_Init+0x92>
 8002154:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002158:	d027      	beq.n	80021aa <LL_TIM_Init+0x92>
 800215a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800215e:	4290      	cmp	r0, r2
 8002160:	d023      	beq.n	80021aa <LL_TIM_Init+0x92>
 8002162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002166:	4290      	cmp	r0, r2
 8002168:	d01f      	beq.n	80021aa <LL_TIM_Init+0x92>
 800216a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800216e:	4290      	cmp	r0, r2
 8002170:	d01b      	beq.n	80021aa <LL_TIM_Init+0x92>
 8002172:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002176:	4290      	cmp	r0, r2
 8002178:	d017      	beq.n	80021aa <LL_TIM_Init+0x92>
 800217a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800217e:	4290      	cmp	r0, r2
 8002180:	d013      	beq.n	80021aa <LL_TIM_Init+0x92>
 8002182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002186:	4290      	cmp	r0, r2
 8002188:	d00f      	beq.n	80021aa <LL_TIM_Init+0x92>
 800218a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800218e:	4290      	cmp	r0, r2
 8002190:	d00b      	beq.n	80021aa <LL_TIM_Init+0x92>
 8002192:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002196:	4290      	cmp	r0, r2
 8002198:	d007      	beq.n	80021aa <LL_TIM_Init+0x92>
 800219a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800219e:	4290      	cmp	r0, r2
 80021a0:	d003      	beq.n	80021aa <LL_TIM_Init+0x92>
 80021a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021a6:	4290      	cmp	r0, r2
 80021a8:	d103      	bne.n	80021b2 <LL_TIM_Init+0x9a>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ae:	68ca      	ldr	r2, [r1, #12]
 80021b0:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80021b2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80021b4:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 80021b6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80021b8:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80021ba:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <LL_TIM_Init+0xc4>)
 80021be:	4298      	cmp	r0, r3
 80021c0:	d003      	beq.n	80021ca <LL_TIM_Init+0xb2>
 80021c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c6:	4298      	cmp	r0, r3
 80021c8:	d101      	bne.n	80021ce <LL_TIM_Init+0xb6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80021ca:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80021cc:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80021ce:	6943      	ldr	r3, [r0, #20]
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80021d6:	2000      	movs	r0, #0
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40010000 	.word	0x40010000

080021e0 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80021e0:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a0c      	ldr	r2, [pc, #48]	; (8002218 <USB_CoreReset+0x38>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d811      	bhi.n	800220e <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80021ea:	6902      	ldr	r2, [r0, #16]
 80021ec:	2a00      	cmp	r2, #0
 80021ee:	daf8      	bge.n	80021e2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80021f0:	6903      	ldr	r3, [r0, #16]
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6103      	str	r3, [r0, #16]
  count = 0U;
 80021f8:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80021fa:	3301      	adds	r3, #1
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <USB_CoreReset+0x38>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d807      	bhi.n	8002212 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002202:	6902      	ldr	r2, [r0, #16]
 8002204:	f012 0f01 	tst.w	r2, #1
 8002208:	d1f7      	bne.n	80021fa <USB_CoreReset+0x1a>

  return HAL_OK;
 800220a:	2000      	movs	r0, #0
 800220c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800220e:	2003      	movs	r0, #3
 8002210:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002212:	2003      	movs	r0, #3
}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	00030d40 	.word	0x00030d40

0800221c <USB_CoreInit>:
{
 800221c:	b084      	sub	sp, #16
 800221e:	b510      	push	{r4, lr}
 8002220:	4604      	mov	r4, r0
 8002222:	a803      	add	r0, sp, #12
 8002224:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002228:	9b08      	ldr	r3, [sp, #32]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d11f      	bne.n	800226e <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800222e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002234:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002236:	68e3      	ldr	r3, [r4, #12]
 8002238:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800223c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002240:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002242:	68e3      	ldr	r3, [r4, #12]
 8002244:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002248:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 800224a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800224c:	2b01      	cmp	r3, #1
 800224e:	d009      	beq.n	8002264 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8002250:	4620      	mov	r0, r4
 8002252:	f7ff ffc5 	bl	80021e0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002256:	9b06      	ldr	r3, [sp, #24]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d01b      	beq.n	8002294 <USB_CoreInit+0x78>
}
 800225c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002260:	b004      	add	sp, #16
 8002262:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002264:	68e3      	ldr	r3, [r4, #12]
 8002266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800226a:	60e3      	str	r3, [r4, #12]
 800226c:	e7f0      	b.n	8002250 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800226e:	68e3      	ldr	r3, [r4, #12]
 8002270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002274:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002276:	4620      	mov	r0, r4
 8002278:	f7ff ffb2 	bl	80021e0 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800227c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800227e:	b923      	cbnz	r3, 800228a <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002286:	63a3      	str	r3, [r4, #56]	; 0x38
 8002288:	e7e5      	b.n	8002256 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800228a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800228c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002290:	63a3      	str	r3, [r4, #56]	; 0x38
 8002292:	e7e0      	b.n	8002256 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002294:	68a3      	ldr	r3, [r4, #8]
 8002296:	f043 0306 	orr.w	r3, r3, #6
 800229a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800229c:	68a3      	ldr	r3, [r4, #8]
 800229e:	f043 0320 	orr.w	r3, r3, #32
 80022a2:	60a3      	str	r3, [r4, #8]
 80022a4:	e7da      	b.n	800225c <USB_CoreInit+0x40>
	...

080022a8 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80022a8:	2a02      	cmp	r2, #2
 80022aa:	d00a      	beq.n	80022c2 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80022ac:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80022ae:	68c2      	ldr	r2, [r0, #12]
 80022b0:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80022b4:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80022b6:	68c3      	ldr	r3, [r0, #12]
 80022b8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80022bc:	60c3      	str	r3, [r0, #12]
}
 80022be:	2000      	movs	r0, #0
 80022c0:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <USB_SetTurnaroundTime+0xc4>)
 80022c4:	440b      	add	r3, r1
 80022c6:	4a2a      	ldr	r2, [pc, #168]	; (8002370 <USB_SetTurnaroundTime+0xc8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d93f      	bls.n	800234c <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80022cc:	4b29      	ldr	r3, [pc, #164]	; (8002374 <USB_SetTurnaroundTime+0xcc>)
 80022ce:	440b      	add	r3, r1
 80022d0:	4a29      	ldr	r2, [pc, #164]	; (8002378 <USB_SetTurnaroundTime+0xd0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d93c      	bls.n	8002350 <USB_SetTurnaroundTime+0xa8>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80022d6:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 80022da:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 80022de:	4a27      	ldr	r2, [pc, #156]	; (800237c <USB_SetTurnaroundTime+0xd4>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d937      	bls.n	8002354 <USB_SetTurnaroundTime+0xac>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80022e4:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 80022e8:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 80022ec:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 80022f0:	32a0      	adds	r2, #160	; 0xa0
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d930      	bls.n	8002358 <USB_SetTurnaroundTime+0xb0>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <USB_SetTurnaroundTime+0xd8>)
 80022f8:	440b      	add	r3, r1
 80022fa:	4a22      	ldr	r2, [pc, #136]	; (8002384 <USB_SetTurnaroundTime+0xdc>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d92d      	bls.n	800235c <USB_SetTurnaroundTime+0xb4>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002300:	4b21      	ldr	r3, [pc, #132]	; (8002388 <USB_SetTurnaroundTime+0xe0>)
 8002302:	440b      	add	r3, r1
 8002304:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8002308:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 800230c:	4293      	cmp	r3, r2
 800230e:	d927      	bls.n	8002360 <USB_SetTurnaroundTime+0xb8>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <USB_SetTurnaroundTime+0xe4>)
 8002312:	440b      	add	r3, r1
 8002314:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8002318:	f502 7220 	add.w	r2, r2, #640	; 0x280
 800231c:	4293      	cmp	r3, r2
 800231e:	d921      	bls.n	8002364 <USB_SetTurnaroundTime+0xbc>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002320:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8002324:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8002328:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 800232c:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8002330:	4293      	cmp	r3, r2
 8002332:	d919      	bls.n	8002368 <USB_SetTurnaroundTime+0xc0>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002334:	4b16      	ldr	r3, [pc, #88]	; (8002390 <USB_SetTurnaroundTime+0xe8>)
 8002336:	440b      	add	r3, r1
 8002338:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
 800233c:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <USB_SetTurnaroundTime+0xa0>
      UsbTrd = 0x6U;
 8002344:	2106      	movs	r1, #6
 8002346:	e7b2      	b.n	80022ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x7U;
 8002348:	2107      	movs	r1, #7
 800234a:	e7b0      	b.n	80022ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 800234c:	210f      	movs	r1, #15
 800234e:	e7ae      	b.n	80022ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 8002350:	210e      	movs	r1, #14
 8002352:	e7ac      	b.n	80022ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 8002354:	210d      	movs	r1, #13
 8002356:	e7aa      	b.n	80022ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 8002358:	210c      	movs	r1, #12
 800235a:	e7a8      	b.n	80022ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 800235c:	210b      	movs	r1, #11
 800235e:	e7a6      	b.n	80022ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 8002360:	210a      	movs	r1, #10
 8002362:	e7a4      	b.n	80022ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 8002364:	2109      	movs	r1, #9
 8002366:	e7a2      	b.n	80022ae <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 8002368:	2108      	movs	r1, #8
 800236a:	e7a0      	b.n	80022ae <USB_SetTurnaroundTime+0x6>
 800236c:	ff275340 	.word	0xff275340
 8002370:	000c34ff 	.word	0x000c34ff
 8002374:	ff1b1e40 	.word	0xff1b1e40
 8002378:	000f423f 	.word	0x000f423f
 800237c:	00124f7f 	.word	0x00124f7f
 8002380:	fee5b660 	.word	0xfee5b660
 8002384:	0016e35f 	.word	0x0016e35f
 8002388:	feced300 	.word	0xfeced300
 800238c:	feb35bc0 	.word	0xfeb35bc0
 8002390:	fe5954e0 	.word	0xfe5954e0

08002394 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002394:	6883      	ldr	r3, [r0, #8]
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6083      	str	r3, [r0, #8]
}
 800239c:	2000      	movs	r0, #0
 800239e:	4770      	bx	lr

080023a0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80023a0:	6883      	ldr	r3, [r0, #8]
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	6083      	str	r3, [r0, #8]
}
 80023a8:	2000      	movs	r0, #0
 80023aa:	4770      	bx	lr

080023ac <USB_SetCurrentMode>:
{
 80023ac:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80023ae:	68c3      	ldr	r3, [r0, #12]
 80023b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80023b4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80023b6:	2901      	cmp	r1, #1
 80023b8:	d009      	beq.n	80023ce <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 80023ba:	b969      	cbnz	r1, 80023d8 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80023bc:	68c3      	ldr	r3, [r0, #12]
 80023be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023c2:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80023c4:	2032      	movs	r0, #50	; 0x32
 80023c6:	f7fe fed5 	bl	8001174 <HAL_Delay>
  return HAL_OK;
 80023ca:	2000      	movs	r0, #0
}
 80023cc:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80023ce:	68c3      	ldr	r3, [r0, #12]
 80023d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023d4:	60c3      	str	r3, [r0, #12]
 80023d6:	e7f5      	b.n	80023c4 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 80023d8:	2001      	movs	r0, #1
 80023da:	e7f7      	b.n	80023cc <USB_SetCurrentMode+0x20>

080023dc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80023dc:	0189      	lsls	r1, r1, #6
 80023de:	f041 0120 	orr.w	r1, r1, #32
 80023e2:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 80023e4:	2300      	movs	r3, #0
    if (++count > 200000U)
 80023e6:	3301      	adds	r3, #1
 80023e8:	4a05      	ldr	r2, [pc, #20]	; (8002400 <USB_FlushTxFifo+0x24>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d805      	bhi.n	80023fa <USB_FlushTxFifo+0x1e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80023ee:	6902      	ldr	r2, [r0, #16]
 80023f0:	f012 0f20 	tst.w	r2, #32
 80023f4:	d1f7      	bne.n	80023e6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80023f6:	2000      	movs	r0, #0
 80023f8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80023fa:	2003      	movs	r0, #3
}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	00030d40 	.word	0x00030d40

08002404 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002404:	2310      	movs	r3, #16
 8002406:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 8002408:	2300      	movs	r3, #0
    if (++count > 200000U)
 800240a:	3301      	adds	r3, #1
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <USB_FlushRxFifo+0x20>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d805      	bhi.n	800241e <USB_FlushRxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002412:	6902      	ldr	r2, [r0, #16]
 8002414:	f012 0f10 	tst.w	r2, #16
 8002418:	d1f7      	bne.n	800240a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800241a:	2000      	movs	r0, #0
 800241c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800241e:	2003      	movs	r0, #3
}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	00030d40 	.word	0x00030d40

08002428 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002428:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800242c:	4319      	orrs	r1, r3
 800242e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002432:	2000      	movs	r0, #0
 8002434:	4770      	bx	lr
	...

08002438 <USB_DevInit>:
{
 8002438:	b084      	sub	sp, #16
 800243a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800243e:	4604      	mov	r4, r0
 8002440:	a807      	add	r0, sp, #28
 8002442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002446:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8002448:	2300      	movs	r3, #0
 800244a:	e006      	b.n	800245a <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 800244c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002450:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002454:	2100      	movs	r1, #0
 8002456:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002458:	3301      	adds	r3, #1
 800245a:	2b0e      	cmp	r3, #14
 800245c:	d9f6      	bls.n	800244c <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 800245e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002460:	bb23      	cbnz	r3, 80024ac <USB_DevInit+0x74>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002462:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800246e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002474:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002476:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002478:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800247c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800247e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002484:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800248c:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8002490:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002494:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800249a:	2b01      	cmp	r3, #1
 800249c:	d114      	bne.n	80024c8 <USB_DevInit+0x90>
    if (cfg.speed == USBD_HS_SPEED)
 800249e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024a0:	b96b      	cbnz	r3, 80024be <USB_DevInit+0x86>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80024a2:	2100      	movs	r1, #0
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff ffbf 	bl	8002428 <USB_SetDevSpeed>
 80024aa:	e011      	b.n	80024d0 <USB_DevInit+0x98>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80024ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024b2:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80024b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80024bc:	e7e3      	b.n	8002486 <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80024be:	2101      	movs	r1, #1
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7ff ffb1 	bl	8002428 <USB_SetDevSpeed>
 80024c6:	e003      	b.n	80024d0 <USB_DevInit+0x98>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80024c8:	2103      	movs	r1, #3
 80024ca:	4620      	mov	r0, r4
 80024cc:	f7ff ffac 	bl	8002428 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80024d0:	2110      	movs	r1, #16
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7ff ff82 	bl	80023dc <USB_FlushTxFifo>
 80024d8:	4680      	mov	r8, r0
 80024da:	b108      	cbz	r0, 80024e0 <USB_DevInit+0xa8>
    ret = HAL_ERROR;
 80024dc:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80024e0:	4620      	mov	r0, r4
 80024e2:	f7ff ff8f 	bl	8002404 <USB_FlushRxFifo>
 80024e6:	b108      	cbz	r0, 80024ec <USB_DevInit+0xb4>
    ret = HAL_ERROR;
 80024e8:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80024f0:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80024f2:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80024f4:	e00a      	b.n	800250c <USB_DevInit+0xd4>
      if (i == 0U)
 80024f6:	b9c3      	cbnz	r3, 800252a <USB_DevInit+0xf2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80024f8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80024fc:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002500:	2200      	movs	r2, #0
 8002502:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002504:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8002508:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800250a:	3301      	adds	r3, #1
 800250c:	9907      	ldr	r1, [sp, #28]
 800250e:	4299      	cmp	r1, r3
 8002510:	d910      	bls.n	8002534 <USB_DevInit+0xfc>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002512:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002516:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 800251a:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 800251e:	2800      	cmp	r0, #0
 8002520:	dbe9      	blt.n	80024f6 <USB_DevInit+0xbe>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002522:	2000      	movs	r0, #0
 8002524:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002528:	e7ea      	b.n	8002500 <USB_DevInit+0xc8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800252a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800252e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8002532:	e7e5      	b.n	8002500 <USB_DevInit+0xc8>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002534:	2300      	movs	r3, #0
 8002536:	e00a      	b.n	800254e <USB_DevInit+0x116>
      if (i == 0U)
 8002538:	b1bb      	cbz	r3, 800256a <USB_DevInit+0x132>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800253a:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 800253e:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002542:	2200      	movs	r2, #0
 8002544:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002546:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800254a:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800254c:	3301      	adds	r3, #1
 800254e:	4299      	cmp	r1, r3
 8002550:	d910      	bls.n	8002574 <USB_DevInit+0x13c>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002552:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8002556:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 800255a:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 800255e:	2f00      	cmp	r7, #0
 8002560:	dbea      	blt.n	8002538 <USB_DevInit+0x100>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002562:	2700      	movs	r7, #0
 8002564:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002568:	e7eb      	b.n	8002542 <USB_DevInit+0x10a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800256a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 800256e:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8002572:	e7e6      	b.n	8002542 <USB_DevInit+0x10a>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002574:	6933      	ldr	r3, [r6, #16]
 8002576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800257a:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002580:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002584:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002588:	b91b      	cbnz	r3, 8002592 <USB_DevInit+0x15a>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800258a:	69a3      	ldr	r3, [r4, #24]
 800258c:	f043 0310 	orr.w	r3, r3, #16
 8002590:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002592:	69a2      	ldr	r2, [r4, #24]
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <USB_DevInit+0x18c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800259a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800259c:	b11b      	cbz	r3, 80025a6 <USB_DevInit+0x16e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800259e:	69a3      	ldr	r3, [r4, #24]
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80025a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d004      	beq.n	80025b6 <USB_DevInit+0x17e>
}
 80025ac:	4640      	mov	r0, r8
 80025ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025b2:	b004      	add	sp, #16
 80025b4:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80025b6:	69a3      	ldr	r3, [r4, #24]
 80025b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025bc:	f043 0304 	orr.w	r3, r3, #4
 80025c0:	61a3      	str	r3, [r4, #24]
 80025c2:	e7f3      	b.n	80025ac <USB_DevInit+0x174>
 80025c4:	803c3800 	.word	0x803c3800

080025c8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80025c8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80025cc:	f013 0306 	ands.w	r3, r3, #6
 80025d0:	d007      	beq.n	80025e2 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d007      	beq.n	80025e6 <USB_GetDevSpeed+0x1e>
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d001      	beq.n	80025de <USB_GetDevSpeed+0x16>
    speed = 0xFU;
 80025da:	200f      	movs	r0, #15
}
 80025dc:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 80025de:	2002      	movs	r0, #2
 80025e0:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 80025e2:	2000      	movs	r0, #0
 80025e4:	4770      	bx	lr
    speed = USBD_FS_SPEED;
 80025e6:	2002      	movs	r0, #2
 80025e8:	4770      	bx	lr

080025ea <USB_ActivateEndpoint>:
{
 80025ea:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 80025ec:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80025ee:	784a      	ldrb	r2, [r1, #1]
 80025f0:	2a01      	cmp	r2, #1
 80025f2:	d022      	beq.n	800263a <USB_ActivateEndpoint+0x50>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80025f4:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80025f8:	f003 060f 	and.w	r6, r3, #15
 80025fc:	2401      	movs	r4, #1
 80025fe:	40b4      	lsls	r4, r6
 8002600:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8002604:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002608:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800260c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002610:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002614:	d10e      	bne.n	8002634 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002616:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800261a:	688a      	ldr	r2, [r1, #8]
 800261c:	f3c2 020a 	ubfx	r2, r2, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002620:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002622:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002626:	4313      	orrs	r3, r2
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002630:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002634:	2000      	movs	r0, #0
 8002636:	bc70      	pop	{r4, r5, r6}
 8002638:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800263a:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
 800263e:	f003 060f 	and.w	r6, r3, #15
 8002642:	40b2      	lsls	r2, r6
 8002644:	b292      	uxth	r2, r2
 8002646:	4322      	orrs	r2, r4
 8002648:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800264c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002650:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002654:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8002658:	d1ec      	bne.n	8002634 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800265a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800265e:	688c      	ldr	r4, [r1, #8]
 8002660:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002664:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002666:	ea44 4481 	orr.w	r4, r4, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800266a:	ea44 5383 	orr.w	r3, r4, r3, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800266e:	4313      	orrs	r3, r2
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002678:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 800267c:	e7da      	b.n	8002634 <USB_ActivateEndpoint+0x4a>
	...

08002680 <USB_DeactivateEndpoint>:
{
 8002680:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8002682:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002684:	784a      	ldrb	r2, [r1, #1]
 8002686:	2a01      	cmp	r2, #1
 8002688:	d024      	beq.n	80026d4 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800268a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800268e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002692:	2a00      	cmp	r2, #0
 8002694:	db50      	blt.n	8002738 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002696:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 800269a:	780a      	ldrb	r2, [r1, #0]
 800269c:	f002 020f 	and.w	r2, r2, #15
 80026a0:	2401      	movs	r4, #1
 80026a2:	fa04 f202 	lsl.w	r2, r4, r2
 80026a6:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 80026aa:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80026ae:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80026b2:	7809      	ldrb	r1, [r1, #0]
 80026b4:	f001 010f 	and.w	r1, r1, #15
 80026b8:	408c      	lsls	r4, r1
 80026ba:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 80026be:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80026c2:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 80026c6:	4a23      	ldr	r2, [pc, #140]	; (8002754 <USB_DeactivateEndpoint+0xd4>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80026ce:	2000      	movs	r0, #0
 80026d0:	bc30      	pop	{r4, r5}
 80026d2:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80026d4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80026d8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80026dc:	2a00      	cmp	r2, #0
 80026de:	db1e      	blt.n	800271e <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80026e0:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 80026e4:	780a      	ldrb	r2, [r1, #0]
 80026e6:	f002 020f 	and.w	r2, r2, #15
 80026ea:	2401      	movs	r4, #1
 80026ec:	fa04 f202 	lsl.w	r2, r4, r2
 80026f0:	b292      	uxth	r2, r2
 80026f2:	ea25 0202 	bic.w	r2, r5, r2
 80026f6:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80026fa:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80026fe:	7809      	ldrb	r1, [r1, #0]
 8002700:	f001 010f 	and.w	r1, r1, #15
 8002704:	408c      	lsls	r4, r1
 8002706:	b2a4      	uxth	r4, r4
 8002708:	ea22 0404 	bic.w	r4, r2, r4
 800270c:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002710:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8002714:	4a10      	ldr	r2, [pc, #64]	; (8002758 <USB_DeactivateEndpoint+0xd8>)
 8002716:	400a      	ands	r2, r1
 8002718:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 800271c:	e7d7      	b.n	80026ce <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800271e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002722:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002726:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800272a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800272e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002732:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002736:	e7d3      	b.n	80026e0 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002738:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800273c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002740:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8002744:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002748:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800274c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002750:	e7a1      	b.n	8002696 <USB_DeactivateEndpoint+0x16>
 8002752:	bf00      	nop
 8002754:	eff37800 	.word	0xeff37800
 8002758:	ec337800 	.word	0xec337800

0800275c <USB_EP0StartXfer>:
{
 800275c:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 800275e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002760:	784c      	ldrb	r4, [r1, #1]
 8002762:	2c01      	cmp	r4, #1
 8002764:	d026      	beq.n	80027b4 <USB_EP0StartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002766:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800276a:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800276e:	691c      	ldr	r4, [r3, #16]
 8002770:	0ce4      	lsrs	r4, r4, #19
 8002772:	04e4      	lsls	r4, r4, #19
 8002774:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002776:	691c      	ldr	r4, [r3, #16]
 8002778:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800277c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8002780:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8002782:	694c      	ldr	r4, [r1, #20]
 8002784:	b10c      	cbz	r4, 800278a <USB_EP0StartXfer+0x2e>
      ep->xfer_len = ep->maxpacket;
 8002786:	688c      	ldr	r4, [r1, #8]
 8002788:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800278a:	691c      	ldr	r4, [r3, #16]
 800278c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002790:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002792:	691c      	ldr	r4, [r3, #16]
 8002794:	688d      	ldr	r5, [r1, #8]
 8002796:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800279a:	432c      	orrs	r4, r5
 800279c:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 800279e:	2a01      	cmp	r2, #1
 80027a0:	d065      	beq.n	800286e <USB_EP0StartXfer+0x112>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80027a2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80027a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80027aa:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80027ae:	2000      	movs	r0, #0
 80027b0:	bc70      	pop	{r4, r5, r6}
 80027b2:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 80027b4:	694c      	ldr	r4, [r1, #20]
 80027b6:	bb6c      	cbnz	r4, 8002814 <USB_EP0StartXfer+0xb8>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80027b8:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80027bc:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80027c0:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80027c4:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80027c8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80027cc:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80027d0:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80027d4:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80027d8:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80027dc:	0ced      	lsrs	r5, r5, #19
 80027de:	04ed      	lsls	r5, r5, #19
 80027e0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 80027e4:	2a01      	cmp	r2, #1
 80027e6:	d033      	beq.n	8002850 <USB_EP0StartXfer+0xf4>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80027e8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80027ec:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80027f0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80027f4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80027f8:	694b      	ldr	r3, [r1, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0d7      	beq.n	80027ae <USB_EP0StartXfer+0x52>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80027fe:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002802:	7809      	ldrb	r1, [r1, #0]
 8002804:	f001 040f 	and.w	r4, r1, #15
 8002808:	2101      	movs	r1, #1
 800280a:	40a1      	lsls	r1, r4
 800280c:	430a      	orrs	r2, r1
 800280e:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8002812:	e7cc      	b.n	80027ae <USB_EP0StartXfer+0x52>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002814:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8002818:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 800281c:	6925      	ldr	r5, [r4, #16]
 800281e:	0ced      	lsrs	r5, r5, #19
 8002820:	04ed      	lsls	r5, r5, #19
 8002822:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002824:	6925      	ldr	r5, [r4, #16]
 8002826:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 800282a:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 800282e:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002830:	694e      	ldr	r6, [r1, #20]
 8002832:	688d      	ldr	r5, [r1, #8]
 8002834:	42ae      	cmp	r6, r5
 8002836:	d900      	bls.n	800283a <USB_EP0StartXfer+0xde>
        ep->xfer_len = ep->maxpacket;
 8002838:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800283a:	6925      	ldr	r5, [r4, #16]
 800283c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002840:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002842:	6925      	ldr	r5, [r4, #16]
 8002844:	694e      	ldr	r6, [r1, #20]
 8002846:	f3c6 0612 	ubfx	r6, r6, #0, #19
 800284a:	4335      	orrs	r5, r6
 800284c:	6125      	str	r5, [r4, #16]
 800284e:	e7c9      	b.n	80027e4 <USB_EP0StartXfer+0x88>
      if ((uint32_t)ep->dma_addr != 0U)
 8002850:	690a      	ldr	r2, [r1, #16]
 8002852:	b11a      	cbz	r2, 800285c <USB_EP0StartXfer+0x100>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002854:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002858:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800285c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002860:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002864:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002868:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 800286c:	e79f      	b.n	80027ae <USB_EP0StartXfer+0x52>
      if ((uint32_t)ep->xfer_buff != 0U)
 800286e:	68ca      	ldr	r2, [r1, #12]
 8002870:	2a00      	cmp	r2, #0
 8002872:	d096      	beq.n	80027a2 <USB_EP0StartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002874:	615a      	str	r2, [r3, #20]
 8002876:	e794      	b.n	80027a2 <USB_EP0StartXfer+0x46>

08002878 <USB_WritePacket>:
{
 8002878:	b470      	push	{r4, r5, r6}
 800287a:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 800287e:	b964      	cbnz	r4, 800289a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002880:	3303      	adds	r3, #3
 8002882:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8002884:	e007      	b.n	8002896 <USB_WritePacket+0x1e>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002886:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 800288a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002892:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8002894:	3401      	adds	r4, #1
 8002896:	42ac      	cmp	r4, r5
 8002898:	d3f5      	bcc.n	8002886 <USB_WritePacket+0xe>
}
 800289a:	2000      	movs	r0, #0
 800289c:	bc70      	pop	{r4, r5, r6}
 800289e:	4770      	bx	lr

080028a0 <USB_EPStartXfer>:
{
 80028a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a2:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 80028a4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80028a6:	784c      	ldrb	r4, [r1, #1]
 80028a8:	2c01      	cmp	r4, #1
 80028aa:	d02b      	beq.n	8002904 <USB_EPStartXfer+0x64>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80028ac:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80028b0:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 80028b4:	6925      	ldr	r5, [r4, #16]
 80028b6:	0ced      	lsrs	r5, r5, #19
 80028b8:	04ed      	lsls	r5, r5, #19
 80028ba:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80028bc:	6925      	ldr	r5, [r4, #16]
 80028be:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80028c2:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80028c6:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 80028c8:	694d      	ldr	r5, [r1, #20]
 80028ca:	2d00      	cmp	r5, #0
 80028cc:	f040 80c5 	bne.w	8002a5a <USB_EPStartXfer+0x1ba>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80028d0:	6925      	ldr	r5, [r4, #16]
 80028d2:	688e      	ldr	r6, [r1, #8]
 80028d4:	f3c6 0612 	ubfx	r6, r6, #0, #19
 80028d8:	4335      	orrs	r5, r6
 80028da:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80028dc:	6925      	ldr	r5, [r4, #16]
 80028de:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80028e2:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 80028e4:	2a01      	cmp	r2, #1
 80028e6:	f000 80cd 	beq.w	8002a84 <USB_EPStartXfer+0x1e4>
    if (ep->type == EP_TYPE_ISOC)
 80028ea:	78ca      	ldrb	r2, [r1, #3]
 80028ec:	2a01      	cmp	r2, #1
 80028ee:	f000 80cf 	beq.w	8002a90 <USB_EPStartXfer+0x1f0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80028f2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80028f6:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80028fa:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 80028fe:	2000      	movs	r0, #0
 8002900:	b003      	add	sp, #12
 8002902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8002904:	694c      	ldr	r4, [r1, #20]
 8002906:	bb84      	cbnz	r4, 800296a <USB_EPStartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002908:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800290c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002910:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002914:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002918:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800291c:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002920:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002924:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002928:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800292c:	0ced      	lsrs	r5, r5, #19
 800292e:	04ed      	lsls	r5, r5, #19
 8002930:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8002934:	2a01      	cmp	r2, #1
 8002936:	d04c      	beq.n	80029d2 <USB_EPStartXfer+0x132>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002938:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 800293c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002940:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002944:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002948:	78cc      	ldrb	r4, [r1, #3]
 800294a:	2c01      	cmp	r4, #1
 800294c:	d06a      	beq.n	8002a24 <USB_EPStartXfer+0x184>
        if (ep->xfer_len > 0U)
 800294e:	694b      	ldr	r3, [r1, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0d4      	beq.n	80028fe <USB_EPStartXfer+0x5e>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002954:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002958:	7809      	ldrb	r1, [r1, #0]
 800295a:	f001 040f 	and.w	r4, r1, #15
 800295e:	2101      	movs	r1, #1
 8002960:	40a1      	lsls	r1, r4
 8002962:	430a      	orrs	r2, r1
 8002964:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8002968:	e7c9      	b.n	80028fe <USB_EPStartXfer+0x5e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800296a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800296e:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8002972:	0ced      	lsrs	r5, r5, #19
 8002974:	04ed      	lsls	r5, r5, #19
 8002976:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800297a:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 800297e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8002982:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8002986:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800298a:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 800298e:	694d      	ldr	r5, [r1, #20]
 8002990:	688f      	ldr	r7, [r1, #8]
 8002992:	443d      	add	r5, r7
 8002994:	3d01      	subs	r5, #1
 8002996:	fbb5 f5f7 	udiv	r5, r5, r7
 800299a:	4f47      	ldr	r7, [pc, #284]	; (8002ab8 <USB_EPStartXfer+0x218>)
 800299c:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 80029a0:	4335      	orrs	r5, r6
 80029a2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80029a6:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 80029aa:	694e      	ldr	r6, [r1, #20]
 80029ac:	f3c6 0612 	ubfx	r6, r6, #0, #19
 80029b0:	4335      	orrs	r5, r6
 80029b2:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80029b6:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80029ba:	78cd      	ldrb	r5, [r1, #3]
 80029bc:	2d01      	cmp	r5, #1
 80029be:	d1b9      	bne.n	8002934 <USB_EPStartXfer+0x94>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80029c0:	6925      	ldr	r5, [r4, #16]
 80029c2:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 80029c6:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80029c8:	6925      	ldr	r5, [r4, #16]
 80029ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80029ce:	6125      	str	r5, [r4, #16]
 80029d0:	e7b0      	b.n	8002934 <USB_EPStartXfer+0x94>
      if ((uint32_t)ep->dma_addr != 0U)
 80029d2:	690a      	ldr	r2, [r1, #16]
 80029d4:	b11a      	cbz	r2, 80029de <USB_EPStartXfer+0x13e>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80029d6:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 80029da:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 80029de:	78ca      	ldrb	r2, [r1, #3]
 80029e0:	2a01      	cmp	r2, #1
 80029e2:	d008      	beq.n	80029f6 <USB_EPStartXfer+0x156>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80029e4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 80029e8:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80029ec:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80029f0:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 80029f4:	e783      	b.n	80028fe <USB_EPStartXfer+0x5e>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80029f6:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80029fa:	f412 7f80 	tst.w	r2, #256	; 0x100
 80029fe:	d108      	bne.n	8002a12 <USB_EPStartXfer+0x172>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002a00:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002a04:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8002a08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a0c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8002a10:	e7e8      	b.n	80029e4 <USB_EPStartXfer+0x144>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002a12:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8002a16:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8002a1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a1e:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8002a22:	e7df      	b.n	80029e4 <USB_EPStartXfer+0x144>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002a24:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8002a28:	f414 7f80 	tst.w	r4, #256	; 0x100
 8002a2c:	d10e      	bne.n	8002a4c <USB_EPStartXfer+0x1ac>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002a2e:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002a32:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8002a36:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8002a3a:	4614      	mov	r4, r2
 8002a3c:	460b      	mov	r3, r1
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002a3e:	68c9      	ldr	r1, [r1, #12]
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	8a9b      	ldrh	r3, [r3, #20]
 8002a44:	9400      	str	r4, [sp, #0]
 8002a46:	f7ff ff17 	bl	8002878 <USB_WritePacket>
 8002a4a:	e758      	b.n	80028fe <USB_EPStartXfer+0x5e>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002a4c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8002a50:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8002a54:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8002a58:	e7ef      	b.n	8002a3a <USB_EPStartXfer+0x19a>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002a5a:	688e      	ldr	r6, [r1, #8]
 8002a5c:	4435      	add	r5, r6
 8002a5e:	3d01      	subs	r5, #1
 8002a60:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002a64:	6926      	ldr	r6, [r4, #16]
 8002a66:	4f14      	ldr	r7, [pc, #80]	; (8002ab8 <USB_EPStartXfer+0x218>)
 8002a68:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8002a6c:	433e      	orrs	r6, r7
 8002a6e:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002a70:	6927      	ldr	r7, [r4, #16]
 8002a72:	688e      	ldr	r6, [r1, #8]
 8002a74:	b2ad      	uxth	r5, r5
 8002a76:	fb06 f505 	mul.w	r5, r6, r5
 8002a7a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002a7e:	433d      	orrs	r5, r7
 8002a80:	6125      	str	r5, [r4, #16]
 8002a82:	e72f      	b.n	80028e4 <USB_EPStartXfer+0x44>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002a84:	68ca      	ldr	r2, [r1, #12]
 8002a86:	2a00      	cmp	r2, #0
 8002a88:	f43f af2f 	beq.w	80028ea <USB_EPStartXfer+0x4a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002a8c:	6162      	str	r2, [r4, #20]
 8002a8e:	e72c      	b.n	80028ea <USB_EPStartXfer+0x4a>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002a90:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8002a94:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002a98:	d106      	bne.n	8002aa8 <USB_EPStartXfer+0x208>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002a9a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002a9e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002aa2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002aa6:	e724      	b.n	80028f2 <USB_EPStartXfer+0x52>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002aa8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002aac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ab0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002ab4:	e71d      	b.n	80028f2 <USB_EPStartXfer+0x52>
 8002ab6:	bf00      	nop
 8002ab8:	1ff80000 	.word	0x1ff80000

08002abc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002abc:	3203      	adds	r2, #3
 8002abe:	0892      	lsrs	r2, r2, #2
  for (i = 0U; i < count32b; i++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d20c      	bcs.n	8002ae0 <USB_ReadPacket+0x24>
{
 8002ac6:	b410      	push	{r4}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002ac8:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8002acc:	6824      	ldr	r4, [r4, #0]
 8002ace:	f841 4b04 	str.w	r4, [r1], #4
  for (i = 0U; i < count32b; i++)
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d3f7      	bcc.n	8002ac8 <USB_ReadPacket+0xc>
}
 8002ad8:	4608      	mov	r0, r1
 8002ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4770      	bx	lr

08002ae4 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002ae4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002ae6:	784a      	ldrb	r2, [r1, #1]
 8002ae8:	2a01      	cmp	r2, #1
 8002aea:	d014      	beq.n	8002b16 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002aec:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002af0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8002af4:	2a00      	cmp	r2, #0
 8002af6:	db06      	blt.n	8002b06 <USB_EPSetStall+0x22>
 8002af8:	b12b      	cbz	r3, 8002b06 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002afa:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002afe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b02:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002b06:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002b0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b0e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002b12:	2000      	movs	r0, #0
 8002b14:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002b16:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002b1a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002b1e:	2a00      	cmp	r2, #0
 8002b20:	db06      	blt.n	8002b30 <USB_EPSetStall+0x4c>
 8002b22:	b12b      	cbz	r3, 8002b30 <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002b24:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002b28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b2c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002b30:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b38:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002b3c:	e7e9      	b.n	8002b12 <USB_EPSetStall+0x2e>

08002b3e <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8002b3e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002b40:	784a      	ldrb	r2, [r1, #1]
 8002b42:	2a01      	cmp	r2, #1
 8002b44:	d00e      	beq.n	8002b64 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b46:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002b4a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002b4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b52:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002b56:	78cb      	ldrb	r3, [r1, #3]
 8002b58:	3b02      	subs	r3, #2
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d915      	bls.n	8002b8c <USB_EPClearStall+0x4e>
}
 8002b60:	2000      	movs	r0, #0
 8002b62:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b64:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002b68:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002b6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b70:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002b74:	78cb      	ldrb	r3, [r1, #3]
 8002b76:	3b02      	subs	r3, #2
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d8f0      	bhi.n	8002b60 <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002b7e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b86:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8002b8a:	e7e9      	b.n	8002b60 <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002b8c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002b98:	e7e2      	b.n	8002b60 <USB_EPClearStall+0x22>

08002b9a <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002b9a:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002b9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ba2:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002ba6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002baa:	0109      	lsls	r1, r1, #4
 8002bac:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
}
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	4770      	bx	lr

08002bba <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002bba:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002bc6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002bca:	f023 0302 	bic.w	r3, r3, #2
 8002bce:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	4770      	bx	lr

08002bd6 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002bd6:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002be2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002be6:	f043 0302 	orr.w	r3, r3, #2
 8002bea:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002bee:	2000      	movs	r0, #0
 8002bf0:	4770      	bx	lr

08002bf2 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002bf2:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002bf4:	6980      	ldr	r0, [r0, #24]
}
 8002bf6:	4010      	ands	r0, r2
 8002bf8:	4770      	bx	lr

08002bfa <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002bfa:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002bfe:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002c02:	69c0      	ldr	r0, [r0, #28]
 8002c04:	4018      	ands	r0, r3
}
 8002c06:	0c00      	lsrs	r0, r0, #16
 8002c08:	4770      	bx	lr

08002c0a <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002c0a:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002c0e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002c12:	69c0      	ldr	r0, [r0, #28]
 8002c14:	4018      	ands	r0, r3
}
 8002c16:	b280      	uxth	r0, r0
 8002c18:	4770      	bx	lr

08002c1a <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002c1a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002c1e:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002c22:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8002c26:	6940      	ldr	r0, [r0, #20]
}
 8002c28:	4010      	ands	r0, r2
 8002c2a:	4770      	bx	lr

08002c2c <USB_ReadDevInEPInterrupt>:
{
 8002c2c:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 8002c2e:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002c32:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002c36:	f001 020f 	and.w	r2, r1, #15
 8002c3a:	40d3      	lsrs	r3, r2
 8002c3c:	01db      	lsls	r3, r3, #7
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002c42:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 8002c46:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8002c4a:	6880      	ldr	r0, [r0, #8]
}
 8002c4c:	4018      	ands	r0, r3
 8002c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002c54:	6940      	ldr	r0, [r0, #20]
}
 8002c56:	f000 0001 	and.w	r0, r0, #1
 8002c5a:	4770      	bx	lr

08002c5c <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002c5c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002c60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c64:	f023 0307 	bic.w	r3, r3, #7
 8002c68:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002c6c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002c78:	2000      	movs	r0, #0
 8002c7a:	4770      	bx	lr

08002c7c <USB_EP0_OutStart>:
{
 8002c7c:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c7e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002c80:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <USB_EP0_OutStart+0x5c>)
 8002c82:	429c      	cmp	r4, r3
 8002c84:	d903      	bls.n	8002c8e <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002c86:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	db16      	blt.n	8002cbc <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002c8e:	2400      	movs	r4, #0
 8002c90:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002c94:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002c98:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002c9c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002ca0:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002ca4:	f044 0418 	orr.w	r4, r4, #24
 8002ca8:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002cac:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002cb0:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8002cb4:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8002cb8:	2901      	cmp	r1, #1
 8002cba:	d003      	beq.n	8002cc4 <USB_EP0_OutStart+0x48>
}
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cc2:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002cc4:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002cc8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002ccc:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8002cd0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002cd4:	e7f2      	b.n	8002cbc <USB_EP0_OutStart+0x40>
 8002cd6:	bf00      	nop
 8002cd8:	4f54300a 	.word	0x4f54300a

08002cdc <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002cdc:	4b01      	ldr	r3, [pc, #4]	; (8002ce4 <LL_SetSystemCoreClock+0x8>)
 8002cde:	6018      	str	r0, [r3, #0]
}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8002ce8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002cea:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8002cee:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002cf2:	b15b      	cbz	r3, 8002d0c <USBD_CDC_EP0_RxReady+0x24>
 8002cf4:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002cf8:	28ff      	cmp	r0, #255	; 0xff
 8002cfa:	d007      	beq.n	8002d0c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002d02:	4621      	mov	r1, r4
 8002d04:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8002d06:	23ff      	movs	r3, #255	; 0xff
 8002d08:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	bd10      	pop	{r4, pc}

08002d10 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8002d10:	2343      	movs	r3, #67	; 0x43
 8002d12:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8002d14:	4800      	ldr	r0, [pc, #0]	; (8002d18 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002d16:	4770      	bx	lr
 8002d18:	20000048 	.word	0x20000048

08002d1c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8002d1c:	2343      	movs	r3, #67	; 0x43
 8002d1e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8002d20:	4800      	ldr	r0, [pc, #0]	; (8002d24 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002d22:	4770      	bx	lr
 8002d24:	2000008c 	.word	0x2000008c

08002d28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8002d28:	2343      	movs	r3, #67	; 0x43
 8002d2a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002d2c:	4800      	ldr	r0, [pc, #0]	; (8002d30 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002d2e:	4770      	bx	lr
 8002d30:	200000dc 	.word	0x200000dc

08002d34 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8002d34:	230a      	movs	r3, #10
 8002d36:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 8002d38:	4800      	ldr	r0, [pc, #0]	; (8002d3c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002d3a:	4770      	bx	lr
 8002d3c:	200000d0 	.word	0x200000d0

08002d40 <USBD_CDC_DataOut>:
{
 8002d40:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002d42:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 8002d46:	b175      	cbz	r5, 8002d66 <USBD_CDC_DataOut+0x26>
 8002d48:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8002d4a:	f001 f84c 	bl	8003de6 <USBD_LL_GetRxDataSize>
 8002d4e:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002d52:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8002d5c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8002d60:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8002d62:	2000      	movs	r0, #0
}
 8002d64:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 8002d66:	2003      	movs	r0, #3
 8002d68:	e7fc      	b.n	8002d64 <USBD_CDC_DataOut+0x24>

08002d6a <USBD_CDC_DataIn>:
{
 8002d6a:	b570      	push	{r4, r5, r6, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8002d6c:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 8002d70:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8002d74:	b355      	cbz	r5, 8002dcc <USBD_CDC_DataIn+0x62>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8002d76:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002d7a:	0093      	lsls	r3, r2, #2
 8002d7c:	4403      	add	r3, r0
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	b96b      	cbnz	r3, 8002d9e <USBD_CDC_DataIn+0x34>
    hcdc->TxState = 0U;
 8002d82:	2400      	movs	r4, #0
 8002d84:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8002d88:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	460a      	mov	r2, r1
 8002d90:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8002d94:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8002d98:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8002d9a:	4620      	mov	r0, r4
}
 8002d9c:	bd70      	pop	{r4, r5, r6, pc}
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8002d9e:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 8002da2:	00b2      	lsls	r2, r6, #2
 8002da4:	4414      	add	r4, r2
 8002da6:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8002da8:	fbb3 f2f4 	udiv	r2, r3, r4
 8002dac:	fb04 3312 	mls	r3, r4, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e6      	bne.n	8002d82 <USBD_CDC_DataIn+0x18>
    pdev->ep_in[epnum].total_length = 0U;
 8002db4:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8002db8:	0093      	lsls	r3, r2, #2
 8002dba:	4403      	add	r3, r0
 8002dbc:	2400      	movs	r4, #0
 8002dbe:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002dc0:	4623      	mov	r3, r4
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	f001 f851 	bl	8003e6a <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8002dc8:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8002dca:	e7e7      	b.n	8002d9c <USBD_CDC_DataIn+0x32>
    return (uint8_t)USBD_FAIL;
 8002dcc:	2003      	movs	r0, #3
 8002dce:	e7e5      	b.n	8002d9c <USBD_CDC_DataIn+0x32>

08002dd0 <USBD_CDC_Setup>:
{
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	4605      	mov	r5, r0
 8002dd6:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002dd8:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8002de2:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002de6:	780b      	ldrb	r3, [r1, #0]
 8002de8:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8002dec:	d027      	beq.n	8002e3e <USBD_CDC_Setup+0x6e>
 8002dee:	2a20      	cmp	r2, #32
 8002df0:	d15b      	bne.n	8002eaa <USBD_CDC_Setup+0xda>
    if (req->wLength != 0U)
 8002df2:	88ca      	ldrh	r2, [r1, #6]
 8002df4:	b93a      	cbnz	r2, 8002e06 <USBD_CDC_Setup+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002df6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	7848      	ldrb	r0, [r1, #1]
 8002e00:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8002e02:	2000      	movs	r0, #0
 8002e04:	e054      	b.n	8002eb0 <USBD_CDC_Setup+0xe0>
      if ((req->bmRequest & 0x80U) != 0U)
 8002e06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e0a:	d00c      	beq.n	8002e26 <USBD_CDC_Setup+0x56>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002e0c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4631      	mov	r1, r6
 8002e14:	7860      	ldrb	r0, [r4, #1]
 8002e16:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8002e18:	88e2      	ldrh	r2, [r4, #6]
 8002e1a:	4631      	mov	r1, r6
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 fdbe 	bl	800399e <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8002e22:	2000      	movs	r0, #0
 8002e24:	e044      	b.n	8002eb0 <USBD_CDC_Setup+0xe0>
        hcdc->CmdOpCode = req->bRequest;
 8002e26:	784b      	ldrb	r3, [r1, #1]
 8002e28:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8002e2c:	798b      	ldrb	r3, [r1, #6]
 8002e2e:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8002e32:	88ca      	ldrh	r2, [r1, #6]
 8002e34:	4631      	mov	r1, r6
 8002e36:	f000 fdc7 	bl	80039c8 <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	e038      	b.n	8002eb0 <USBD_CDC_Setup+0xe0>
    switch (req->bRequest)
 8002e3e:	784b      	ldrb	r3, [r1, #1]
 8002e40:	2b0b      	cmp	r3, #11
 8002e42:	d82e      	bhi.n	8002ea2 <USBD_CDC_Setup+0xd2>
 8002e44:	e8df f003 	tbb	[pc, r3]
 8002e48:	2d2d3606 	.word	0x2d2d3606
 8002e4c:	2d2d2d2d 	.word	0x2d2d2d2d
 8002e50:	23142d2d 	.word	0x23142d2d
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e54:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d105      	bne.n	8002e68 <USBD_CDC_Setup+0x98>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	a901      	add	r1, sp, #4
 8002e60:	f000 fd9d 	bl	800399e <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8002e64:	2000      	movs	r0, #0
 8002e66:	e023      	b.n	8002eb0 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8002e68:	f000 fa66 	bl	8003338 <USBD_CtlError>
        ret = USBD_FAIL;
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	e01f      	b.n	8002eb0 <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d106      	bne.n	8002e86 <USBD_CDC_Setup+0xb6>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f10d 0107 	add.w	r1, sp, #7
 8002e7e:	f000 fd8e 	bl	800399e <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8002e82:	2000      	movs	r0, #0
 8002e84:	e014      	b.n	8002eb0 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8002e86:	f000 fa57 	bl	8003338 <USBD_CtlError>
        ret = USBD_FAIL;
 8002e8a:	2003      	movs	r0, #3
 8002e8c:	e010      	b.n	8002eb0 <USBD_CDC_Setup+0xe0>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8002e8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d101      	bne.n	8002e9a <USBD_CDC_Setup+0xca>
  USBD_StatusTypeDef ret = USBD_OK;
 8002e96:	2000      	movs	r0, #0
 8002e98:	e00a      	b.n	8002eb0 <USBD_CDC_Setup+0xe0>
        USBD_CtlError(pdev, req);
 8002e9a:	f000 fa4d 	bl	8003338 <USBD_CtlError>
        ret = USBD_FAIL;
 8002e9e:	2003      	movs	r0, #3
 8002ea0:	e006      	b.n	8002eb0 <USBD_CDC_Setup+0xe0>
      USBD_CtlError(pdev, req);
 8002ea2:	f000 fa49 	bl	8003338 <USBD_CtlError>
      ret = USBD_FAIL;
 8002ea6:	2003      	movs	r0, #3
      break;
 8002ea8:	e002      	b.n	8002eb0 <USBD_CDC_Setup+0xe0>
    USBD_CtlError(pdev, req);
 8002eaa:	f000 fa45 	bl	8003338 <USBD_CtlError>
    ret = USBD_FAIL;
 8002eae:	2003      	movs	r0, #3
}
 8002eb0:	b002      	add	sp, #8
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
  USBD_StatusTypeDef ret = USBD_OK;
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	e7fb      	b.n	8002eb0 <USBD_CDC_Setup+0xe0>

08002eb8 <USBD_CDC_DeInit>:
{
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8002ebc:	2181      	movs	r1, #129	; 0x81
 8002ebe:	f000 ffb4 	bl	8003e2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8002ec2:	2500      	movs	r5, #0
 8002ec4:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 ffae 	bl	8003e2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8002ece:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8002ed2:	2182      	movs	r1, #130	; 0x82
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f000 ffa8 	bl	8003e2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8002eda:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8002ede:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8002ee2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8002ee6:	b14b      	cbz	r3, 8002efc <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002ee8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8002ef0:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8002ef4:	f001 f818 	bl	8003f28 <free>
    pdev->pClassData = NULL;
 8002ef8:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8002efc:	2000      	movs	r0, #0
 8002efe:	bd38      	pop	{r3, r4, r5, pc}

08002f00 <USBD_CDC_Init>:
{
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8002f04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002f08:	f001 f806 	bl	8003f18 <malloc>
  if (hcdc == NULL)
 8002f0c:	b3b0      	cbz	r0, 8002f7c <USBD_CDC_Init+0x7c>
 8002f0e:	4605      	mov	r5, r0
  pdev->pClassData = (void *)hcdc;
 8002f10:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f14:	7c23      	ldrb	r3, [r4, #16]
 8002f16:	bbb3      	cbnz	r3, 8002f86 <USBD_CDC_Init+0x86>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	2181      	movs	r1, #129	; 0x81
 8002f20:	4620      	mov	r0, r4
 8002f22:	f000 ff77 	bl	8003e14 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002f26:	2601      	movs	r6, #1
 8002f28:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f2e:	2202      	movs	r2, #2
 8002f30:	4631      	mov	r1, r6
 8002f32:	4620      	mov	r0, r4
 8002f34:	f000 ff6e 	bl	8003e14 <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002f38:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8002f3c:	2310      	movs	r3, #16
 8002f3e:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8002f42:	2308      	movs	r3, #8
 8002f44:	2203      	movs	r2, #3
 8002f46:	2182      	movs	r1, #130	; 0x82
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f000 ff63 	bl	8003e14 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002f54:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4798      	blx	r3
  hcdc->TxState = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8002f62:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f66:	7c23      	ldrb	r3, [r4, #16]
 8002f68:	b30b      	cbz	r3, 8002fae <USBD_CDC_Init+0xae>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002f6a:	2340      	movs	r3, #64	; 0x40
 8002f6c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8002f70:	2101      	movs	r1, #1
 8002f72:	4620      	mov	r0, r4
 8002f74:	f000 ff81 	bl	8003e7a <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8002f78:	2000      	movs	r0, #0
}
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8002f82:	2002      	movs	r0, #2
 8002f84:	e7f9      	b.n	8002f7a <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8002f86:	2340      	movs	r3, #64	; 0x40
 8002f88:	2202      	movs	r2, #2
 8002f8a:	2181      	movs	r1, #129	; 0x81
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f000 ff41 	bl	8003e14 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8002f92:	2601      	movs	r6, #1
 8002f94:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8002f96:	2340      	movs	r3, #64	; 0x40
 8002f98:	2202      	movs	r2, #2
 8002f9a:	4631      	mov	r1, r6
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f000 ff39 	bl	8003e14 <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8002fa2:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8002fa6:	2310      	movs	r3, #16
 8002fa8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8002fac:	e7c9      	b.n	8002f42 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fb2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f000 ff5e 	bl	8003e7a <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e7db      	b.n	8002f7a <USBD_CDC_Init+0x7a>

08002fc2 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8002fc2:	b119      	cbz	r1, 8002fcc <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8002fc4:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8002fc8:	2000      	movs	r0, #0
 8002fca:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8002fcc:	2003      	movs	r0, #3
}
 8002fce:	4770      	bx	lr

08002fd0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002fd0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 8002fd4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8002fd8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
}
 8002fdc:	2000      	movs	r0, #0
 8002fde:	4770      	bx	lr

08002fe0 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002fe0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 8002fe4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
}
 8002fe8:	2000      	movs	r0, #0
 8002fea:	4770      	bx	lr

08002fec <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8002fec:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8002ff0:	b19a      	cbz	r2, 800301a <USBD_CDC_ReceivePacket+0x2e>
{
 8002ff2:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002ff4:	7c03      	ldrb	r3, [r0, #16]
 8002ff6:	b13b      	cbz	r3, 8003008 <USBD_CDC_ReceivePacket+0x1c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8002ff8:	2340      	movs	r3, #64	; 0x40
 8002ffa:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002ffe:	2101      	movs	r1, #1
 8003000:	f000 ff3b 	bl	8003e7a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8003004:	2000      	movs	r0, #0
}
 8003006:	bd08      	pop	{r3, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800300c:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003010:	2101      	movs	r1, #1
 8003012:	f000 ff32 	bl	8003e7a <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8003016:	2000      	movs	r0, #0
 8003018:	e7f5      	b.n	8003006 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 800301a:	2003      	movs	r0, #3
}
 800301c:	4770      	bx	lr

0800301e <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800301e:	b1c0      	cbz	r0, 8003052 <USBD_Init+0x34>
{
 8003020:	b508      	push	{r3, lr}
 8003022:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8003024:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 8003028:	b110      	cbz	r0, 8003030 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 800302a:	2000      	movs	r0, #0
 800302c:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8003030:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 8003034:	b110      	cbz	r0, 800303c <USBD_Init+0x1e>
  {
    pdev->pConfDesc = NULL;
 8003036:	2000      	movs	r0, #0
 8003038:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800303c:	b109      	cbz	r1, 8003042 <USBD_Init+0x24>
  {
    pdev->pDesc = pdesc;
 800303e:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
 8003042:	4618      	mov	r0, r3
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003044:	2301      	movs	r3, #1
 8003046:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 800304a:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800304c:	f000 fe80 	bl	8003d50 <USBD_LL_Init>

  return ret;
}
 8003050:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003052:	2003      	movs	r0, #3
}
 8003054:	4770      	bx	lr

08003056 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003056:	b510      	push	{r4, lr}
 8003058:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8003060:	b159      	cbz	r1, 800307a <USBD_RegisterClass+0x24>
 8003062:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8003064:	f8c4 12b8 	str.w	r1, [r4, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003068:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800306a:	f10d 0006 	add.w	r0, sp, #6
 800306e:	4798      	blx	r3
 8003070:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8003074:	2000      	movs	r0, #0
}
 8003076:	b002      	add	sp, #8
 8003078:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800307a:	2003      	movs	r0, #3
 800307c:	e7fb      	b.n	8003076 <USBD_RegisterClass+0x20>

0800307e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800307e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8003080:	f000 fec0 	bl	8003e04 <USBD_LL_Start>
}
 8003084:	bd08      	pop	{r3, pc}

08003086 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003086:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003088:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800308c:	b113      	cbz	r3, 8003094 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4798      	blx	r3
  }

  return ret;
}
 8003092:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003094:	2003      	movs	r0, #3
 8003096:	e7fc      	b.n	8003092 <USBD_SetClassConfig+0xc>

08003098 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003098:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800309a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800309e:	b10b      	cbz	r3, 80030a4 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80030a4:	2000      	movs	r0, #0
 80030a6:	bd08      	pop	{r3, pc}

080030a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80030a8:	b538      	push	{r3, r4, r5, lr}
 80030aa:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80030ac:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 80030b0:	4628      	mov	r0, r5
 80030b2:	f000 f92d 	bl	8003310 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80030bc:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 80030c0:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80030c4:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 80030c8:	f001 031f 	and.w	r3, r1, #31
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d00d      	beq.n	80030ec <USBD_LL_SetupStage+0x44>
 80030d0:	b13b      	cbz	r3, 80030e2 <USBD_LL_SetupStage+0x3a>
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d00f      	beq.n	80030f6 <USBD_LL_SetupStage+0x4e>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80030d6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80030da:	4620      	mov	r0, r4
 80030dc:	f000 fead 	bl	8003e3a <USBD_LL_StallEP>
      break;
 80030e0:	e003      	b.n	80030ea <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80030e2:	4629      	mov	r1, r5
 80030e4:	4620      	mov	r0, r4
 80030e6:	f000 face 	bl	8003686 <USBD_StdDevReq>
  }

  return ret;
}
 80030ea:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80030ec:	4629      	mov	r1, r5
 80030ee:	4620      	mov	r0, r4
 80030f0:	f000 fb04 	bl	80036fc <USBD_StdItfReq>
      break;
 80030f4:	e7f9      	b.n	80030ea <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80030f6:	4629      	mov	r1, r5
 80030f8:	4620      	mov	r0, r4
 80030fa:	f000 fb33 	bl	8003764 <USBD_StdEPReq>
      break;
 80030fe:	e7f4      	b.n	80030ea <USBD_LL_SetupStage+0x42>

08003100 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003100:	b510      	push	{r4, lr}
 8003102:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8003104:	bb29      	cbnz	r1, 8003152 <USBD_LL_DataOutStage+0x52>
 8003106:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003108:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800310c:	2a03      	cmp	r2, #3
 800310e:	d001      	beq.n	8003114 <USBD_LL_DataOutStage+0x14>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003110:	2000      	movs	r0, #0
 8003112:	e029      	b.n	8003168 <USBD_LL_DataOutStage+0x68>
      if (pep->rem_length > pep->maxpacket)
 8003114:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8003118:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 800311c:	4291      	cmp	r1, r2
 800311e:	d80d      	bhi.n	800313c <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003120:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	b123      	cbz	r3, 8003132 <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003128:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800312c:	2a03      	cmp	r2, #3
 800312e:	d100      	bne.n	8003132 <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev);
 8003130:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8003132:	4620      	mov	r0, r4
 8003134:	f000 fc5f 	bl	80039f6 <USBD_CtlSendStatus>
  return USBD_OK;
 8003138:	2000      	movs	r0, #0
 800313a:	e015      	b.n	8003168 <USBD_LL_DataOutStage+0x68>
        pep->rem_length -= pep->maxpacket;
 800313c:	1a89      	subs	r1, r1, r2
 800313e:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8003142:	428a      	cmp	r2, r1
 8003144:	bf28      	it	cs
 8003146:	460a      	movcs	r2, r1
 8003148:	4619      	mov	r1, r3
 800314a:	f000 fc4c 	bl	80039e6 <USBD_CtlContinueRx>
  return USBD_OK;
 800314e:	2000      	movs	r0, #0
 8003150:	e00a      	b.n	8003168 <USBD_LL_DataOutStage+0x68>
 8003152:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataOut != NULL) &&
 8003154:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	b133      	cbz	r3, 800316a <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800315c:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003160:	2903      	cmp	r1, #3
 8003162:	d104      	bne.n	800316e <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8003164:	4611      	mov	r1, r2
 8003166:	4798      	blx	r3
}
 8003168:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800316a:	2003      	movs	r0, #3
 800316c:	e7fc      	b.n	8003168 <USBD_LL_DataOutStage+0x68>
 800316e:	2003      	movs	r0, #3
 8003170:	e7fa      	b.n	8003168 <USBD_LL_DataOutStage+0x68>

08003172 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003172:	b510      	push	{r4, lr}
 8003174:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8003176:	2900      	cmp	r1, #0
 8003178:	d146      	bne.n	8003208 <USBD_LL_DataInStage+0x96>
 800317a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800317c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003180:	2a02      	cmp	r2, #2
 8003182:	d005      	beq.n	8003190 <USBD_LL_DataInStage+0x1e>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8003184:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d039      	beq.n	8003200 <USBD_LL_DataInStage+0x8e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800318c:	2000      	movs	r0, #0
 800318e:	e046      	b.n	800321e <USBD_LL_DataInStage+0xac>
      if (pep->rem_length > pep->maxpacket)
 8003190:	69c2      	ldr	r2, [r0, #28]
 8003192:	6a01      	ldr	r1, [r0, #32]
 8003194:	428a      	cmp	r2, r1
 8003196:	d813      	bhi.n	80031c0 <USBD_LL_DataInStage+0x4e>
        if ((pep->maxpacket == pep->rem_length) &&
 8003198:	428a      	cmp	r2, r1
 800319a:	d01d      	beq.n	80031d8 <USBD_LL_DataInStage+0x66>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800319c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	b12b      	cbz	r3, 80031b0 <USBD_LL_DataInStage+0x3e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80031a4:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80031a8:	2a03      	cmp	r2, #3
 80031aa:	d101      	bne.n	80031b0 <USBD_LL_DataInStage+0x3e>
            pdev->pClass->EP0_TxSent(pdev);
 80031ac:	4620      	mov	r0, r4
 80031ae:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	4620      	mov	r0, r4
 80031b4:	f000 fe41 	bl	8003e3a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80031b8:	4620      	mov	r0, r4
 80031ba:	f000 fc27 	bl	8003a0c <USBD_CtlReceiveStatus>
 80031be:	e7e1      	b.n	8003184 <USBD_LL_DataInStage+0x12>
        pep->rem_length -= pep->maxpacket;
 80031c0:	1a52      	subs	r2, r2, r1
 80031c2:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80031c4:	4619      	mov	r1, r3
 80031c6:	f000 fbf7 	bl	80039b8 <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80031ca:	2300      	movs	r3, #0
 80031cc:	461a      	mov	r2, r3
 80031ce:	4619      	mov	r1, r3
 80031d0:	4620      	mov	r0, r4
 80031d2:	f000 fe52 	bl	8003e7a <USBD_LL_PrepareReceive>
 80031d6:	e7d5      	b.n	8003184 <USBD_LL_DataInStage+0x12>
            (pep->total_length >= pep->maxpacket) &&
 80031d8:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80031da:	4299      	cmp	r1, r3
 80031dc:	d8de      	bhi.n	800319c <USBD_LL_DataInStage+0x2a>
            (pep->total_length < pdev->ep0_data_len))
 80031de:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d2da      	bcs.n	800319c <USBD_LL_DataInStage+0x2a>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80031e6:	2200      	movs	r2, #0
 80031e8:	4611      	mov	r1, r2
 80031ea:	f000 fbe5 	bl	80039b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80031ee:	2100      	movs	r1, #0
 80031f0:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80031f4:	460b      	mov	r3, r1
 80031f6:	460a      	mov	r2, r1
 80031f8:	4620      	mov	r0, r4
 80031fa:	f000 fe3e 	bl	8003e7a <USBD_LL_PrepareReceive>
 80031fe:	e7c1      	b.n	8003184 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0U;
 8003200:	2000      	movs	r0, #0
 8003202:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8003206:	e00a      	b.n	800321e <USBD_LL_DataInStage+0xac>
 8003208:	460a      	mov	r2, r1
  else if ((pdev->pClass->DataIn != NULL) &&
 800320a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	b133      	cbz	r3, 8003220 <USBD_LL_DataInStage+0xae>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003212:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003216:	2903      	cmp	r1, #3
 8003218:	d104      	bne.n	8003224 <USBD_LL_DataInStage+0xb2>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800321a:	4611      	mov	r1, r2
 800321c:	4798      	blx	r3
}
 800321e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8003220:	2003      	movs	r0, #3
 8003222:	e7fc      	b.n	800321e <USBD_LL_DataInStage+0xac>
 8003224:	2003      	movs	r0, #3
 8003226:	e7fa      	b.n	800321e <USBD_LL_DataInStage+0xac>

08003228 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800322c:	2301      	movs	r3, #1
 800322e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003232:	2300      	movs	r3, #0
 8003234:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8003238:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800323a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800323e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8003242:	b123      	cbz	r3, 800324e <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003244:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2100      	movs	r1, #0
 800324c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800324e:	2340      	movs	r3, #64	; 0x40
 8003250:	2200      	movs	r2, #0
 8003252:	4611      	mov	r1, r2
 8003254:	4620      	mov	r0, r4
 8003256:	f000 fddd 	bl	8003e14 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800325a:	2601      	movs	r6, #1
 800325c:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003260:	2540      	movs	r5, #64	; 0x40
 8003262:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003266:	462b      	mov	r3, r5
 8003268:	2200      	movs	r2, #0
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	4620      	mov	r0, r4
 800326e:	f000 fdd1 	bl	8003e14 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003272:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003274:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8003276:	2000      	movs	r0, #0
 8003278:	bd70      	pop	{r4, r5, r6, pc}

0800327a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800327a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800327c:	2000      	movs	r0, #0
 800327e:	4770      	bx	lr

08003280 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8003280:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003284:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8003288:	2304      	movs	r3, #4
 800328a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800328e:	2000      	movs	r0, #0
 8003290:	4770      	bx	lr

08003292 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003292:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003296:	2b04      	cmp	r3, #4
 8003298:	d001      	beq.n	800329e <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800329a:	2000      	movs	r0, #0
 800329c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800329e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80032a2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 80032a6:	e7f8      	b.n	800329a <USBD_LL_Resume+0x8>

080032a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80032a8:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80032aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d001      	beq.n	80032b6 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80032b2:	2000      	movs	r0, #0
 80032b4:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80032b6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f8      	beq.n	80032b2 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80032c0:	4798      	blx	r3
 80032c2:	e7f6      	b.n	80032b2 <USBD_LL_SOF+0xa>

080032c4 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80032c4:	2000      	movs	r0, #0
 80032c6:	4770      	bx	lr

080032c8 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80032c8:	2000      	movs	r0, #0
 80032ca:	4770      	bx	lr

080032cc <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80032cc:	2000      	movs	r0, #0
 80032ce:	4770      	bx	lr

080032d0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80032d0:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80032d8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80032dc:	b113      	cbz	r3, 80032e4 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	7901      	ldrb	r1, [r0, #4]
 80032e2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80032e4:	2000      	movs	r0, #0
 80032e6:	bd08      	pop	{r3, pc}

080032e8 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
 80032e8:	2300      	movs	r3, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80032ea:	e002      	b.n	80032f2 <USBD_GetLen+0xa>
  {
    len++;
 80032ec:	3301      	adds	r3, #1
 80032ee:	b2db      	uxtb	r3, r3
    pbuff++;
 80032f0:	3001      	adds	r0, #1
  while (*pbuff != (uint8_t)'\0')
 80032f2:	7802      	ldrb	r2, [r0, #0]
 80032f4:	2a00      	cmp	r2, #0
 80032f6:	d1f9      	bne.n	80032ec <USBD_GetLen+0x4>
  }

  return len;
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	4770      	bx	lr

080032fc <USBD_SetFeature>:
{
 80032fc:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80032fe:	884b      	ldrh	r3, [r1, #2]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d000      	beq.n	8003306 <USBD_SetFeature+0xa>
}
 8003304:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8003306:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800330a:	f000 fb74 	bl	80039f6 <USBD_CtlSendStatus>
}
 800330e:	e7f9      	b.n	8003304 <USBD_SetFeature+0x8>

08003310 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8003310:	780b      	ldrb	r3, [r1, #0]
 8003312:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8003314:	784b      	ldrb	r3, [r1, #1]
 8003316:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8003318:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 800331a:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800331c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8003320:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 8003322:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 8003324:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8003326:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 800332a:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 800332c:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 800332e:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8003330:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8003334:	80c3      	strh	r3, [r0, #6]
}
 8003336:	4770      	bx	lr

08003338 <USBD_CtlError>:
{
 8003338:	b510      	push	{r4, lr}
 800333a:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800333c:	2180      	movs	r1, #128	; 0x80
 800333e:	f000 fd7c 	bl	8003e3a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8003342:	2100      	movs	r1, #0
 8003344:	4620      	mov	r0, r4
 8003346:	f000 fd78 	bl	8003e3a <USBD_LL_StallEP>
}
 800334a:	bd10      	pop	{r4, pc}

0800334c <USBD_GetDescriptor>:
{
 800334c:	b530      	push	{r4, r5, lr}
 800334e:	b083      	sub	sp, #12
 8003350:	4604      	mov	r4, r0
 8003352:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800335a:	884a      	ldrh	r2, [r1, #2]
 800335c:	0a13      	lsrs	r3, r2, #8
 800335e:	3b01      	subs	r3, #1
 8003360:	2b06      	cmp	r3, #6
 8003362:	f200 80ab 	bhi.w	80034bc <USBD_GetDescriptor+0x170>
 8003366:	e8df f003 	tbb	[pc, r3]
 800336a:	1f04      	.short	0x1f04
 800336c:	8da9a933 	.word	0x8da9a933
 8003370:	9a          	.byte	0x9a
 8003371:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003372:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f10d 0106 	add.w	r1, sp, #6
 800337c:	7c00      	ldrb	r0, [r0, #16]
 800337e:	4798      	blx	r3
    if (req->wLength != 0U)
 8003380:	88ea      	ldrh	r2, [r5, #6]
 8003382:	2a00      	cmp	r2, #0
 8003384:	f000 80a3 	beq.w	80034ce <USBD_GetDescriptor+0x182>
      if (len != 0U)
 8003388:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8099 	beq.w	80034c4 <USBD_GetDescriptor+0x178>
        len = MIN(len, req->wLength);
 8003392:	429a      	cmp	r2, r3
 8003394:	bf28      	it	cs
 8003396:	461a      	movcs	r2, r3
 8003398:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800339c:	4601      	mov	r1, r0
 800339e:	4620      	mov	r0, r4
 80033a0:	f000 fafd 	bl	800399e <USBD_CtlSendData>
}
 80033a4:	b003      	add	sp, #12
 80033a6:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80033a8:	7c03      	ldrb	r3, [r0, #16]
 80033aa:	b943      	cbnz	r3, 80033be <USBD_GetDescriptor+0x72>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80033ac:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	f10d 0006 	add.w	r0, sp, #6
 80033b6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80033b8:	2302      	movs	r3, #2
 80033ba:	7043      	strb	r3, [r0, #1]
 80033bc:	e7e0      	b.n	8003380 <USBD_GetDescriptor+0x34>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80033be:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	f10d 0006 	add.w	r0, sp, #6
 80033c8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80033ca:	2302      	movs	r3, #2
 80033cc:	7043      	strb	r3, [r0, #1]
 80033ce:	e7d7      	b.n	8003380 <USBD_GetDescriptor+0x34>
    switch ((uint8_t)(req->wValue))
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	2a05      	cmp	r2, #5
 80033d4:	d852      	bhi.n	800347c <USBD_GetDescriptor+0x130>
 80033d6:	e8df f002 	tbb	[pc, r2]
 80033da:	1003      	.short	0x1003
 80033dc:	44372a1d 	.word	0x44372a1d
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80033e0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	b123      	cbz	r3, 80033f2 <USBD_GetDescriptor+0xa6>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80033e8:	f10d 0106 	add.w	r1, sp, #6
 80033ec:	7c00      	ldrb	r0, [r0, #16]
 80033ee:	4798      	blx	r3
 80033f0:	e7c6      	b.n	8003380 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80033f2:	4629      	mov	r1, r5
 80033f4:	f7ff ffa0 	bl	8003338 <USBD_CtlError>
 80033f8:	e7d4      	b.n	80033a4 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80033fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	b123      	cbz	r3, 800340c <USBD_GetDescriptor+0xc0>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003402:	f10d 0106 	add.w	r1, sp, #6
 8003406:	7c00      	ldrb	r0, [r0, #16]
 8003408:	4798      	blx	r3
 800340a:	e7b9      	b.n	8003380 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800340c:	4629      	mov	r1, r5
 800340e:	f7ff ff93 	bl	8003338 <USBD_CtlError>
 8003412:	e7c7      	b.n	80033a4 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003414:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	b123      	cbz	r3, 8003426 <USBD_GetDescriptor+0xda>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800341c:	f10d 0106 	add.w	r1, sp, #6
 8003420:	7c00      	ldrb	r0, [r0, #16]
 8003422:	4798      	blx	r3
 8003424:	e7ac      	b.n	8003380 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003426:	4629      	mov	r1, r5
 8003428:	f7ff ff86 	bl	8003338 <USBD_CtlError>
 800342c:	e7ba      	b.n	80033a4 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800342e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	b123      	cbz	r3, 8003440 <USBD_GetDescriptor+0xf4>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003436:	f10d 0106 	add.w	r1, sp, #6
 800343a:	7c00      	ldrb	r0, [r0, #16]
 800343c:	4798      	blx	r3
 800343e:	e79f      	b.n	8003380 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003440:	4629      	mov	r1, r5
 8003442:	f7ff ff79 	bl	8003338 <USBD_CtlError>
 8003446:	e7ad      	b.n	80033a4 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003448:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	b123      	cbz	r3, 800345a <USBD_GetDescriptor+0x10e>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003450:	f10d 0106 	add.w	r1, sp, #6
 8003454:	7c00      	ldrb	r0, [r0, #16]
 8003456:	4798      	blx	r3
 8003458:	e792      	b.n	8003380 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800345a:	4629      	mov	r1, r5
 800345c:	f7ff ff6c 	bl	8003338 <USBD_CtlError>
 8003460:	e7a0      	b.n	80033a4 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003462:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	b123      	cbz	r3, 8003474 <USBD_GetDescriptor+0x128>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800346a:	f10d 0106 	add.w	r1, sp, #6
 800346e:	7c00      	ldrb	r0, [r0, #16]
 8003470:	4798      	blx	r3
 8003472:	e785      	b.n	8003380 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8003474:	4629      	mov	r1, r5
 8003476:	f7ff ff5f 	bl	8003338 <USBD_CtlError>
 800347a:	e793      	b.n	80033a4 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800347c:	4629      	mov	r1, r5
 800347e:	f7ff ff5b 	bl	8003338 <USBD_CtlError>
 8003482:	e78f      	b.n	80033a4 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003484:	7c03      	ldrb	r3, [r0, #16]
 8003486:	b933      	cbnz	r3, 8003496 <USBD_GetDescriptor+0x14a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003488:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800348c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348e:	f10d 0006 	add.w	r0, sp, #6
 8003492:	4798      	blx	r3
 8003494:	e774      	b.n	8003380 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 8003496:	4629      	mov	r1, r5
 8003498:	f7ff ff4e 	bl	8003338 <USBD_CtlError>
 800349c:	e782      	b.n	80033a4 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800349e:	7c03      	ldrb	r3, [r0, #16]
 80034a0:	b943      	cbnz	r3, 80034b4 <USBD_GetDescriptor+0x168>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80034a2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	f10d 0006 	add.w	r0, sp, #6
 80034ac:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80034ae:	2307      	movs	r3, #7
 80034b0:	7043      	strb	r3, [r0, #1]
 80034b2:	e765      	b.n	8003380 <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 80034b4:	4629      	mov	r1, r5
 80034b6:	f7ff ff3f 	bl	8003338 <USBD_CtlError>
 80034ba:	e773      	b.n	80033a4 <USBD_GetDescriptor+0x58>
    USBD_CtlError(pdev, req);
 80034bc:	4629      	mov	r1, r5
 80034be:	f7ff ff3b 	bl	8003338 <USBD_CtlError>
 80034c2:	e76f      	b.n	80033a4 <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 80034c4:	4629      	mov	r1, r5
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7ff ff36 	bl	8003338 <USBD_CtlError>
 80034cc:	e76a      	b.n	80033a4 <USBD_GetDescriptor+0x58>
      (void)USBD_CtlSendStatus(pdev);
 80034ce:	4620      	mov	r0, r4
 80034d0:	f000 fa91 	bl	80039f6 <USBD_CtlSendStatus>
 80034d4:	e766      	b.n	80033a4 <USBD_GetDescriptor+0x58>

080034d6 <USBD_SetAddress>:
{
 80034d6:	b538      	push	{r3, r4, r5, lr}
 80034d8:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80034da:	888b      	ldrh	r3, [r1, #4]
 80034dc:	b9f3      	cbnz	r3, 800351c <USBD_SetAddress+0x46>
 80034de:	88cb      	ldrh	r3, [r1, #6]
 80034e0:	b9e3      	cbnz	r3, 800351c <USBD_SetAddress+0x46>
 80034e2:	884b      	ldrh	r3, [r1, #2]
 80034e4:	2b7f      	cmp	r3, #127	; 0x7f
 80034e6:	d819      	bhi.n	800351c <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80034e8:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80034ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d00c      	beq.n	800350e <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80034f4:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80034f8:	4629      	mov	r1, r5
 80034fa:	f000 fcae 	bl	8003e5a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80034fe:	4620      	mov	r0, r4
 8003500:	f000 fa79 	bl	80039f6 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003504:	b135      	cbz	r5, 8003514 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003506:	2302      	movs	r3, #2
 8003508:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800350c:	e009      	b.n	8003522 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800350e:	f7ff ff13 	bl	8003338 <USBD_CtlError>
 8003512:	e006      	b.n	8003522 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003514:	2301      	movs	r3, #1
 8003516:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800351a:	e002      	b.n	8003522 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800351c:	4620      	mov	r0, r4
 800351e:	f7ff ff0b 	bl	8003338 <USBD_CtlError>
}
 8003522:	bd38      	pop	{r3, r4, r5, pc}

08003524 <USBD_SetConfig>:
{
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	4604      	mov	r4, r0
 8003528:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 800352a:	7889      	ldrb	r1, [r1, #2]
 800352c:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <USBD_SetConfig+0xc4>)
 800352e:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003530:	2901      	cmp	r1, #1
 8003532:	d80f      	bhi.n	8003554 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8003534:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003538:	2b02      	cmp	r3, #2
 800353a:	d011      	beq.n	8003560 <USBD_SetConfig+0x3c>
 800353c:	2b03      	cmp	r3, #3
 800353e:	d025      	beq.n	800358c <USBD_SetConfig+0x68>
    USBD_CtlError(pdev, req);
 8003540:	4629      	mov	r1, r5
 8003542:	f7ff fef9 	bl	8003338 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8003546:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <USBD_SetConfig+0xc4>)
 8003548:	7819      	ldrb	r1, [r3, #0]
 800354a:	4620      	mov	r0, r4
 800354c:	f7ff fda4 	bl	8003098 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8003550:	2603      	movs	r6, #3
    break;
 8003552:	e003      	b.n	800355c <USBD_SetConfig+0x38>
    USBD_CtlError(pdev, req);
 8003554:	4629      	mov	r1, r5
 8003556:	f7ff feef 	bl	8003338 <USBD_CtlError>
    return USBD_FAIL;
 800355a:	2603      	movs	r6, #3
}
 800355c:	4630      	mov	r0, r6
 800355e:	bd70      	pop	{r4, r5, r6, pc}
    if (cfgidx != 0U)
 8003560:	b181      	cbz	r1, 8003584 <USBD_SetConfig+0x60>
      pdev->dev_config = cfgidx;
 8003562:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8003564:	f7ff fd8f 	bl	8003086 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8003568:	4606      	mov	r6, r0
 800356a:	b120      	cbz	r0, 8003576 <USBD_SetConfig+0x52>
        USBD_CtlError(pdev, req);
 800356c:	4629      	mov	r1, r5
 800356e:	4620      	mov	r0, r4
 8003570:	f7ff fee2 	bl	8003338 <USBD_CtlError>
 8003574:	e7f2      	b.n	800355c <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 8003576:	4620      	mov	r0, r4
 8003578:	f000 fa3d 	bl	80039f6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800357c:	2303      	movs	r3, #3
 800357e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003582:	e7eb      	b.n	800355c <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 8003584:	f000 fa37 	bl	80039f6 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8003588:	2600      	movs	r6, #0
 800358a:	e7e7      	b.n	800355c <USBD_SetConfig+0x38>
    if (cfgidx == 0U)
 800358c:	b1c9      	cbz	r1, 80035c2 <USBD_SetConfig+0x9e>
    else if (cfgidx != pdev->dev_config)
 800358e:	6843      	ldr	r3, [r0, #4]
 8003590:	4299      	cmp	r1, r3
 8003592:	d025      	beq.n	80035e0 <USBD_SetConfig+0xbc>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003594:	b2d9      	uxtb	r1, r3
 8003596:	f7ff fd7f 	bl	8003098 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800359a:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <USBD_SetConfig+0xc4>)
 800359c:	7819      	ldrb	r1, [r3, #0]
 800359e:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80035a0:	4620      	mov	r0, r4
 80035a2:	f7ff fd70 	bl	8003086 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 80035a6:	4606      	mov	r6, r0
 80035a8:	b1b0      	cbz	r0, 80035d8 <USBD_SetConfig+0xb4>
        USBD_CtlError(pdev, req);
 80035aa:	4629      	mov	r1, r5
 80035ac:	4620      	mov	r0, r4
 80035ae:	f7ff fec3 	bl	8003338 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80035b2:	7921      	ldrb	r1, [r4, #4]
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7ff fd6f 	bl	8003098 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80035ba:	2302      	movs	r3, #2
 80035bc:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80035c0:	e7cc      	b.n	800355c <USBD_SetConfig+0x38>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80035c2:	2302      	movs	r3, #2
 80035c4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80035c8:	6041      	str	r1, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80035ca:	f7ff fd65 	bl	8003098 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80035ce:	4620      	mov	r0, r4
 80035d0:	f000 fa11 	bl	80039f6 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80035d4:	2600      	movs	r6, #0
 80035d6:	e7c1      	b.n	800355c <USBD_SetConfig+0x38>
        (void)USBD_CtlSendStatus(pdev);
 80035d8:	4620      	mov	r0, r4
 80035da:	f000 fa0c 	bl	80039f6 <USBD_CtlSendStatus>
 80035de:	e7bd      	b.n	800355c <USBD_SetConfig+0x38>
      (void)USBD_CtlSendStatus(pdev);
 80035e0:	f000 fa09 	bl	80039f6 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80035e4:	2600      	movs	r6, #0
 80035e6:	e7b9      	b.n	800355c <USBD_SetConfig+0x38>
 80035e8:	20000378 	.word	0x20000378

080035ec <USBD_GetConfig>:
{
 80035ec:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80035ee:	88cb      	ldrh	r3, [r1, #6]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d10b      	bne.n	800360c <USBD_GetConfig+0x20>
    switch (pdev->dev_state)
 80035f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80035f8:	b19b      	cbz	r3, 8003622 <USBD_GetConfig+0x36>
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d909      	bls.n	8003612 <USBD_GetConfig+0x26>
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d10f      	bne.n	8003622 <USBD_GetConfig+0x36>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8003602:	2201      	movs	r2, #1
 8003604:	1d01      	adds	r1, r0, #4
 8003606:	f000 f9ca 	bl	800399e <USBD_CtlSendData>
      break;
 800360a:	e001      	b.n	8003610 <USBD_GetConfig+0x24>
    USBD_CtlError(pdev, req);
 800360c:	f7ff fe94 	bl	8003338 <USBD_CtlError>
}
 8003610:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0U;
 8003612:	4601      	mov	r1, r0
 8003614:	2300      	movs	r3, #0
 8003616:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800361a:	2201      	movs	r2, #1
 800361c:	f000 f9bf 	bl	800399e <USBD_CtlSendData>
      break;
 8003620:	e7f6      	b.n	8003610 <USBD_GetConfig+0x24>
      USBD_CtlError(pdev, req);
 8003622:	f7ff fe89 	bl	8003338 <USBD_CtlError>
}
 8003626:	e7f3      	b.n	8003610 <USBD_GetConfig+0x24>

08003628 <USBD_GetStatus>:
{
 8003628:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800362a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800362e:	3b01      	subs	r3, #1
 8003630:	2b02      	cmp	r3, #2
 8003632:	d812      	bhi.n	800365a <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 8003634:	88cb      	ldrh	r3, [r1, #6]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d10c      	bne.n	8003654 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 800363e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003642:	b10b      	cbz	r3, 8003648 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003644:	2302      	movs	r3, #2
 8003646:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8003648:	2202      	movs	r2, #2
 800364a:	f100 010c 	add.w	r1, r0, #12
 800364e:	f000 f9a6 	bl	800399e <USBD_CtlSendData>
}
 8003652:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8003654:	f7ff fe70 	bl	8003338 <USBD_CtlError>
      break;
 8003658:	e7fb      	b.n	8003652 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 800365a:	f7ff fe6d 	bl	8003338 <USBD_CtlError>
}
 800365e:	e7f8      	b.n	8003652 <USBD_GetStatus+0x2a>

08003660 <USBD_ClrFeature>:
{
 8003660:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8003662:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003666:	3b01      	subs	r3, #1
 8003668:	2b02      	cmp	r3, #2
 800366a:	d809      	bhi.n	8003680 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800366c:	884b      	ldrh	r3, [r1, #2]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d000      	beq.n	8003674 <USBD_ClrFeature+0x14>
}
 8003672:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800367a:	f000 f9bc 	bl	80039f6 <USBD_CtlSendStatus>
 800367e:	e7f8      	b.n	8003672 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8003680:	f7ff fe5a 	bl	8003338 <USBD_CtlError>
}
 8003684:	e7f5      	b.n	8003672 <USBD_ClrFeature+0x12>

08003686 <USBD_StdDevReq>:
{
 8003686:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003688:	780b      	ldrb	r3, [r1, #0]
 800368a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800368e:	2b20      	cmp	r3, #32
 8003690:	d006      	beq.n	80036a0 <USBD_StdDevReq+0x1a>
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d004      	beq.n	80036a0 <USBD_StdDevReq+0x1a>
 8003696:	b143      	cbz	r3, 80036aa <USBD_StdDevReq+0x24>
    USBD_CtlError(pdev, req);
 8003698:	f7ff fe4e 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800369c:	2000      	movs	r0, #0
    break;
 800369e:	e003      	b.n	80036a8 <USBD_StdDevReq+0x22>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80036a0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	4798      	blx	r3
}
 80036a8:	bd08      	pop	{r3, pc}
    switch (req->bRequest)
 80036aa:	784b      	ldrb	r3, [r1, #1]
 80036ac:	2b09      	cmp	r3, #9
 80036ae:	d821      	bhi.n	80036f4 <USBD_StdDevReq+0x6e>
 80036b0:	e8df f003 	tbb	[pc, r3]
 80036b4:	18201c14 	.word	0x18201c14
 80036b8:	20050920 	.word	0x20050920
 80036bc:	0d10      	.short	0x0d10
      USBD_GetDescriptor(pdev, req);
 80036be:	f7ff fe45 	bl	800334c <USBD_GetDescriptor>
  USBD_StatusTypeDef ret = USBD_OK;
 80036c2:	2000      	movs	r0, #0
      break;
 80036c4:	e7f0      	b.n	80036a8 <USBD_StdDevReq+0x22>
      USBD_SetAddress(pdev, req);
 80036c6:	f7ff ff06 	bl	80034d6 <USBD_SetAddress>
  USBD_StatusTypeDef ret = USBD_OK;
 80036ca:	2000      	movs	r0, #0
      break;
 80036cc:	e7ec      	b.n	80036a8 <USBD_StdDevReq+0x22>
      ret = USBD_SetConfig(pdev, req);
 80036ce:	f7ff ff29 	bl	8003524 <USBD_SetConfig>
      break;
 80036d2:	e7e9      	b.n	80036a8 <USBD_StdDevReq+0x22>
      USBD_GetConfig(pdev, req);
 80036d4:	f7ff ff8a 	bl	80035ec <USBD_GetConfig>
  USBD_StatusTypeDef ret = USBD_OK;
 80036d8:	2000      	movs	r0, #0
      break;
 80036da:	e7e5      	b.n	80036a8 <USBD_StdDevReq+0x22>
      USBD_GetStatus(pdev, req);
 80036dc:	f7ff ffa4 	bl	8003628 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80036e0:	2000      	movs	r0, #0
      break;
 80036e2:	e7e1      	b.n	80036a8 <USBD_StdDevReq+0x22>
      USBD_SetFeature(pdev, req);
 80036e4:	f7ff fe0a 	bl	80032fc <USBD_SetFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 80036e8:	2000      	movs	r0, #0
      break;
 80036ea:	e7dd      	b.n	80036a8 <USBD_StdDevReq+0x22>
      USBD_ClrFeature(pdev, req);
 80036ec:	f7ff ffb8 	bl	8003660 <USBD_ClrFeature>
  USBD_StatusTypeDef ret = USBD_OK;
 80036f0:	2000      	movs	r0, #0
      break;
 80036f2:	e7d9      	b.n	80036a8 <USBD_StdDevReq+0x22>
      USBD_CtlError(pdev, req);
 80036f4:	f7ff fe20 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80036f8:	2000      	movs	r0, #0
      break;
 80036fa:	e7d5      	b.n	80036a8 <USBD_StdDevReq+0x22>

080036fc <USBD_StdItfReq>:
{
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	4605      	mov	r5, r0
 8003700:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003702:	780b      	ldrb	r3, [r1, #0]
 8003704:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003708:	2b20      	cmp	r3, #32
 800370a:	d007      	beq.n	800371c <USBD_StdItfReq+0x20>
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d005      	beq.n	800371c <USBD_StdItfReq+0x20>
 8003710:	b123      	cbz	r3, 800371c <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 8003712:	f7ff fe11 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003716:	2600      	movs	r6, #0
}
 8003718:	4630      	mov	r0, r6
 800371a:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 800371c:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8003720:	3b01      	subs	r3, #1
 8003722:	2b02      	cmp	r3, #2
 8003724:	d818      	bhi.n	8003758 <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003726:	7923      	ldrb	r3, [r4, #4]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d80f      	bhi.n	800374c <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800372c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	4621      	mov	r1, r4
 8003734:	4628      	mov	r0, r5
 8003736:	4798      	blx	r3
 8003738:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 800373a:	88e3      	ldrh	r3, [r4, #6]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1eb      	bne.n	8003718 <USBD_StdItfReq+0x1c>
 8003740:	2800      	cmp	r0, #0
 8003742:	d1e9      	bne.n	8003718 <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 8003744:	4628      	mov	r0, r5
 8003746:	f000 f956 	bl	80039f6 <USBD_CtlSendStatus>
 800374a:	e7e5      	b.n	8003718 <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 800374c:	4621      	mov	r1, r4
 800374e:	4628      	mov	r0, r5
 8003750:	f7ff fdf2 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003754:	2600      	movs	r6, #0
 8003756:	e7df      	b.n	8003718 <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8003758:	4621      	mov	r1, r4
 800375a:	4628      	mov	r0, r5
 800375c:	f7ff fdec 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003760:	2600      	movs	r6, #0
      break;
 8003762:	e7d9      	b.n	8003718 <USBD_StdItfReq+0x1c>

08003764 <USBD_StdEPReq>:
{
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	4605      	mov	r5, r0
 8003768:	460c      	mov	r4, r1
  ep_addr = LOBYTE(req->wIndex);
 800376a:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800376c:	780b      	ldrb	r3, [r1, #0]
 800376e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003772:	2b20      	cmp	r3, #32
 8003774:	d008      	beq.n	8003788 <USBD_StdEPReq+0x24>
 8003776:	b2d1      	uxtb	r1, r2
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d005      	beq.n	8003788 <USBD_StdEPReq+0x24>
 800377c:	b15b      	cbz	r3, 8003796 <USBD_StdEPReq+0x32>
    USBD_CtlError(pdev, req);
 800377e:	4621      	mov	r1, r4
 8003780:	f7ff fdda 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003784:	2000      	movs	r0, #0
    break;
 8003786:	e005      	b.n	8003794 <USBD_StdEPReq+0x30>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003788:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4621      	mov	r1, r4
 8003790:	4628      	mov	r0, r5
 8003792:	4798      	blx	r3
}
 8003794:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8003796:	7863      	ldrb	r3, [r4, #1]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d02f      	beq.n	80037fc <USBD_StdEPReq+0x98>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d05e      	beq.n	800385e <USBD_StdEPReq+0xfa>
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	f040 80d9 	bne.w	8003958 <USBD_StdEPReq+0x1f4>
      switch (pdev->dev_state)
 80037a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d006      	beq.n	80037bc <USBD_StdEPReq+0x58>
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d015      	beq.n	80037de <USBD_StdEPReq+0x7a>
        USBD_CtlError(pdev, req);
 80037b2:	4621      	mov	r1, r4
 80037b4:	f7ff fdc0 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80037b8:	2000      	movs	r0, #0
        break;
 80037ba:	e7eb      	b.n	8003794 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80037bc:	b109      	cbz	r1, 80037c2 <USBD_StdEPReq+0x5e>
 80037be:	2980      	cmp	r1, #128	; 0x80
 80037c0:	d105      	bne.n	80037ce <USBD_StdEPReq+0x6a>
          USBD_CtlError(pdev, req);
 80037c2:	4621      	mov	r1, r4
 80037c4:	4628      	mov	r0, r5
 80037c6:	f7ff fdb7 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80037ca:	2000      	movs	r0, #0
 80037cc:	e7e2      	b.n	8003794 <USBD_StdEPReq+0x30>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80037ce:	f000 fb34 	bl	8003e3a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80037d2:	2180      	movs	r1, #128	; 0x80
 80037d4:	4628      	mov	r0, r5
 80037d6:	f000 fb30 	bl	8003e3a <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 80037da:	2000      	movs	r0, #0
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80037dc:	e7da      	b.n	8003794 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80037de:	8863      	ldrh	r3, [r4, #2]
 80037e0:	b923      	cbnz	r3, 80037ec <USBD_StdEPReq+0x88>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80037e2:	b119      	cbz	r1, 80037ec <USBD_StdEPReq+0x88>
 80037e4:	2980      	cmp	r1, #128	; 0x80
 80037e6:	d001      	beq.n	80037ec <USBD_StdEPReq+0x88>
 80037e8:	88e3      	ldrh	r3, [r4, #6]
 80037ea:	b123      	cbz	r3, 80037f6 <USBD_StdEPReq+0x92>
        (void)USBD_CtlSendStatus(pdev);
 80037ec:	4628      	mov	r0, r5
 80037ee:	f000 f902 	bl	80039f6 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 80037f2:	2000      	movs	r0, #0
        break;
 80037f4:	e7ce      	b.n	8003794 <USBD_StdEPReq+0x30>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80037f6:	f000 fb20 	bl	8003e3a <USBD_LL_StallEP>
 80037fa:	e7f7      	b.n	80037ec <USBD_StdEPReq+0x88>
      switch (pdev->dev_state)
 80037fc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003800:	2b02      	cmp	r3, #2
 8003802:	d006      	beq.n	8003812 <USBD_StdEPReq+0xae>
 8003804:	2b03      	cmp	r3, #3
 8003806:	d015      	beq.n	8003834 <USBD_StdEPReq+0xd0>
        USBD_CtlError(pdev, req);
 8003808:	4621      	mov	r1, r4
 800380a:	f7ff fd95 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800380e:	2000      	movs	r0, #0
        break;
 8003810:	e7c0      	b.n	8003794 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003812:	b109      	cbz	r1, 8003818 <USBD_StdEPReq+0xb4>
 8003814:	2980      	cmp	r1, #128	; 0x80
 8003816:	d105      	bne.n	8003824 <USBD_StdEPReq+0xc0>
          USBD_CtlError(pdev, req);
 8003818:	4621      	mov	r1, r4
 800381a:	4628      	mov	r0, r5
 800381c:	f7ff fd8c 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003820:	2000      	movs	r0, #0
 8003822:	e7b7      	b.n	8003794 <USBD_StdEPReq+0x30>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8003824:	f000 fb09 	bl	8003e3a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	4628      	mov	r0, r5
 800382c:	f000 fb05 	bl	8003e3a <USBD_LL_StallEP>
  USBD_StatusTypeDef ret = USBD_OK;
 8003830:	2000      	movs	r0, #0
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8003832:	e7af      	b.n	8003794 <USBD_StdEPReq+0x30>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8003834:	8863      	ldrh	r3, [r4, #2]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 8093 	bne.w	8003962 <USBD_StdEPReq+0x1fe>
          if ((ep_addr & 0x7FU) != 0x00U)
 800383c:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8003840:	d10a      	bne.n	8003858 <USBD_StdEPReq+0xf4>
          (void)USBD_CtlSendStatus(pdev);
 8003842:	4628      	mov	r0, r5
 8003844:	f000 f8d7 	bl	80039f6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003848:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4621      	mov	r1, r4
 8003850:	4628      	mov	r0, r5
 8003852:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 8003854:	2000      	movs	r0, #0
 8003856:	e79d      	b.n	8003794 <USBD_StdEPReq+0x30>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8003858:	f000 faf7 	bl	8003e4a <USBD_LL_ClearStallEP>
 800385c:	e7f1      	b.n	8003842 <USBD_StdEPReq+0xde>
      switch (pdev->dev_state)
 800385e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003862:	2b02      	cmp	r3, #2
 8003864:	d006      	beq.n	8003874 <USBD_StdEPReq+0x110>
 8003866:	2b03      	cmp	r3, #3
 8003868:	d02a      	beq.n	80038c0 <USBD_StdEPReq+0x15c>
        USBD_CtlError(pdev, req);
 800386a:	4621      	mov	r1, r4
 800386c:	f7ff fd64 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003870:	2000      	movs	r0, #0
        break;
 8003872:	e78f      	b.n	8003794 <USBD_StdEPReq+0x30>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003874:	b109      	cbz	r1, 800387a <USBD_StdEPReq+0x116>
 8003876:	2980      	cmp	r1, #128	; 0x80
 8003878:	d113      	bne.n	80038a2 <USBD_StdEPReq+0x13e>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800387a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800387e:	d115      	bne.n	80038ac <USBD_StdEPReq+0x148>
              &pdev->ep_out[ep_addr & 0x7FU];
 8003880:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003884:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003888:	008b      	lsls	r3, r1, #2
 800388a:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 800388e:	4429      	add	r1, r5
 8003890:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 8003892:	2400      	movs	r4, #0
 8003894:	600c      	str	r4, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8003896:	2202      	movs	r2, #2
 8003898:	4628      	mov	r0, r5
 800389a:	f000 f880 	bl	800399e <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800389e:	4620      	mov	r0, r4
        break;
 80038a0:	e778      	b.n	8003794 <USBD_StdEPReq+0x30>
          USBD_CtlError(pdev, req);
 80038a2:	4621      	mov	r1, r4
 80038a4:	f7ff fd48 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 80038a8:	2000      	movs	r0, #0
          break;
 80038aa:	e773      	b.n	8003794 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80038ac:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80038b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80038b4:	008b      	lsls	r3, r1, #2
 80038b6:	f103 0110 	add.w	r1, r3, #16
 80038ba:	4429      	add	r1, r5
 80038bc:	3104      	adds	r1, #4
 80038be:	e7e8      	b.n	8003892 <USBD_StdEPReq+0x12e>
        if ((ep_addr & 0x80U) == 0x80U)
 80038c0:	b252      	sxtb	r2, r2
 80038c2:	2a00      	cmp	r2, #0
 80038c4:	db1f      	blt.n	8003906 <USBD_StdEPReq+0x1a2>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80038c6:	f001 030f 	and.w	r3, r1, #15
 80038ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038ce:	0098      	lsls	r0, r3, #2
 80038d0:	4428      	add	r0, r5
 80038d2:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
 80038d6:	b32b      	cbz	r3, 8003924 <USBD_StdEPReq+0x1c0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80038d8:	2a00      	cmp	r2, #0
 80038da:	db29      	blt.n	8003930 <USBD_StdEPReq+0x1cc>
              &pdev->ep_out[ep_addr & 0x7FU];
 80038dc:	f001 027f 	and.w	r2, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80038e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80038e4:	0093      	lsls	r3, r2, #2
 80038e6:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 80038ea:	442c      	add	r4, r5
 80038ec:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80038ee:	b109      	cbz	r1, 80038f4 <USBD_StdEPReq+0x190>
 80038f0:	2980      	cmp	r1, #128	; 0x80
 80038f2:	d127      	bne.n	8003944 <USBD_StdEPReq+0x1e0>
            pep->status = 0x0000U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80038f8:	2202      	movs	r2, #2
 80038fa:	4621      	mov	r1, r4
 80038fc:	4628      	mov	r0, r5
 80038fe:	f000 f84e 	bl	800399e <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8003902:	2000      	movs	r0, #0
          break;
 8003904:	e746      	b.n	8003794 <USBD_StdEPReq+0x30>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003906:	f001 030f 	and.w	r3, r1, #15
 800390a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800390e:	0098      	lsls	r0, r3, #2
 8003910:	4428      	add	r0, r5
 8003912:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1df      	bne.n	80038d8 <USBD_StdEPReq+0x174>
            USBD_CtlError(pdev, req);
 8003918:	4621      	mov	r1, r4
 800391a:	4628      	mov	r0, r5
 800391c:	f7ff fd0c 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8003920:	2000      	movs	r0, #0
            break;
 8003922:	e737      	b.n	8003794 <USBD_StdEPReq+0x30>
            USBD_CtlError(pdev, req);
 8003924:	4621      	mov	r1, r4
 8003926:	4628      	mov	r0, r5
 8003928:	f7ff fd06 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800392c:	2000      	movs	r0, #0
            break;
 800392e:	e731      	b.n	8003794 <USBD_StdEPReq+0x30>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003930:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8003934:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003938:	0093      	lsls	r3, r2, #2
 800393a:	f103 0410 	add.w	r4, r3, #16
 800393e:	442c      	add	r4, r5
 8003940:	3404      	adds	r4, #4
 8003942:	e7d4      	b.n	80038ee <USBD_StdEPReq+0x18a>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8003944:	4628      	mov	r0, r5
 8003946:	f000 fa37 	bl	8003db8 <USBD_LL_IsStallEP>
 800394a:	b110      	cbz	r0, 8003952 <USBD_StdEPReq+0x1ee>
            pep->status = 0x0001U;
 800394c:	2301      	movs	r3, #1
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	e7d2      	b.n	80038f8 <USBD_StdEPReq+0x194>
            pep->status = 0x0000U;
 8003952:	2300      	movs	r3, #0
 8003954:	6023      	str	r3, [r4, #0]
 8003956:	e7cf      	b.n	80038f8 <USBD_StdEPReq+0x194>
      USBD_CtlError(pdev, req);
 8003958:	4621      	mov	r1, r4
 800395a:	f7ff fced 	bl	8003338 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 800395e:	2000      	movs	r0, #0
      break;
 8003960:	e718      	b.n	8003794 <USBD_StdEPReq+0x30>
  USBD_StatusTypeDef ret = USBD_OK;
 8003962:	2000      	movs	r0, #0
 8003964:	e716      	b.n	8003794 <USBD_StdEPReq+0x30>

08003966 <USBD_GetString>:
  if (desc == NULL)
 8003966:	b1c8      	cbz	r0, 800399c <USBD_GetString+0x36>
{
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	460d      	mov	r5, r1
 800396c:	4616      	mov	r6, r2
 800396e:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8003970:	f7ff fcba 	bl	80032e8 <USBD_GetLen>
 8003974:	3001      	adds	r0, #1
 8003976:	0040      	lsls	r0, r0, #1
 8003978:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 800397a:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800397c:	2303      	movs	r3, #3
 800397e:	706b      	strb	r3, [r5, #1]
  idx++;
 8003980:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8003982:	e007      	b.n	8003994 <USBD_GetString+0x2e>
    unicode[idx] = *pdesc;
 8003984:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8003986:	3401      	adds	r4, #1
    idx++;
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 800398c:	2100      	movs	r1, #0
 800398e:	54a9      	strb	r1, [r5, r2]
    idx++;
 8003990:	3302      	adds	r3, #2
 8003992:	b2db      	uxtb	r3, r3
  while (*pdesc != (uint8_t)'\0')
 8003994:	7822      	ldrb	r2, [r4, #0]
 8003996:	2a00      	cmp	r2, #0
 8003998:	d1f4      	bne.n	8003984 <USBD_GetString+0x1e>
}
 800399a:	bd70      	pop	{r4, r5, r6, pc}
 800399c:	4770      	bx	lr

0800399e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800399e:	b510      	push	{r4, lr}
 80039a0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80039a2:	2202      	movs	r2, #2
 80039a4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80039a8:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 80039aa:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80039ac:	460a      	mov	r2, r1
 80039ae:	2100      	movs	r1, #0
 80039b0:	f000 fa5b 	bl	8003e6a <USBD_LL_Transmit>

  return USBD_OK;
}
 80039b4:	2000      	movs	r0, #0
 80039b6:	bd10      	pop	{r4, pc}

080039b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80039b8:	b508      	push	{r3, lr}
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80039ba:	4613      	mov	r3, r2
 80039bc:	460a      	mov	r2, r1
 80039be:	2100      	movs	r1, #0
 80039c0:	f000 fa53 	bl	8003e6a <USBD_LL_Transmit>

  return USBD_OK;
}
 80039c4:	2000      	movs	r0, #0
 80039c6:	bd08      	pop	{r3, pc}

080039c8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80039c8:	b510      	push	{r4, lr}
 80039ca:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80039cc:	2203      	movs	r2, #3
 80039ce:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80039d2:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80039d6:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80039da:	460a      	mov	r2, r1
 80039dc:	2100      	movs	r1, #0
 80039de:	f000 fa4c 	bl	8003e7a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80039e2:	2000      	movs	r0, #0
 80039e4:	bd10      	pop	{r4, pc}

080039e6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80039e6:	b508      	push	{r3, lr}
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80039e8:	4613      	mov	r3, r2
 80039ea:	460a      	mov	r2, r1
 80039ec:	2100      	movs	r1, #0
 80039ee:	f000 fa44 	bl	8003e7a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80039f2:	2000      	movs	r0, #0
 80039f4:	bd08      	pop	{r3, pc}

080039f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80039f6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80039f8:	2304      	movs	r3, #4
 80039fa:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80039fe:	2300      	movs	r3, #0
 8003a00:	461a      	mov	r2, r3
 8003a02:	4619      	mov	r1, r3
 8003a04:	f000 fa31 	bl	8003e6a <USBD_LL_Transmit>

  return USBD_OK;
}
 8003a08:	2000      	movs	r0, #0
 8003a0a:	bd08      	pop	{r3, pc}

08003a0c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8003a0c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003a0e:	2305      	movs	r3, #5
 8003a10:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003a14:	2300      	movs	r3, #0
 8003a16:	461a      	mov	r2, r3
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f000 fa2e 	bl	8003e7a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003a1e:	2000      	movs	r0, #0
 8003a20:	bd08      	pop	{r3, pc}
	...

08003a24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003a26:	2200      	movs	r2, #0
 8003a28:	490f      	ldr	r1, [pc, #60]	; (8003a68 <MX_USB_DEVICE_Init+0x44>)
 8003a2a:	4810      	ldr	r0, [pc, #64]	; (8003a6c <MX_USB_DEVICE_Init+0x48>)
 8003a2c:	f7ff faf7 	bl	800301e <USBD_Init>
 8003a30:	b970      	cbnz	r0, 8003a50 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003a32:	490f      	ldr	r1, [pc, #60]	; (8003a70 <MX_USB_DEVICE_Init+0x4c>)
 8003a34:	480d      	ldr	r0, [pc, #52]	; (8003a6c <MX_USB_DEVICE_Init+0x48>)
 8003a36:	f7ff fb0e 	bl	8003056 <USBD_RegisterClass>
 8003a3a:	b960      	cbnz	r0, 8003a56 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003a3c:	490d      	ldr	r1, [pc, #52]	; (8003a74 <MX_USB_DEVICE_Init+0x50>)
 8003a3e:	480b      	ldr	r0, [pc, #44]	; (8003a6c <MX_USB_DEVICE_Init+0x48>)
 8003a40:	f7ff fabf 	bl	8002fc2 <USBD_CDC_RegisterInterface>
 8003a44:	b950      	cbnz	r0, 8003a5c <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003a46:	4809      	ldr	r0, [pc, #36]	; (8003a6c <MX_USB_DEVICE_Init+0x48>)
 8003a48:	f7ff fb19 	bl	800307e <USBD_Start>
 8003a4c:	b948      	cbnz	r0, 8003a62 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003a4e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003a50:	f7fd f9e6 	bl	8000e20 <Error_Handler>
 8003a54:	e7ed      	b.n	8003a32 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8003a56:	f7fd f9e3 	bl	8000e20 <Error_Handler>
 8003a5a:	e7ef      	b.n	8003a3c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8003a5c:	f7fd f9e0 	bl	8000e20 <Error_Handler>
 8003a60:	e7f1      	b.n	8003a46 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8003a62:	f7fd f9dd 	bl	8000e20 <Error_Handler>
}
 8003a66:	e7f2      	b.n	8003a4e <MX_USB_DEVICE_Init+0x2a>
 8003a68:	20000134 	.word	0x20000134
 8003a6c:	20000388 	.word	0x20000388
 8003a70:	20000010 	.word	0x20000010
 8003a74:	20000120 	.word	0x20000120

08003a78 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003a78:	2000      	movs	r0, #0
 8003a7a:	4770      	bx	lr

08003a7c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003a7c:	2000      	movs	r0, #0
 8003a7e:	4770      	bx	lr

08003a80 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8003a80:	2000      	movs	r0, #0
 8003a82:	4770      	bx	lr

08003a84 <CDC_Receive_FS>:
{
 8003a84:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003a86:	4c05      	ldr	r4, [pc, #20]	; (8003a9c <CDC_Receive_FS+0x18>)
 8003a88:	4601      	mov	r1, r0
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7ff faa8 	bl	8002fe0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003a90:	4620      	mov	r0, r4
 8003a92:	f7ff faab 	bl	8002fec <USBD_CDC_ReceivePacket>
}
 8003a96:	2000      	movs	r0, #0
 8003a98:	bd10      	pop	{r4, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000388 	.word	0x20000388

08003aa0 <CDC_Init_FS>:
{
 8003aa0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003aa2:	4c06      	ldr	r4, [pc, #24]	; (8003abc <CDC_Init_FS+0x1c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4906      	ldr	r1, [pc, #24]	; (8003ac0 <CDC_Init_FS+0x20>)
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff fa91 	bl	8002fd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003aae:	4905      	ldr	r1, [pc, #20]	; (8003ac4 <CDC_Init_FS+0x24>)
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f7ff fa95 	bl	8002fe0 <USBD_CDC_SetRxBuffer>
}
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	bd10      	pop	{r4, pc}
 8003aba:	bf00      	nop
 8003abc:	20000388 	.word	0x20000388
 8003ac0:	20000e58 	.word	0x20000e58
 8003ac4:	20000658 	.word	0x20000658

08003ac8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003ac8:	2312      	movs	r3, #18
 8003aca:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8003acc:	4800      	ldr	r0, [pc, #0]	; (8003ad0 <USBD_FS_DeviceDescriptor+0x8>)
 8003ace:	4770      	bx	lr
 8003ad0:	20000150 	.word	0x20000150

08003ad4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8003ad8:	4800      	ldr	r0, [pc, #0]	; (8003adc <USBD_FS_LangIDStrDescriptor+0x8>)
 8003ada:	4770      	bx	lr
 8003adc:	20000164 	.word	0x20000164

08003ae0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d216      	bcs.n	8003b14 <IntToUnicode+0x34>
{
 8003ae6:	b430      	push	{r4, r5}
 8003ae8:	e00b      	b.n	8003b02 <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003aea:	3437      	adds	r4, #55	; 0x37
 8003aec:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8003af0:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8003af2:	005c      	lsls	r4, r3, #1
 8003af4:	3401      	adds	r4, #1
 8003af6:	2500      	movs	r5, #0
 8003af8:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8003afa:	3301      	adds	r3, #1
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d206      	bcs.n	8003b10 <IntToUnicode+0x30>
    if (((value >> 28)) < 0xA)
 8003b02:	0f04      	lsrs	r4, r0, #28
 8003b04:	2c09      	cmp	r4, #9
 8003b06:	d8f0      	bhi.n	8003aea <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8003b08:	3430      	adds	r4, #48	; 0x30
 8003b0a:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8003b0e:	e7ef      	b.n	8003af0 <IntToUnicode+0x10>
  }
}
 8003b10:	bc30      	pop	{r4, r5}
 8003b12:	4770      	bx	lr
 8003b14:	4770      	bx	lr
	...

08003b18 <Get_SerialNum>:
{
 8003b18:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <Get_SerialNum+0x2c>)
 8003b1c:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8003b1e:	3304      	adds	r3, #4
 8003b20:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8003b22:	3304      	adds	r3, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8003b26:	18c0      	adds	r0, r0, r3
 8003b28:	d100      	bne.n	8003b2c <Get_SerialNum+0x14>
}
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003b2c:	4d06      	ldr	r5, [pc, #24]	; (8003b48 <Get_SerialNum+0x30>)
 8003b2e:	2208      	movs	r2, #8
 8003b30:	1ca9      	adds	r1, r5, #2
 8003b32:	f7ff ffd5 	bl	8003ae0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003b36:	2204      	movs	r2, #4
 8003b38:	f105 0112 	add.w	r1, r5, #18
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f7ff ffcf 	bl	8003ae0 <IntToUnicode>
}
 8003b42:	e7f2      	b.n	8003b2a <Get_SerialNum+0x12>
 8003b44:	1fff7a10 	.word	0x1fff7a10
 8003b48:	20000168 	.word	0x20000168

08003b4c <USBD_FS_SerialStrDescriptor>:
{
 8003b4c:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003b4e:	231a      	movs	r3, #26
 8003b50:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8003b52:	f7ff ffe1 	bl	8003b18 <Get_SerialNum>
}
 8003b56:	4801      	ldr	r0, [pc, #4]	; (8003b5c <USBD_FS_SerialStrDescriptor+0x10>)
 8003b58:	bd08      	pop	{r3, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000168 	.word	0x20000168

08003b60 <USBD_FS_ProductStrDescriptor>:
{
 8003b60:	b508      	push	{r3, lr}
 8003b62:	460a      	mov	r2, r1
  if(speed == 0)
 8003b64:	b128      	cbz	r0, 8003b72 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003b66:	4905      	ldr	r1, [pc, #20]	; (8003b7c <USBD_FS_ProductStrDescriptor+0x1c>)
 8003b68:	4805      	ldr	r0, [pc, #20]	; (8003b80 <USBD_FS_ProductStrDescriptor+0x20>)
 8003b6a:	f7ff fefc 	bl	8003966 <USBD_GetString>
}
 8003b6e:	4803      	ldr	r0, [pc, #12]	; (8003b7c <USBD_FS_ProductStrDescriptor+0x1c>)
 8003b70:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003b72:	4902      	ldr	r1, [pc, #8]	; (8003b7c <USBD_FS_ProductStrDescriptor+0x1c>)
 8003b74:	4802      	ldr	r0, [pc, #8]	; (8003b80 <USBD_FS_ProductStrDescriptor+0x20>)
 8003b76:	f7ff fef6 	bl	8003966 <USBD_GetString>
 8003b7a:	e7f8      	b.n	8003b6e <USBD_FS_ProductStrDescriptor+0xe>
 8003b7c:	20001658 	.word	0x20001658
 8003b80:	080079f0 	.word	0x080079f0

08003b84 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003b84:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003b86:	4c04      	ldr	r4, [pc, #16]	; (8003b98 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003b88:	460a      	mov	r2, r1
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	4803      	ldr	r0, [pc, #12]	; (8003b9c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003b8e:	f7ff feea 	bl	8003966 <USBD_GetString>
}
 8003b92:	4620      	mov	r0, r4
 8003b94:	bd10      	pop	{r4, pc}
 8003b96:	bf00      	nop
 8003b98:	20001658 	.word	0x20001658
 8003b9c:	080079dc 	.word	0x080079dc

08003ba0 <USBD_FS_ConfigStrDescriptor>:
{
 8003ba0:	b508      	push	{r3, lr}
 8003ba2:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8003ba4:	b128      	cbz	r0, 8003bb2 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003ba6:	4905      	ldr	r1, [pc, #20]	; (8003bbc <USBD_FS_ConfigStrDescriptor+0x1c>)
 8003ba8:	4805      	ldr	r0, [pc, #20]	; (8003bc0 <USBD_FS_ConfigStrDescriptor+0x20>)
 8003baa:	f7ff fedc 	bl	8003966 <USBD_GetString>
}
 8003bae:	4803      	ldr	r0, [pc, #12]	; (8003bbc <USBD_FS_ConfigStrDescriptor+0x1c>)
 8003bb0:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003bb2:	4902      	ldr	r1, [pc, #8]	; (8003bbc <USBD_FS_ConfigStrDescriptor+0x1c>)
 8003bb4:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <USBD_FS_ConfigStrDescriptor+0x20>)
 8003bb6:	f7ff fed6 	bl	8003966 <USBD_GetString>
 8003bba:	e7f8      	b.n	8003bae <USBD_FS_ConfigStrDescriptor+0xe>
 8003bbc:	20001658 	.word	0x20001658
 8003bc0:	080079c0 	.word	0x080079c0

08003bc4 <USBD_FS_InterfaceStrDescriptor>:
{
 8003bc4:	b508      	push	{r3, lr}
 8003bc6:	460a      	mov	r2, r1
  if(speed == 0)
 8003bc8:	b128      	cbz	r0, 8003bd6 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003bca:	4905      	ldr	r1, [pc, #20]	; (8003be0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8003bcc:	4805      	ldr	r0, [pc, #20]	; (8003be4 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8003bce:	f7ff feca 	bl	8003966 <USBD_GetString>
}
 8003bd2:	4803      	ldr	r0, [pc, #12]	; (8003be0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8003bd4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003bd6:	4902      	ldr	r1, [pc, #8]	; (8003be0 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8003bda:	f7ff fec4 	bl	8003966 <USBD_GetString>
 8003bde:	e7f8      	b.n	8003bd2 <USBD_FS_InterfaceStrDescriptor+0xe>
 8003be0:	20001658 	.word	0x20001658
 8003be4:	080079cc 	.word	0x080079cc

08003be8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003be8:	b530      	push	{r4, r5, lr}
 8003bea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bec:	2300      	movs	r3, #0
 8003bee:	9303      	str	r3, [sp, #12]
 8003bf0:	9304      	str	r3, [sp, #16]
 8003bf2:	9305      	str	r3, [sp, #20]
 8003bf4:	9306      	str	r3, [sp, #24]
 8003bf6:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8003bf8:	6803      	ldr	r3, [r0, #0]
 8003bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bfe:	d001      	beq.n	8003c04 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003c00:	b009      	add	sp, #36	; 0x24
 8003c02:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c04:	2500      	movs	r5, #0
 8003c06:	9501      	str	r5, [sp, #4]
 8003c08:	4c16      	ldr	r4, [pc, #88]	; (8003c64 <HAL_PCD_MspInit+0x7c>)
 8003c0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6323      	str	r3, [r4, #48]	; 0x30
 8003c12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003c20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c22:	2302      	movs	r3, #2
 8003c24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c26:	2303      	movs	r3, #3
 8003c28:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003c2a:	230a      	movs	r3, #10
 8003c2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2e:	a903      	add	r1, sp, #12
 8003c30:	480d      	ldr	r0, [pc, #52]	; (8003c68 <HAL_PCD_MspInit+0x80>)
 8003c32:	f7fd fb1d 	bl	8001270 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c3c:	6363      	str	r3, [r4, #52]	; 0x34
 8003c3e:	9502      	str	r5, [sp, #8]
 8003c40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c46:	6463      	str	r3, [r4, #68]	; 0x44
 8003c48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4e:	9302      	str	r3, [sp, #8]
 8003c50:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 1, 0);
 8003c52:	462a      	mov	r2, r5
 8003c54:	2101      	movs	r1, #1
 8003c56:	2043      	movs	r0, #67	; 0x43
 8003c58:	f7fd fab2 	bl	80011c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003c5c:	2043      	movs	r0, #67	; 0x43
 8003c5e:	f7fd fae3 	bl	8001228 <HAL_NVIC_EnableIRQ>
}
 8003c62:	e7cd      	b.n	8003c00 <HAL_PCD_MspInit+0x18>
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40020000 	.word	0x40020000

08003c6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003c6c:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003c6e:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8003c72:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c76:	f7ff fa17 	bl	80030a8 <USBD_LL_SetupStage>
}
 8003c7a:	bd08      	pop	{r3, pc}

08003c7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003c7c:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003c7e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8003c82:	0093      	lsls	r3, r2, #2
 8003c84:	4403      	add	r3, r0
 8003c86:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003c8a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003c8e:	f7ff fa37 	bl	8003100 <USBD_LL_DataOutStage>
}
 8003c92:	bd08      	pop	{r3, pc}

08003c94 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003c94:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003c96:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8003c9a:	0093      	lsls	r3, r2, #2
 8003c9c:	4403      	add	r3, r0
 8003c9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003ca4:	f7ff fa65 	bl	8003172 <USBD_LL_DataInStage>
}
 8003ca8:	bd08      	pop	{r3, pc}

08003caa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003caa:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003cac:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003cb0:	f7ff fafa 	bl	80032a8 <USBD_LL_SOF>
}
 8003cb4:	bd08      	pop	{r3, pc}

08003cb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8003cba:	68c3      	ldr	r3, [r0, #12]
 8003cbc:	b12b      	cbz	r3, 8003cca <HAL_PCD_ResetCallback+0x14>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d00d      	beq.n	8003cde <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 8003cc2:	f7fd f8ad 	bl	8000e20 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_PCD_ResetCallback+0x16>
    speed = USBD_SPEED_HIGH;
 8003cca:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003ccc:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8003cd0:	f7ff fad3 	bl	800327a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003cd4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8003cd8:	f7ff faa6 	bl	8003228 <USBD_LL_Reset>
}
 8003cdc:	bd10      	pop	{r4, pc}
    speed = USBD_SPEED_FULL;
 8003cde:	2101      	movs	r1, #1
 8003ce0:	e7f4      	b.n	8003ccc <HAL_PCD_ResetCallback+0x16>
	...

08003ce4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003ce8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003cec:	f7ff fac8 	bl	8003280 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003cf0:	6822      	ldr	r2, [r4, #0]
 8003cf2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003cfe:	6a23      	ldr	r3, [r4, #32]
 8003d00:	b123      	cbz	r3, 8003d0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003d02:	4a03      	ldr	r2, [pc, #12]	; (8003d10 <HAL_PCD_SuspendCallback+0x2c>)
 8003d04:	6913      	ldr	r3, [r2, #16]
 8003d06:	f043 0306 	orr.w	r3, r3, #6
 8003d0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003d0c:	bd10      	pop	{r4, pc}
 8003d0e:	bf00      	nop
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003d14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003d16:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003d1a:	f7ff faba 	bl	8003292 <USBD_LL_Resume>
}
 8003d1e:	bd08      	pop	{r3, pc}

08003d20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003d20:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003d22:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003d26:	f7ff facf 	bl	80032c8 <USBD_LL_IsoOUTIncomplete>
}
 8003d2a:	bd08      	pop	{r3, pc}

08003d2c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003d2c:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003d2e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003d32:	f7ff fac7 	bl	80032c4 <USBD_LL_IsoINIncomplete>
}
 8003d36:	bd08      	pop	{r3, pc}

08003d38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003d38:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003d3a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003d3e:	f7ff fac5 	bl	80032cc <USBD_LL_DevConnected>
}
 8003d42:	bd08      	pop	{r3, pc}

08003d44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003d44:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003d46:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8003d4a:	f7ff fac1 	bl	80032d0 <USBD_LL_DevDisconnected>
}
 8003d4e:	bd08      	pop	{r3, pc}

08003d50 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003d50:	7803      	ldrb	r3, [r0, #0]
 8003d52:	b10b      	cbz	r3, 8003d58 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8003d54:	2000      	movs	r0, #0
 8003d56:	4770      	bx	lr
{
 8003d58:	b510      	push	{r4, lr}
 8003d5a:	4603      	mov	r3, r0
  hpcd_USB_OTG_FS.pData = pdev;
 8003d5c:	4815      	ldr	r0, [pc, #84]	; (8003db4 <USBD_LL_Init+0x64>)
 8003d5e:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8003d62:	f8c3 02c4 	str.w	r0, [r3, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003d66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d6a:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003d70:	2202      	movs	r2, #2
 8003d72:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003d74:	2300      	movs	r3, #0
 8003d76:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003d78:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003d7a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003d7c:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003d7e:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003d80:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003d82:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003d84:	f7fd fbc2 	bl	800150c <HAL_PCD_Init>
 8003d88:	b980      	cbnz	r0, 8003dac <USBD_LL_Init+0x5c>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8003d8a:	4c0a      	ldr	r4, [pc, #40]	; (8003db4 <USBD_LL_Init+0x64>)
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	4620      	mov	r0, r4
 8003d90:	f7fe f8f2 	bl	8001f78 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003d94:	2240      	movs	r2, #64	; 0x40
 8003d96:	2100      	movs	r1, #0
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f7fe f8c9 	bl	8001f30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8003d9e:	2280      	movs	r2, #128	; 0x80
 8003da0:	2101      	movs	r1, #1
 8003da2:	4620      	mov	r0, r4
 8003da4:	f7fe f8c4 	bl	8001f30 <HAL_PCDEx_SetTxFiFo>
}
 8003da8:	2000      	movs	r0, #0
 8003daa:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8003dac:	f7fd f838 	bl	8000e20 <Error_Handler>
 8003db0:	e7eb      	b.n	8003d8a <USBD_LL_Init+0x3a>
 8003db2:	bf00      	nop
 8003db4:	20001858 	.word	0x20001858

08003db8 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003db8:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 8003dbc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003dc0:	d108      	bne.n	8003dd4 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003dc2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003dc6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003dca:	008a      	lsls	r2, r1, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	f893 01fe 	ldrb.w	r0, [r3, #510]	; 0x1fe
  }
}
 8003dd2:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003dd4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003dd8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003ddc:	008a      	lsls	r2, r1, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	f893 003e 	ldrb.w	r0, [r3, #62]	; 0x3e
 8003de4:	4770      	bx	lr

08003de6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003de6:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003de8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003dec:	f7fd fff5 	bl	8001dda <HAL_PCD_EP_GetRxCount>
}
 8003df0:	bd08      	pop	{r3, pc}

08003df2 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8003df2:	b118      	cbz	r0, 8003dfc <USBD_Get_USB_Status+0xa>
 8003df4:	2802      	cmp	r0, #2
 8003df6:	d003      	beq.n	8003e00 <USBD_Get_USB_Status+0xe>
  {
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8003df8:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003dfa:	4770      	bx	lr
      usb_status = USBD_OK;
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	4770      	bx	lr
      usb_status = USBD_BUSY;
 8003e00:	2001      	movs	r0, #1
    break;
 8003e02:	4770      	bx	lr

08003e04 <USBD_LL_Start>:
{
 8003e04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003e06:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e0a:	f7fd fc10 	bl	800162e <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e0e:	f7ff fff0 	bl	8003df2 <USBD_Get_USB_Status>
}
 8003e12:	bd08      	pop	{r3, pc}

08003e14 <USBD_LL_OpenEP>:
{
 8003e14:	b510      	push	{r4, lr}
 8003e16:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003e18:	4613      	mov	r3, r2
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e20:	f7fd ff35 	bl	8001c8e <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e24:	f7ff ffe5 	bl	8003df2 <USBD_Get_USB_Status>
}
 8003e28:	bd10      	pop	{r4, pc}

08003e2a <USBD_LL_CloseEP>:
{
 8003e2a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003e2c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e30:	f7fd ff6e 	bl	8001d10 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e34:	f7ff ffdd 	bl	8003df2 <USBD_Get_USB_Status>
}
 8003e38:	bd08      	pop	{r3, pc}

08003e3a <USBD_LL_StallEP>:
{
 8003e3a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003e3c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e40:	f7fd fffe 	bl	8001e40 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e44:	f7ff ffd5 	bl	8003df2 <USBD_Get_USB_Status>
}
 8003e48:	bd08      	pop	{r3, pc}

08003e4a <USBD_LL_ClearStallEP>:
{
 8003e4a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003e4c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e50:	f7fe f837 	bl	8001ec2 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e54:	f7ff ffcd 	bl	8003df2 <USBD_Get_USB_Status>
}
 8003e58:	bd08      	pop	{r3, pc}

08003e5a <USBD_LL_SetUSBAddress>:
{
 8003e5a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003e5c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e60:	f7fd ff01 	bl	8001c66 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e64:	f7ff ffc5 	bl	8003df2 <USBD_Get_USB_Status>
}
 8003e68:	bd08      	pop	{r3, pc}

08003e6a <USBD_LL_Transmit>:
{
 8003e6a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003e6c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e70:	f7fd ffbc 	bl	8001dec <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e74:	f7ff ffbd 	bl	8003df2 <USBD_Get_USB_Status>
}
 8003e78:	bd08      	pop	{r3, pc}

08003e7a <USBD_LL_PrepareReceive>:
{
 8003e7a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003e7c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8003e80:	f7fd ff7d 	bl	8001d7e <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003e84:	f7ff ffb5 	bl	8003df2 <USBD_Get_USB_Status>
}
 8003e88:	bd08      	pop	{r3, pc}
	...

08003e8c <arm_sin_q15>:
 8003e8c:	0982      	lsrs	r2, r0, #6
 8003e8e:	490c      	ldr	r1, [pc, #48]	; (8003ec0 <arm_sin_q15+0x34>)
 8003e90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003e94:	0240      	lsls	r0, r0, #9
 8003e96:	f931 3012 	ldrsh.w	r3, [r1, r2, lsl #1]
 8003e9a:	b410      	push	{r4}
 8003e9c:	3201      	adds	r2, #1
 8003e9e:	f5c0 4400 	rsb	r4, r0, #32768	; 0x8000
 8003ea2:	fb03 f304 	mul.w	r3, r3, r4
 8003ea6:	0c1b      	lsrs	r3, r3, #16
 8003ea8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	fb10 3002 	smlabb	r0, r0, r2, r3
 8003eb6:	f340 30cf 	sbfx	r0, r0, #15, #16
 8003eba:	f020 0001 	bic.w	r0, r0, #1
 8003ebe:	4770      	bx	lr
 8003ec0:	08007a08 	.word	0x08007a08

08003ec4 <__errno>:
 8003ec4:	4b01      	ldr	r3, [pc, #4]	; (8003ecc <__errno+0x8>)
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000184 	.word	0x20000184

08003ed0 <__libc_init_array>:
 8003ed0:	b570      	push	{r4, r5, r6, lr}
 8003ed2:	4e0d      	ldr	r6, [pc, #52]	; (8003f08 <__libc_init_array+0x38>)
 8003ed4:	4c0d      	ldr	r4, [pc, #52]	; (8003f0c <__libc_init_array+0x3c>)
 8003ed6:	1ba4      	subs	r4, r4, r6
 8003ed8:	10a4      	asrs	r4, r4, #2
 8003eda:	2500      	movs	r5, #0
 8003edc:	42a5      	cmp	r5, r4
 8003ede:	d109      	bne.n	8003ef4 <__libc_init_array+0x24>
 8003ee0:	4e0b      	ldr	r6, [pc, #44]	; (8003f10 <__libc_init_array+0x40>)
 8003ee2:	4c0c      	ldr	r4, [pc, #48]	; (8003f14 <__libc_init_array+0x44>)
 8003ee4:	f003 fd5e 	bl	80079a4 <_init>
 8003ee8:	1ba4      	subs	r4, r4, r6
 8003eea:	10a4      	asrs	r4, r4, #2
 8003eec:	2500      	movs	r5, #0
 8003eee:	42a5      	cmp	r5, r4
 8003ef0:	d105      	bne.n	8003efe <__libc_init_array+0x2e>
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ef8:	4798      	blx	r3
 8003efa:	3501      	adds	r5, #1
 8003efc:	e7ee      	b.n	8003edc <__libc_init_array+0xc>
 8003efe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f02:	4798      	blx	r3
 8003f04:	3501      	adds	r5, #1
 8003f06:	e7f2      	b.n	8003eee <__libc_init_array+0x1e>
 8003f08:	080080c0 	.word	0x080080c0
 8003f0c:	080080c0 	.word	0x080080c0
 8003f10:	080080c0 	.word	0x080080c0
 8003f14:	080080c4 	.word	0x080080c4

08003f18 <malloc>:
 8003f18:	4b02      	ldr	r3, [pc, #8]	; (8003f24 <malloc+0xc>)
 8003f1a:	4601      	mov	r1, r0
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	f000 b861 	b.w	8003fe4 <_malloc_r>
 8003f22:	bf00      	nop
 8003f24:	20000184 	.word	0x20000184

08003f28 <free>:
 8003f28:	4b02      	ldr	r3, [pc, #8]	; (8003f34 <free+0xc>)
 8003f2a:	4601      	mov	r1, r0
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	f000 b80b 	b.w	8003f48 <_free_r>
 8003f32:	bf00      	nop
 8003f34:	20000184 	.word	0x20000184

08003f38 <memset>:
 8003f38:	4402      	add	r2, r0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d100      	bne.n	8003f42 <memset+0xa>
 8003f40:	4770      	bx	lr
 8003f42:	f803 1b01 	strb.w	r1, [r3], #1
 8003f46:	e7f9      	b.n	8003f3c <memset+0x4>

08003f48 <_free_r>:
 8003f48:	b538      	push	{r3, r4, r5, lr}
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	2900      	cmp	r1, #0
 8003f4e:	d045      	beq.n	8003fdc <_free_r+0x94>
 8003f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f54:	1f0c      	subs	r4, r1, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	bfb8      	it	lt
 8003f5a:	18e4      	addlt	r4, r4, r3
 8003f5c:	f002 ff5b 	bl	8006e16 <__malloc_lock>
 8003f60:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <_free_r+0x98>)
 8003f62:	6813      	ldr	r3, [r2, #0]
 8003f64:	4610      	mov	r0, r2
 8003f66:	b933      	cbnz	r3, 8003f76 <_free_r+0x2e>
 8003f68:	6063      	str	r3, [r4, #4]
 8003f6a:	6014      	str	r4, [r2, #0]
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f72:	f002 bf51 	b.w	8006e18 <__malloc_unlock>
 8003f76:	42a3      	cmp	r3, r4
 8003f78:	d90c      	bls.n	8003f94 <_free_r+0x4c>
 8003f7a:	6821      	ldr	r1, [r4, #0]
 8003f7c:	1862      	adds	r2, r4, r1
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	bf04      	itt	eq
 8003f82:	681a      	ldreq	r2, [r3, #0]
 8003f84:	685b      	ldreq	r3, [r3, #4]
 8003f86:	6063      	str	r3, [r4, #4]
 8003f88:	bf04      	itt	eq
 8003f8a:	1852      	addeq	r2, r2, r1
 8003f8c:	6022      	streq	r2, [r4, #0]
 8003f8e:	6004      	str	r4, [r0, #0]
 8003f90:	e7ec      	b.n	8003f6c <_free_r+0x24>
 8003f92:	4613      	mov	r3, r2
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	b10a      	cbz	r2, 8003f9c <_free_r+0x54>
 8003f98:	42a2      	cmp	r2, r4
 8003f9a:	d9fa      	bls.n	8003f92 <_free_r+0x4a>
 8003f9c:	6819      	ldr	r1, [r3, #0]
 8003f9e:	1858      	adds	r0, r3, r1
 8003fa0:	42a0      	cmp	r0, r4
 8003fa2:	d10b      	bne.n	8003fbc <_free_r+0x74>
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	4401      	add	r1, r0
 8003fa8:	1858      	adds	r0, r3, r1
 8003faa:	4282      	cmp	r2, r0
 8003fac:	6019      	str	r1, [r3, #0]
 8003fae:	d1dd      	bne.n	8003f6c <_free_r+0x24>
 8003fb0:	6810      	ldr	r0, [r2, #0]
 8003fb2:	6852      	ldr	r2, [r2, #4]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	4401      	add	r1, r0
 8003fb8:	6019      	str	r1, [r3, #0]
 8003fba:	e7d7      	b.n	8003f6c <_free_r+0x24>
 8003fbc:	d902      	bls.n	8003fc4 <_free_r+0x7c>
 8003fbe:	230c      	movs	r3, #12
 8003fc0:	602b      	str	r3, [r5, #0]
 8003fc2:	e7d3      	b.n	8003f6c <_free_r+0x24>
 8003fc4:	6820      	ldr	r0, [r4, #0]
 8003fc6:	1821      	adds	r1, r4, r0
 8003fc8:	428a      	cmp	r2, r1
 8003fca:	bf04      	itt	eq
 8003fcc:	6811      	ldreq	r1, [r2, #0]
 8003fce:	6852      	ldreq	r2, [r2, #4]
 8003fd0:	6062      	str	r2, [r4, #4]
 8003fd2:	bf04      	itt	eq
 8003fd4:	1809      	addeq	r1, r1, r0
 8003fd6:	6021      	streq	r1, [r4, #0]
 8003fd8:	605c      	str	r4, [r3, #4]
 8003fda:	e7c7      	b.n	8003f6c <_free_r+0x24>
 8003fdc:	bd38      	pop	{r3, r4, r5, pc}
 8003fde:	bf00      	nop
 8003fe0:	2000037c 	.word	0x2000037c

08003fe4 <_malloc_r>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	1ccd      	adds	r5, r1, #3
 8003fe8:	f025 0503 	bic.w	r5, r5, #3
 8003fec:	3508      	adds	r5, #8
 8003fee:	2d0c      	cmp	r5, #12
 8003ff0:	bf38      	it	cc
 8003ff2:	250c      	movcc	r5, #12
 8003ff4:	2d00      	cmp	r5, #0
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	db01      	blt.n	8003ffe <_malloc_r+0x1a>
 8003ffa:	42a9      	cmp	r1, r5
 8003ffc:	d903      	bls.n	8004006 <_malloc_r+0x22>
 8003ffe:	230c      	movs	r3, #12
 8004000:	6033      	str	r3, [r6, #0]
 8004002:	2000      	movs	r0, #0
 8004004:	bd70      	pop	{r4, r5, r6, pc}
 8004006:	f002 ff06 	bl	8006e16 <__malloc_lock>
 800400a:	4a21      	ldr	r2, [pc, #132]	; (8004090 <_malloc_r+0xac>)
 800400c:	6814      	ldr	r4, [r2, #0]
 800400e:	4621      	mov	r1, r4
 8004010:	b991      	cbnz	r1, 8004038 <_malloc_r+0x54>
 8004012:	4c20      	ldr	r4, [pc, #128]	; (8004094 <_malloc_r+0xb0>)
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	b91b      	cbnz	r3, 8004020 <_malloc_r+0x3c>
 8004018:	4630      	mov	r0, r6
 800401a:	f000 fe7b 	bl	8004d14 <_sbrk_r>
 800401e:	6020      	str	r0, [r4, #0]
 8004020:	4629      	mov	r1, r5
 8004022:	4630      	mov	r0, r6
 8004024:	f000 fe76 	bl	8004d14 <_sbrk_r>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d124      	bne.n	8004076 <_malloc_r+0x92>
 800402c:	230c      	movs	r3, #12
 800402e:	6033      	str	r3, [r6, #0]
 8004030:	4630      	mov	r0, r6
 8004032:	f002 fef1 	bl	8006e18 <__malloc_unlock>
 8004036:	e7e4      	b.n	8004002 <_malloc_r+0x1e>
 8004038:	680b      	ldr	r3, [r1, #0]
 800403a:	1b5b      	subs	r3, r3, r5
 800403c:	d418      	bmi.n	8004070 <_malloc_r+0x8c>
 800403e:	2b0b      	cmp	r3, #11
 8004040:	d90f      	bls.n	8004062 <_malloc_r+0x7e>
 8004042:	600b      	str	r3, [r1, #0]
 8004044:	50cd      	str	r5, [r1, r3]
 8004046:	18cc      	adds	r4, r1, r3
 8004048:	4630      	mov	r0, r6
 800404a:	f002 fee5 	bl	8006e18 <__malloc_unlock>
 800404e:	f104 000b 	add.w	r0, r4, #11
 8004052:	1d23      	adds	r3, r4, #4
 8004054:	f020 0007 	bic.w	r0, r0, #7
 8004058:	1ac3      	subs	r3, r0, r3
 800405a:	d0d3      	beq.n	8004004 <_malloc_r+0x20>
 800405c:	425a      	negs	r2, r3
 800405e:	50e2      	str	r2, [r4, r3]
 8004060:	e7d0      	b.n	8004004 <_malloc_r+0x20>
 8004062:	428c      	cmp	r4, r1
 8004064:	684b      	ldr	r3, [r1, #4]
 8004066:	bf16      	itet	ne
 8004068:	6063      	strne	r3, [r4, #4]
 800406a:	6013      	streq	r3, [r2, #0]
 800406c:	460c      	movne	r4, r1
 800406e:	e7eb      	b.n	8004048 <_malloc_r+0x64>
 8004070:	460c      	mov	r4, r1
 8004072:	6849      	ldr	r1, [r1, #4]
 8004074:	e7cc      	b.n	8004010 <_malloc_r+0x2c>
 8004076:	1cc4      	adds	r4, r0, #3
 8004078:	f024 0403 	bic.w	r4, r4, #3
 800407c:	42a0      	cmp	r0, r4
 800407e:	d005      	beq.n	800408c <_malloc_r+0xa8>
 8004080:	1a21      	subs	r1, r4, r0
 8004082:	4630      	mov	r0, r6
 8004084:	f000 fe46 	bl	8004d14 <_sbrk_r>
 8004088:	3001      	adds	r0, #1
 800408a:	d0cf      	beq.n	800402c <_malloc_r+0x48>
 800408c:	6025      	str	r5, [r4, #0]
 800408e:	e7db      	b.n	8004048 <_malloc_r+0x64>
 8004090:	2000037c 	.word	0x2000037c
 8004094:	20000380 	.word	0x20000380

08004098 <__cvt>:
 8004098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800409c:	ec55 4b10 	vmov	r4, r5, d0
 80040a0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80040a2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80040a6:	2d00      	cmp	r5, #0
 80040a8:	460e      	mov	r6, r1
 80040aa:	4691      	mov	r9, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	bfb8      	it	lt
 80040b0:	4622      	movlt	r2, r4
 80040b2:	462b      	mov	r3, r5
 80040b4:	f027 0720 	bic.w	r7, r7, #32
 80040b8:	bfbb      	ittet	lt
 80040ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040be:	461d      	movlt	r5, r3
 80040c0:	2300      	movge	r3, #0
 80040c2:	232d      	movlt	r3, #45	; 0x2d
 80040c4:	bfb8      	it	lt
 80040c6:	4614      	movlt	r4, r2
 80040c8:	2f46      	cmp	r7, #70	; 0x46
 80040ca:	700b      	strb	r3, [r1, #0]
 80040cc:	d004      	beq.n	80040d8 <__cvt+0x40>
 80040ce:	2f45      	cmp	r7, #69	; 0x45
 80040d0:	d100      	bne.n	80040d4 <__cvt+0x3c>
 80040d2:	3601      	adds	r6, #1
 80040d4:	2102      	movs	r1, #2
 80040d6:	e000      	b.n	80040da <__cvt+0x42>
 80040d8:	2103      	movs	r1, #3
 80040da:	ab03      	add	r3, sp, #12
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	ab02      	add	r3, sp, #8
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	4632      	mov	r2, r6
 80040e4:	4653      	mov	r3, sl
 80040e6:	ec45 4b10 	vmov	d0, r4, r5
 80040ea:	f001 fd85 	bl	8005bf8 <_dtoa_r>
 80040ee:	2f47      	cmp	r7, #71	; 0x47
 80040f0:	4680      	mov	r8, r0
 80040f2:	d102      	bne.n	80040fa <__cvt+0x62>
 80040f4:	f019 0f01 	tst.w	r9, #1
 80040f8:	d026      	beq.n	8004148 <__cvt+0xb0>
 80040fa:	2f46      	cmp	r7, #70	; 0x46
 80040fc:	eb08 0906 	add.w	r9, r8, r6
 8004100:	d111      	bne.n	8004126 <__cvt+0x8e>
 8004102:	f898 3000 	ldrb.w	r3, [r8]
 8004106:	2b30      	cmp	r3, #48	; 0x30
 8004108:	d10a      	bne.n	8004120 <__cvt+0x88>
 800410a:	2200      	movs	r2, #0
 800410c:	2300      	movs	r3, #0
 800410e:	4620      	mov	r0, r4
 8004110:	4629      	mov	r1, r5
 8004112:	f7fc fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004116:	b918      	cbnz	r0, 8004120 <__cvt+0x88>
 8004118:	f1c6 0601 	rsb	r6, r6, #1
 800411c:	f8ca 6000 	str.w	r6, [sl]
 8004120:	f8da 3000 	ldr.w	r3, [sl]
 8004124:	4499      	add	r9, r3
 8004126:	2200      	movs	r2, #0
 8004128:	2300      	movs	r3, #0
 800412a:	4620      	mov	r0, r4
 800412c:	4629      	mov	r1, r5
 800412e:	f7fc fccb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004132:	b938      	cbnz	r0, 8004144 <__cvt+0xac>
 8004134:	2230      	movs	r2, #48	; 0x30
 8004136:	9b03      	ldr	r3, [sp, #12]
 8004138:	454b      	cmp	r3, r9
 800413a:	d205      	bcs.n	8004148 <__cvt+0xb0>
 800413c:	1c59      	adds	r1, r3, #1
 800413e:	9103      	str	r1, [sp, #12]
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e7f8      	b.n	8004136 <__cvt+0x9e>
 8004144:	f8cd 900c 	str.w	r9, [sp, #12]
 8004148:	9b03      	ldr	r3, [sp, #12]
 800414a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800414c:	eba3 0308 	sub.w	r3, r3, r8
 8004150:	4640      	mov	r0, r8
 8004152:	6013      	str	r3, [r2, #0]
 8004154:	b004      	add	sp, #16
 8004156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800415a <__exponent>:
 800415a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800415c:	2900      	cmp	r1, #0
 800415e:	4604      	mov	r4, r0
 8004160:	bfba      	itte	lt
 8004162:	4249      	neglt	r1, r1
 8004164:	232d      	movlt	r3, #45	; 0x2d
 8004166:	232b      	movge	r3, #43	; 0x2b
 8004168:	2909      	cmp	r1, #9
 800416a:	f804 2b02 	strb.w	r2, [r4], #2
 800416e:	7043      	strb	r3, [r0, #1]
 8004170:	dd20      	ble.n	80041b4 <__exponent+0x5a>
 8004172:	f10d 0307 	add.w	r3, sp, #7
 8004176:	461f      	mov	r7, r3
 8004178:	260a      	movs	r6, #10
 800417a:	fb91 f5f6 	sdiv	r5, r1, r6
 800417e:	fb06 1115 	mls	r1, r6, r5, r1
 8004182:	3130      	adds	r1, #48	; 0x30
 8004184:	2d09      	cmp	r5, #9
 8004186:	f803 1c01 	strb.w	r1, [r3, #-1]
 800418a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800418e:	4629      	mov	r1, r5
 8004190:	dc09      	bgt.n	80041a6 <__exponent+0x4c>
 8004192:	3130      	adds	r1, #48	; 0x30
 8004194:	3b02      	subs	r3, #2
 8004196:	f802 1c01 	strb.w	r1, [r2, #-1]
 800419a:	42bb      	cmp	r3, r7
 800419c:	4622      	mov	r2, r4
 800419e:	d304      	bcc.n	80041aa <__exponent+0x50>
 80041a0:	1a10      	subs	r0, r2, r0
 80041a2:	b003      	add	sp, #12
 80041a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a6:	4613      	mov	r3, r2
 80041a8:	e7e7      	b.n	800417a <__exponent+0x20>
 80041aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ae:	f804 2b01 	strb.w	r2, [r4], #1
 80041b2:	e7f2      	b.n	800419a <__exponent+0x40>
 80041b4:	2330      	movs	r3, #48	; 0x30
 80041b6:	4419      	add	r1, r3
 80041b8:	7083      	strb	r3, [r0, #2]
 80041ba:	1d02      	adds	r2, r0, #4
 80041bc:	70c1      	strb	r1, [r0, #3]
 80041be:	e7ef      	b.n	80041a0 <__exponent+0x46>

080041c0 <_printf_float>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	b08d      	sub	sp, #52	; 0x34
 80041c6:	460c      	mov	r4, r1
 80041c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80041cc:	4616      	mov	r6, r2
 80041ce:	461f      	mov	r7, r3
 80041d0:	4605      	mov	r5, r0
 80041d2:	f002 fdf5 	bl	8006dc0 <_localeconv_r>
 80041d6:	6803      	ldr	r3, [r0, #0]
 80041d8:	9304      	str	r3, [sp, #16]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fb fff8 	bl	80001d0 <strlen>
 80041e0:	2300      	movs	r3, #0
 80041e2:	930a      	str	r3, [sp, #40]	; 0x28
 80041e4:	f8d8 3000 	ldr.w	r3, [r8]
 80041e8:	9005      	str	r0, [sp, #20]
 80041ea:	3307      	adds	r3, #7
 80041ec:	f023 0307 	bic.w	r3, r3, #7
 80041f0:	f103 0208 	add.w	r2, r3, #8
 80041f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80041f8:	f8d4 b000 	ldr.w	fp, [r4]
 80041fc:	f8c8 2000 	str.w	r2, [r8]
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004208:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800420c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004210:	9307      	str	r3, [sp, #28]
 8004212:	f8cd 8018 	str.w	r8, [sp, #24]
 8004216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800421a:	4ba7      	ldr	r3, [pc, #668]	; (80044b8 <_printf_float+0x2f8>)
 800421c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004220:	f7fc fc84 	bl	8000b2c <__aeabi_dcmpun>
 8004224:	bb70      	cbnz	r0, 8004284 <_printf_float+0xc4>
 8004226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800422a:	4ba3      	ldr	r3, [pc, #652]	; (80044b8 <_printf_float+0x2f8>)
 800422c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004230:	f7fc fc5e 	bl	8000af0 <__aeabi_dcmple>
 8004234:	bb30      	cbnz	r0, 8004284 <_printf_float+0xc4>
 8004236:	2200      	movs	r2, #0
 8004238:	2300      	movs	r3, #0
 800423a:	4640      	mov	r0, r8
 800423c:	4649      	mov	r1, r9
 800423e:	f7fc fc4d 	bl	8000adc <__aeabi_dcmplt>
 8004242:	b110      	cbz	r0, 800424a <_printf_float+0x8a>
 8004244:	232d      	movs	r3, #45	; 0x2d
 8004246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800424a:	4a9c      	ldr	r2, [pc, #624]	; (80044bc <_printf_float+0x2fc>)
 800424c:	4b9c      	ldr	r3, [pc, #624]	; (80044c0 <_printf_float+0x300>)
 800424e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004252:	bf8c      	ite	hi
 8004254:	4690      	movhi	r8, r2
 8004256:	4698      	movls	r8, r3
 8004258:	2303      	movs	r3, #3
 800425a:	f02b 0204 	bic.w	r2, fp, #4
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	6022      	str	r2, [r4, #0]
 8004262:	f04f 0900 	mov.w	r9, #0
 8004266:	9700      	str	r7, [sp, #0]
 8004268:	4633      	mov	r3, r6
 800426a:	aa0b      	add	r2, sp, #44	; 0x2c
 800426c:	4621      	mov	r1, r4
 800426e:	4628      	mov	r0, r5
 8004270:	f000 f9e6 	bl	8004640 <_printf_common>
 8004274:	3001      	adds	r0, #1
 8004276:	f040 808d 	bne.w	8004394 <_printf_float+0x1d4>
 800427a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800427e:	b00d      	add	sp, #52	; 0x34
 8004280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004284:	4642      	mov	r2, r8
 8004286:	464b      	mov	r3, r9
 8004288:	4640      	mov	r0, r8
 800428a:	4649      	mov	r1, r9
 800428c:	f7fc fc4e 	bl	8000b2c <__aeabi_dcmpun>
 8004290:	b110      	cbz	r0, 8004298 <_printf_float+0xd8>
 8004292:	4a8c      	ldr	r2, [pc, #560]	; (80044c4 <_printf_float+0x304>)
 8004294:	4b8c      	ldr	r3, [pc, #560]	; (80044c8 <_printf_float+0x308>)
 8004296:	e7da      	b.n	800424e <_printf_float+0x8e>
 8004298:	6861      	ldr	r1, [r4, #4]
 800429a:	1c4b      	adds	r3, r1, #1
 800429c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80042a0:	a80a      	add	r0, sp, #40	; 0x28
 80042a2:	d13e      	bne.n	8004322 <_printf_float+0x162>
 80042a4:	2306      	movs	r3, #6
 80042a6:	6063      	str	r3, [r4, #4]
 80042a8:	2300      	movs	r3, #0
 80042aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80042ae:	ab09      	add	r3, sp, #36	; 0x24
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	ec49 8b10 	vmov	d0, r8, r9
 80042b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042ba:	6022      	str	r2, [r4, #0]
 80042bc:	f8cd a004 	str.w	sl, [sp, #4]
 80042c0:	6861      	ldr	r1, [r4, #4]
 80042c2:	4628      	mov	r0, r5
 80042c4:	f7ff fee8 	bl	8004098 <__cvt>
 80042c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80042cc:	2b47      	cmp	r3, #71	; 0x47
 80042ce:	4680      	mov	r8, r0
 80042d0:	d109      	bne.n	80042e6 <_printf_float+0x126>
 80042d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d4:	1cd8      	adds	r0, r3, #3
 80042d6:	db02      	blt.n	80042de <_printf_float+0x11e>
 80042d8:	6862      	ldr	r2, [r4, #4]
 80042da:	4293      	cmp	r3, r2
 80042dc:	dd47      	ble.n	800436e <_printf_float+0x1ae>
 80042de:	f1aa 0a02 	sub.w	sl, sl, #2
 80042e2:	fa5f fa8a 	uxtb.w	sl, sl
 80042e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80042ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042ec:	d824      	bhi.n	8004338 <_printf_float+0x178>
 80042ee:	3901      	subs	r1, #1
 80042f0:	4652      	mov	r2, sl
 80042f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042f6:	9109      	str	r1, [sp, #36]	; 0x24
 80042f8:	f7ff ff2f 	bl	800415a <__exponent>
 80042fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042fe:	1813      	adds	r3, r2, r0
 8004300:	2a01      	cmp	r2, #1
 8004302:	4681      	mov	r9, r0
 8004304:	6123      	str	r3, [r4, #16]
 8004306:	dc02      	bgt.n	800430e <_printf_float+0x14e>
 8004308:	6822      	ldr	r2, [r4, #0]
 800430a:	07d1      	lsls	r1, r2, #31
 800430c:	d501      	bpl.n	8004312 <_printf_float+0x152>
 800430e:	3301      	adds	r3, #1
 8004310:	6123      	str	r3, [r4, #16]
 8004312:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0a5      	beq.n	8004266 <_printf_float+0xa6>
 800431a:	232d      	movs	r3, #45	; 0x2d
 800431c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004320:	e7a1      	b.n	8004266 <_printf_float+0xa6>
 8004322:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004326:	f000 8177 	beq.w	8004618 <_printf_float+0x458>
 800432a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800432e:	d1bb      	bne.n	80042a8 <_printf_float+0xe8>
 8004330:	2900      	cmp	r1, #0
 8004332:	d1b9      	bne.n	80042a8 <_printf_float+0xe8>
 8004334:	2301      	movs	r3, #1
 8004336:	e7b6      	b.n	80042a6 <_printf_float+0xe6>
 8004338:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800433c:	d119      	bne.n	8004372 <_printf_float+0x1b2>
 800433e:	2900      	cmp	r1, #0
 8004340:	6863      	ldr	r3, [r4, #4]
 8004342:	dd0c      	ble.n	800435e <_printf_float+0x19e>
 8004344:	6121      	str	r1, [r4, #16]
 8004346:	b913      	cbnz	r3, 800434e <_printf_float+0x18e>
 8004348:	6822      	ldr	r2, [r4, #0]
 800434a:	07d2      	lsls	r2, r2, #31
 800434c:	d502      	bpl.n	8004354 <_printf_float+0x194>
 800434e:	3301      	adds	r3, #1
 8004350:	440b      	add	r3, r1
 8004352:	6123      	str	r3, [r4, #16]
 8004354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004356:	65a3      	str	r3, [r4, #88]	; 0x58
 8004358:	f04f 0900 	mov.w	r9, #0
 800435c:	e7d9      	b.n	8004312 <_printf_float+0x152>
 800435e:	b913      	cbnz	r3, 8004366 <_printf_float+0x1a6>
 8004360:	6822      	ldr	r2, [r4, #0]
 8004362:	07d0      	lsls	r0, r2, #31
 8004364:	d501      	bpl.n	800436a <_printf_float+0x1aa>
 8004366:	3302      	adds	r3, #2
 8004368:	e7f3      	b.n	8004352 <_printf_float+0x192>
 800436a:	2301      	movs	r3, #1
 800436c:	e7f1      	b.n	8004352 <_printf_float+0x192>
 800436e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004372:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004376:	4293      	cmp	r3, r2
 8004378:	db05      	blt.n	8004386 <_printf_float+0x1c6>
 800437a:	6822      	ldr	r2, [r4, #0]
 800437c:	6123      	str	r3, [r4, #16]
 800437e:	07d1      	lsls	r1, r2, #31
 8004380:	d5e8      	bpl.n	8004354 <_printf_float+0x194>
 8004382:	3301      	adds	r3, #1
 8004384:	e7e5      	b.n	8004352 <_printf_float+0x192>
 8004386:	2b00      	cmp	r3, #0
 8004388:	bfd4      	ite	le
 800438a:	f1c3 0302 	rsble	r3, r3, #2
 800438e:	2301      	movgt	r3, #1
 8004390:	4413      	add	r3, r2
 8004392:	e7de      	b.n	8004352 <_printf_float+0x192>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	055a      	lsls	r2, r3, #21
 8004398:	d407      	bmi.n	80043aa <_printf_float+0x1ea>
 800439a:	6923      	ldr	r3, [r4, #16]
 800439c:	4642      	mov	r2, r8
 800439e:	4631      	mov	r1, r6
 80043a0:	4628      	mov	r0, r5
 80043a2:	47b8      	blx	r7
 80043a4:	3001      	adds	r0, #1
 80043a6:	d12b      	bne.n	8004400 <_printf_float+0x240>
 80043a8:	e767      	b.n	800427a <_printf_float+0xba>
 80043aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80043ae:	f240 80dc 	bls.w	800456a <_printf_float+0x3aa>
 80043b2:	2200      	movs	r2, #0
 80043b4:	2300      	movs	r3, #0
 80043b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043ba:	f7fc fb85 	bl	8000ac8 <__aeabi_dcmpeq>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d033      	beq.n	800442a <_printf_float+0x26a>
 80043c2:	2301      	movs	r3, #1
 80043c4:	4a41      	ldr	r2, [pc, #260]	; (80044cc <_printf_float+0x30c>)
 80043c6:	4631      	mov	r1, r6
 80043c8:	4628      	mov	r0, r5
 80043ca:	47b8      	blx	r7
 80043cc:	3001      	adds	r0, #1
 80043ce:	f43f af54 	beq.w	800427a <_printf_float+0xba>
 80043d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043d6:	429a      	cmp	r2, r3
 80043d8:	db02      	blt.n	80043e0 <_printf_float+0x220>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	07d8      	lsls	r0, r3, #31
 80043de:	d50f      	bpl.n	8004400 <_printf_float+0x240>
 80043e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043e4:	4631      	mov	r1, r6
 80043e6:	4628      	mov	r0, r5
 80043e8:	47b8      	blx	r7
 80043ea:	3001      	adds	r0, #1
 80043ec:	f43f af45 	beq.w	800427a <_printf_float+0xba>
 80043f0:	f04f 0800 	mov.w	r8, #0
 80043f4:	f104 091a 	add.w	r9, r4, #26
 80043f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043fa:	3b01      	subs	r3, #1
 80043fc:	4543      	cmp	r3, r8
 80043fe:	dc09      	bgt.n	8004414 <_printf_float+0x254>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	079b      	lsls	r3, r3, #30
 8004404:	f100 8103 	bmi.w	800460e <_printf_float+0x44e>
 8004408:	68e0      	ldr	r0, [r4, #12]
 800440a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800440c:	4298      	cmp	r0, r3
 800440e:	bfb8      	it	lt
 8004410:	4618      	movlt	r0, r3
 8004412:	e734      	b.n	800427e <_printf_float+0xbe>
 8004414:	2301      	movs	r3, #1
 8004416:	464a      	mov	r2, r9
 8004418:	4631      	mov	r1, r6
 800441a:	4628      	mov	r0, r5
 800441c:	47b8      	blx	r7
 800441e:	3001      	adds	r0, #1
 8004420:	f43f af2b 	beq.w	800427a <_printf_float+0xba>
 8004424:	f108 0801 	add.w	r8, r8, #1
 8004428:	e7e6      	b.n	80043f8 <_printf_float+0x238>
 800442a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	dc2b      	bgt.n	8004488 <_printf_float+0x2c8>
 8004430:	2301      	movs	r3, #1
 8004432:	4a26      	ldr	r2, [pc, #152]	; (80044cc <_printf_float+0x30c>)
 8004434:	4631      	mov	r1, r6
 8004436:	4628      	mov	r0, r5
 8004438:	47b8      	blx	r7
 800443a:	3001      	adds	r0, #1
 800443c:	f43f af1d 	beq.w	800427a <_printf_float+0xba>
 8004440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004442:	b923      	cbnz	r3, 800444e <_printf_float+0x28e>
 8004444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004446:	b913      	cbnz	r3, 800444e <_printf_float+0x28e>
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	07d9      	lsls	r1, r3, #31
 800444c:	d5d8      	bpl.n	8004400 <_printf_float+0x240>
 800444e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004452:	4631      	mov	r1, r6
 8004454:	4628      	mov	r0, r5
 8004456:	47b8      	blx	r7
 8004458:	3001      	adds	r0, #1
 800445a:	f43f af0e 	beq.w	800427a <_printf_float+0xba>
 800445e:	f04f 0900 	mov.w	r9, #0
 8004462:	f104 0a1a 	add.w	sl, r4, #26
 8004466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004468:	425b      	negs	r3, r3
 800446a:	454b      	cmp	r3, r9
 800446c:	dc01      	bgt.n	8004472 <_printf_float+0x2b2>
 800446e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004470:	e794      	b.n	800439c <_printf_float+0x1dc>
 8004472:	2301      	movs	r3, #1
 8004474:	4652      	mov	r2, sl
 8004476:	4631      	mov	r1, r6
 8004478:	4628      	mov	r0, r5
 800447a:	47b8      	blx	r7
 800447c:	3001      	adds	r0, #1
 800447e:	f43f aefc 	beq.w	800427a <_printf_float+0xba>
 8004482:	f109 0901 	add.w	r9, r9, #1
 8004486:	e7ee      	b.n	8004466 <_printf_float+0x2a6>
 8004488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800448a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800448c:	429a      	cmp	r2, r3
 800448e:	bfa8      	it	ge
 8004490:	461a      	movge	r2, r3
 8004492:	2a00      	cmp	r2, #0
 8004494:	4691      	mov	r9, r2
 8004496:	dd07      	ble.n	80044a8 <_printf_float+0x2e8>
 8004498:	4613      	mov	r3, r2
 800449a:	4631      	mov	r1, r6
 800449c:	4642      	mov	r2, r8
 800449e:	4628      	mov	r0, r5
 80044a0:	47b8      	blx	r7
 80044a2:	3001      	adds	r0, #1
 80044a4:	f43f aee9 	beq.w	800427a <_printf_float+0xba>
 80044a8:	f104 031a 	add.w	r3, r4, #26
 80044ac:	f04f 0b00 	mov.w	fp, #0
 80044b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044b4:	9306      	str	r3, [sp, #24]
 80044b6:	e015      	b.n	80044e4 <_printf_float+0x324>
 80044b8:	7fefffff 	.word	0x7fefffff
 80044bc:	08007e0e 	.word	0x08007e0e
 80044c0:	08007e0a 	.word	0x08007e0a
 80044c4:	08007e16 	.word	0x08007e16
 80044c8:	08007e12 	.word	0x08007e12
 80044cc:	08007e1a 	.word	0x08007e1a
 80044d0:	2301      	movs	r3, #1
 80044d2:	9a06      	ldr	r2, [sp, #24]
 80044d4:	4631      	mov	r1, r6
 80044d6:	4628      	mov	r0, r5
 80044d8:	47b8      	blx	r7
 80044da:	3001      	adds	r0, #1
 80044dc:	f43f aecd 	beq.w	800427a <_printf_float+0xba>
 80044e0:	f10b 0b01 	add.w	fp, fp, #1
 80044e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80044e8:	ebaa 0309 	sub.w	r3, sl, r9
 80044ec:	455b      	cmp	r3, fp
 80044ee:	dcef      	bgt.n	80044d0 <_printf_float+0x310>
 80044f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044f4:	429a      	cmp	r2, r3
 80044f6:	44d0      	add	r8, sl
 80044f8:	db15      	blt.n	8004526 <_printf_float+0x366>
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	07da      	lsls	r2, r3, #31
 80044fe:	d412      	bmi.n	8004526 <_printf_float+0x366>
 8004500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004504:	eba3 020a 	sub.w	r2, r3, sl
 8004508:	eba3 0a01 	sub.w	sl, r3, r1
 800450c:	4592      	cmp	sl, r2
 800450e:	bfa8      	it	ge
 8004510:	4692      	movge	sl, r2
 8004512:	f1ba 0f00 	cmp.w	sl, #0
 8004516:	dc0e      	bgt.n	8004536 <_printf_float+0x376>
 8004518:	f04f 0800 	mov.w	r8, #0
 800451c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004520:	f104 091a 	add.w	r9, r4, #26
 8004524:	e019      	b.n	800455a <_printf_float+0x39a>
 8004526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	47b8      	blx	r7
 8004530:	3001      	adds	r0, #1
 8004532:	d1e5      	bne.n	8004500 <_printf_float+0x340>
 8004534:	e6a1      	b.n	800427a <_printf_float+0xba>
 8004536:	4653      	mov	r3, sl
 8004538:	4642      	mov	r2, r8
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	d1e9      	bne.n	8004518 <_printf_float+0x358>
 8004544:	e699      	b.n	800427a <_printf_float+0xba>
 8004546:	2301      	movs	r3, #1
 8004548:	464a      	mov	r2, r9
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f ae92 	beq.w	800427a <_printf_float+0xba>
 8004556:	f108 0801 	add.w	r8, r8, #1
 800455a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	eba3 030a 	sub.w	r3, r3, sl
 8004564:	4543      	cmp	r3, r8
 8004566:	dcee      	bgt.n	8004546 <_printf_float+0x386>
 8004568:	e74a      	b.n	8004400 <_printf_float+0x240>
 800456a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800456c:	2a01      	cmp	r2, #1
 800456e:	dc01      	bgt.n	8004574 <_printf_float+0x3b4>
 8004570:	07db      	lsls	r3, r3, #31
 8004572:	d53a      	bpl.n	80045ea <_printf_float+0x42a>
 8004574:	2301      	movs	r3, #1
 8004576:	4642      	mov	r2, r8
 8004578:	4631      	mov	r1, r6
 800457a:	4628      	mov	r0, r5
 800457c:	47b8      	blx	r7
 800457e:	3001      	adds	r0, #1
 8004580:	f43f ae7b 	beq.w	800427a <_printf_float+0xba>
 8004584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004588:	4631      	mov	r1, r6
 800458a:	4628      	mov	r0, r5
 800458c:	47b8      	blx	r7
 800458e:	3001      	adds	r0, #1
 8004590:	f108 0801 	add.w	r8, r8, #1
 8004594:	f43f ae71 	beq.w	800427a <_printf_float+0xba>
 8004598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800459a:	2200      	movs	r2, #0
 800459c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80045a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045a4:	2300      	movs	r3, #0
 80045a6:	f7fc fa8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80045aa:	b9c8      	cbnz	r0, 80045e0 <_printf_float+0x420>
 80045ac:	4653      	mov	r3, sl
 80045ae:	4642      	mov	r2, r8
 80045b0:	4631      	mov	r1, r6
 80045b2:	4628      	mov	r0, r5
 80045b4:	47b8      	blx	r7
 80045b6:	3001      	adds	r0, #1
 80045b8:	d10e      	bne.n	80045d8 <_printf_float+0x418>
 80045ba:	e65e      	b.n	800427a <_printf_float+0xba>
 80045bc:	2301      	movs	r3, #1
 80045be:	4652      	mov	r2, sl
 80045c0:	4631      	mov	r1, r6
 80045c2:	4628      	mov	r0, r5
 80045c4:	47b8      	blx	r7
 80045c6:	3001      	adds	r0, #1
 80045c8:	f43f ae57 	beq.w	800427a <_printf_float+0xba>
 80045cc:	f108 0801 	add.w	r8, r8, #1
 80045d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045d2:	3b01      	subs	r3, #1
 80045d4:	4543      	cmp	r3, r8
 80045d6:	dcf1      	bgt.n	80045bc <_printf_float+0x3fc>
 80045d8:	464b      	mov	r3, r9
 80045da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045de:	e6de      	b.n	800439e <_printf_float+0x1de>
 80045e0:	f04f 0800 	mov.w	r8, #0
 80045e4:	f104 0a1a 	add.w	sl, r4, #26
 80045e8:	e7f2      	b.n	80045d0 <_printf_float+0x410>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e7df      	b.n	80045ae <_printf_float+0x3ee>
 80045ee:	2301      	movs	r3, #1
 80045f0:	464a      	mov	r2, r9
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	47b8      	blx	r7
 80045f8:	3001      	adds	r0, #1
 80045fa:	f43f ae3e 	beq.w	800427a <_printf_float+0xba>
 80045fe:	f108 0801 	add.w	r8, r8, #1
 8004602:	68e3      	ldr	r3, [r4, #12]
 8004604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	4543      	cmp	r3, r8
 800460a:	dcf0      	bgt.n	80045ee <_printf_float+0x42e>
 800460c:	e6fc      	b.n	8004408 <_printf_float+0x248>
 800460e:	f04f 0800 	mov.w	r8, #0
 8004612:	f104 0919 	add.w	r9, r4, #25
 8004616:	e7f4      	b.n	8004602 <_printf_float+0x442>
 8004618:	2900      	cmp	r1, #0
 800461a:	f43f ae8b 	beq.w	8004334 <_printf_float+0x174>
 800461e:	2300      	movs	r3, #0
 8004620:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004624:	ab09      	add	r3, sp, #36	; 0x24
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	ec49 8b10 	vmov	d0, r8, r9
 800462c:	6022      	str	r2, [r4, #0]
 800462e:	f8cd a004 	str.w	sl, [sp, #4]
 8004632:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004636:	4628      	mov	r0, r5
 8004638:	f7ff fd2e 	bl	8004098 <__cvt>
 800463c:	4680      	mov	r8, r0
 800463e:	e648      	b.n	80042d2 <_printf_float+0x112>

08004640 <_printf_common>:
 8004640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004644:	4691      	mov	r9, r2
 8004646:	461f      	mov	r7, r3
 8004648:	688a      	ldr	r2, [r1, #8]
 800464a:	690b      	ldr	r3, [r1, #16]
 800464c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004650:	4293      	cmp	r3, r2
 8004652:	bfb8      	it	lt
 8004654:	4613      	movlt	r3, r2
 8004656:	f8c9 3000 	str.w	r3, [r9]
 800465a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800465e:	4606      	mov	r6, r0
 8004660:	460c      	mov	r4, r1
 8004662:	b112      	cbz	r2, 800466a <_printf_common+0x2a>
 8004664:	3301      	adds	r3, #1
 8004666:	f8c9 3000 	str.w	r3, [r9]
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	0699      	lsls	r1, r3, #26
 800466e:	bf42      	ittt	mi
 8004670:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004674:	3302      	addmi	r3, #2
 8004676:	f8c9 3000 	strmi.w	r3, [r9]
 800467a:	6825      	ldr	r5, [r4, #0]
 800467c:	f015 0506 	ands.w	r5, r5, #6
 8004680:	d107      	bne.n	8004692 <_printf_common+0x52>
 8004682:	f104 0a19 	add.w	sl, r4, #25
 8004686:	68e3      	ldr	r3, [r4, #12]
 8004688:	f8d9 2000 	ldr.w	r2, [r9]
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	42ab      	cmp	r3, r5
 8004690:	dc28      	bgt.n	80046e4 <_printf_common+0xa4>
 8004692:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004696:	6822      	ldr	r2, [r4, #0]
 8004698:	3300      	adds	r3, #0
 800469a:	bf18      	it	ne
 800469c:	2301      	movne	r3, #1
 800469e:	0692      	lsls	r2, r2, #26
 80046a0:	d42d      	bmi.n	80046fe <_printf_common+0xbe>
 80046a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046a6:	4639      	mov	r1, r7
 80046a8:	4630      	mov	r0, r6
 80046aa:	47c0      	blx	r8
 80046ac:	3001      	adds	r0, #1
 80046ae:	d020      	beq.n	80046f2 <_printf_common+0xb2>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	68e5      	ldr	r5, [r4, #12]
 80046b4:	f8d9 2000 	ldr.w	r2, [r9]
 80046b8:	f003 0306 	and.w	r3, r3, #6
 80046bc:	2b04      	cmp	r3, #4
 80046be:	bf08      	it	eq
 80046c0:	1aad      	subeq	r5, r5, r2
 80046c2:	68a3      	ldr	r3, [r4, #8]
 80046c4:	6922      	ldr	r2, [r4, #16]
 80046c6:	bf0c      	ite	eq
 80046c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046cc:	2500      	movne	r5, #0
 80046ce:	4293      	cmp	r3, r2
 80046d0:	bfc4      	itt	gt
 80046d2:	1a9b      	subgt	r3, r3, r2
 80046d4:	18ed      	addgt	r5, r5, r3
 80046d6:	f04f 0900 	mov.w	r9, #0
 80046da:	341a      	adds	r4, #26
 80046dc:	454d      	cmp	r5, r9
 80046de:	d11a      	bne.n	8004716 <_printf_common+0xd6>
 80046e0:	2000      	movs	r0, #0
 80046e2:	e008      	b.n	80046f6 <_printf_common+0xb6>
 80046e4:	2301      	movs	r3, #1
 80046e6:	4652      	mov	r2, sl
 80046e8:	4639      	mov	r1, r7
 80046ea:	4630      	mov	r0, r6
 80046ec:	47c0      	blx	r8
 80046ee:	3001      	adds	r0, #1
 80046f0:	d103      	bne.n	80046fa <_printf_common+0xba>
 80046f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fa:	3501      	adds	r5, #1
 80046fc:	e7c3      	b.n	8004686 <_printf_common+0x46>
 80046fe:	18e1      	adds	r1, r4, r3
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	2030      	movs	r0, #48	; 0x30
 8004704:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004708:	4422      	add	r2, r4
 800470a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800470e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004712:	3302      	adds	r3, #2
 8004714:	e7c5      	b.n	80046a2 <_printf_common+0x62>
 8004716:	2301      	movs	r3, #1
 8004718:	4622      	mov	r2, r4
 800471a:	4639      	mov	r1, r7
 800471c:	4630      	mov	r0, r6
 800471e:	47c0      	blx	r8
 8004720:	3001      	adds	r0, #1
 8004722:	d0e6      	beq.n	80046f2 <_printf_common+0xb2>
 8004724:	f109 0901 	add.w	r9, r9, #1
 8004728:	e7d8      	b.n	80046dc <_printf_common+0x9c>
	...

0800472c <_printf_i>:
 800472c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004730:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004734:	460c      	mov	r4, r1
 8004736:	7e09      	ldrb	r1, [r1, #24]
 8004738:	b085      	sub	sp, #20
 800473a:	296e      	cmp	r1, #110	; 0x6e
 800473c:	4617      	mov	r7, r2
 800473e:	4606      	mov	r6, r0
 8004740:	4698      	mov	r8, r3
 8004742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004744:	f000 80b3 	beq.w	80048ae <_printf_i+0x182>
 8004748:	d822      	bhi.n	8004790 <_printf_i+0x64>
 800474a:	2963      	cmp	r1, #99	; 0x63
 800474c:	d036      	beq.n	80047bc <_printf_i+0x90>
 800474e:	d80a      	bhi.n	8004766 <_printf_i+0x3a>
 8004750:	2900      	cmp	r1, #0
 8004752:	f000 80b9 	beq.w	80048c8 <_printf_i+0x19c>
 8004756:	2958      	cmp	r1, #88	; 0x58
 8004758:	f000 8083 	beq.w	8004862 <_printf_i+0x136>
 800475c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004760:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004764:	e032      	b.n	80047cc <_printf_i+0xa0>
 8004766:	2964      	cmp	r1, #100	; 0x64
 8004768:	d001      	beq.n	800476e <_printf_i+0x42>
 800476a:	2969      	cmp	r1, #105	; 0x69
 800476c:	d1f6      	bne.n	800475c <_printf_i+0x30>
 800476e:	6820      	ldr	r0, [r4, #0]
 8004770:	6813      	ldr	r3, [r2, #0]
 8004772:	0605      	lsls	r5, r0, #24
 8004774:	f103 0104 	add.w	r1, r3, #4
 8004778:	d52a      	bpl.n	80047d0 <_printf_i+0xa4>
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6011      	str	r1, [r2, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	da03      	bge.n	800478a <_printf_i+0x5e>
 8004782:	222d      	movs	r2, #45	; 0x2d
 8004784:	425b      	negs	r3, r3
 8004786:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800478a:	486f      	ldr	r0, [pc, #444]	; (8004948 <_printf_i+0x21c>)
 800478c:	220a      	movs	r2, #10
 800478e:	e039      	b.n	8004804 <_printf_i+0xd8>
 8004790:	2973      	cmp	r1, #115	; 0x73
 8004792:	f000 809d 	beq.w	80048d0 <_printf_i+0x1a4>
 8004796:	d808      	bhi.n	80047aa <_printf_i+0x7e>
 8004798:	296f      	cmp	r1, #111	; 0x6f
 800479a:	d020      	beq.n	80047de <_printf_i+0xb2>
 800479c:	2970      	cmp	r1, #112	; 0x70
 800479e:	d1dd      	bne.n	800475c <_printf_i+0x30>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	f043 0320 	orr.w	r3, r3, #32
 80047a6:	6023      	str	r3, [r4, #0]
 80047a8:	e003      	b.n	80047b2 <_printf_i+0x86>
 80047aa:	2975      	cmp	r1, #117	; 0x75
 80047ac:	d017      	beq.n	80047de <_printf_i+0xb2>
 80047ae:	2978      	cmp	r1, #120	; 0x78
 80047b0:	d1d4      	bne.n	800475c <_printf_i+0x30>
 80047b2:	2378      	movs	r3, #120	; 0x78
 80047b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047b8:	4864      	ldr	r0, [pc, #400]	; (800494c <_printf_i+0x220>)
 80047ba:	e055      	b.n	8004868 <_printf_i+0x13c>
 80047bc:	6813      	ldr	r3, [r2, #0]
 80047be:	1d19      	adds	r1, r3, #4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6011      	str	r1, [r2, #0]
 80047c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047cc:	2301      	movs	r3, #1
 80047ce:	e08c      	b.n	80048ea <_printf_i+0x1be>
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6011      	str	r1, [r2, #0]
 80047d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047d8:	bf18      	it	ne
 80047da:	b21b      	sxthne	r3, r3
 80047dc:	e7cf      	b.n	800477e <_printf_i+0x52>
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	6825      	ldr	r5, [r4, #0]
 80047e2:	1d18      	adds	r0, r3, #4
 80047e4:	6010      	str	r0, [r2, #0]
 80047e6:	0628      	lsls	r0, r5, #24
 80047e8:	d501      	bpl.n	80047ee <_printf_i+0xc2>
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	e002      	b.n	80047f4 <_printf_i+0xc8>
 80047ee:	0668      	lsls	r0, r5, #25
 80047f0:	d5fb      	bpl.n	80047ea <_printf_i+0xbe>
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	4854      	ldr	r0, [pc, #336]	; (8004948 <_printf_i+0x21c>)
 80047f6:	296f      	cmp	r1, #111	; 0x6f
 80047f8:	bf14      	ite	ne
 80047fa:	220a      	movne	r2, #10
 80047fc:	2208      	moveq	r2, #8
 80047fe:	2100      	movs	r1, #0
 8004800:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004804:	6865      	ldr	r5, [r4, #4]
 8004806:	60a5      	str	r5, [r4, #8]
 8004808:	2d00      	cmp	r5, #0
 800480a:	f2c0 8095 	blt.w	8004938 <_printf_i+0x20c>
 800480e:	6821      	ldr	r1, [r4, #0]
 8004810:	f021 0104 	bic.w	r1, r1, #4
 8004814:	6021      	str	r1, [r4, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d13d      	bne.n	8004896 <_printf_i+0x16a>
 800481a:	2d00      	cmp	r5, #0
 800481c:	f040 808e 	bne.w	800493c <_printf_i+0x210>
 8004820:	4665      	mov	r5, ip
 8004822:	2a08      	cmp	r2, #8
 8004824:	d10b      	bne.n	800483e <_printf_i+0x112>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	07db      	lsls	r3, r3, #31
 800482a:	d508      	bpl.n	800483e <_printf_i+0x112>
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	6862      	ldr	r2, [r4, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	bfde      	ittt	le
 8004834:	2330      	movle	r3, #48	; 0x30
 8004836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800483a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800483e:	ebac 0305 	sub.w	r3, ip, r5
 8004842:	6123      	str	r3, [r4, #16]
 8004844:	f8cd 8000 	str.w	r8, [sp]
 8004848:	463b      	mov	r3, r7
 800484a:	aa03      	add	r2, sp, #12
 800484c:	4621      	mov	r1, r4
 800484e:	4630      	mov	r0, r6
 8004850:	f7ff fef6 	bl	8004640 <_printf_common>
 8004854:	3001      	adds	r0, #1
 8004856:	d14d      	bne.n	80048f4 <_printf_i+0x1c8>
 8004858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800485c:	b005      	add	sp, #20
 800485e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004862:	4839      	ldr	r0, [pc, #228]	; (8004948 <_printf_i+0x21c>)
 8004864:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004868:	6813      	ldr	r3, [r2, #0]
 800486a:	6821      	ldr	r1, [r4, #0]
 800486c:	1d1d      	adds	r5, r3, #4
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6015      	str	r5, [r2, #0]
 8004872:	060a      	lsls	r2, r1, #24
 8004874:	d50b      	bpl.n	800488e <_printf_i+0x162>
 8004876:	07ca      	lsls	r2, r1, #31
 8004878:	bf44      	itt	mi
 800487a:	f041 0120 	orrmi.w	r1, r1, #32
 800487e:	6021      	strmi	r1, [r4, #0]
 8004880:	b91b      	cbnz	r3, 800488a <_printf_i+0x15e>
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	f022 0220 	bic.w	r2, r2, #32
 8004888:	6022      	str	r2, [r4, #0]
 800488a:	2210      	movs	r2, #16
 800488c:	e7b7      	b.n	80047fe <_printf_i+0xd2>
 800488e:	064d      	lsls	r5, r1, #25
 8004890:	bf48      	it	mi
 8004892:	b29b      	uxthmi	r3, r3
 8004894:	e7ef      	b.n	8004876 <_printf_i+0x14a>
 8004896:	4665      	mov	r5, ip
 8004898:	fbb3 f1f2 	udiv	r1, r3, r2
 800489c:	fb02 3311 	mls	r3, r2, r1, r3
 80048a0:	5cc3      	ldrb	r3, [r0, r3]
 80048a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80048a6:	460b      	mov	r3, r1
 80048a8:	2900      	cmp	r1, #0
 80048aa:	d1f5      	bne.n	8004898 <_printf_i+0x16c>
 80048ac:	e7b9      	b.n	8004822 <_printf_i+0xf6>
 80048ae:	6813      	ldr	r3, [r2, #0]
 80048b0:	6825      	ldr	r5, [r4, #0]
 80048b2:	6961      	ldr	r1, [r4, #20]
 80048b4:	1d18      	adds	r0, r3, #4
 80048b6:	6010      	str	r0, [r2, #0]
 80048b8:	0628      	lsls	r0, r5, #24
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	d501      	bpl.n	80048c2 <_printf_i+0x196>
 80048be:	6019      	str	r1, [r3, #0]
 80048c0:	e002      	b.n	80048c8 <_printf_i+0x19c>
 80048c2:	066a      	lsls	r2, r5, #25
 80048c4:	d5fb      	bpl.n	80048be <_printf_i+0x192>
 80048c6:	8019      	strh	r1, [r3, #0]
 80048c8:	2300      	movs	r3, #0
 80048ca:	6123      	str	r3, [r4, #16]
 80048cc:	4665      	mov	r5, ip
 80048ce:	e7b9      	b.n	8004844 <_printf_i+0x118>
 80048d0:	6813      	ldr	r3, [r2, #0]
 80048d2:	1d19      	adds	r1, r3, #4
 80048d4:	6011      	str	r1, [r2, #0]
 80048d6:	681d      	ldr	r5, [r3, #0]
 80048d8:	6862      	ldr	r2, [r4, #4]
 80048da:	2100      	movs	r1, #0
 80048dc:	4628      	mov	r0, r5
 80048de:	f7fb fc7f 	bl	80001e0 <memchr>
 80048e2:	b108      	cbz	r0, 80048e8 <_printf_i+0x1bc>
 80048e4:	1b40      	subs	r0, r0, r5
 80048e6:	6060      	str	r0, [r4, #4]
 80048e8:	6863      	ldr	r3, [r4, #4]
 80048ea:	6123      	str	r3, [r4, #16]
 80048ec:	2300      	movs	r3, #0
 80048ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f2:	e7a7      	b.n	8004844 <_printf_i+0x118>
 80048f4:	6923      	ldr	r3, [r4, #16]
 80048f6:	462a      	mov	r2, r5
 80048f8:	4639      	mov	r1, r7
 80048fa:	4630      	mov	r0, r6
 80048fc:	47c0      	blx	r8
 80048fe:	3001      	adds	r0, #1
 8004900:	d0aa      	beq.n	8004858 <_printf_i+0x12c>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	079b      	lsls	r3, r3, #30
 8004906:	d413      	bmi.n	8004930 <_printf_i+0x204>
 8004908:	68e0      	ldr	r0, [r4, #12]
 800490a:	9b03      	ldr	r3, [sp, #12]
 800490c:	4298      	cmp	r0, r3
 800490e:	bfb8      	it	lt
 8004910:	4618      	movlt	r0, r3
 8004912:	e7a3      	b.n	800485c <_printf_i+0x130>
 8004914:	2301      	movs	r3, #1
 8004916:	464a      	mov	r2, r9
 8004918:	4639      	mov	r1, r7
 800491a:	4630      	mov	r0, r6
 800491c:	47c0      	blx	r8
 800491e:	3001      	adds	r0, #1
 8004920:	d09a      	beq.n	8004858 <_printf_i+0x12c>
 8004922:	3501      	adds	r5, #1
 8004924:	68e3      	ldr	r3, [r4, #12]
 8004926:	9a03      	ldr	r2, [sp, #12]
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	42ab      	cmp	r3, r5
 800492c:	dcf2      	bgt.n	8004914 <_printf_i+0x1e8>
 800492e:	e7eb      	b.n	8004908 <_printf_i+0x1dc>
 8004930:	2500      	movs	r5, #0
 8004932:	f104 0919 	add.w	r9, r4, #25
 8004936:	e7f5      	b.n	8004924 <_printf_i+0x1f8>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1ac      	bne.n	8004896 <_printf_i+0x16a>
 800493c:	7803      	ldrb	r3, [r0, #0]
 800493e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004942:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004946:	e76c      	b.n	8004822 <_printf_i+0xf6>
 8004948:	08007e1c 	.word	0x08007e1c
 800494c:	08007e2d 	.word	0x08007e2d

08004950 <_scanf_float>:
 8004950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004954:	469a      	mov	sl, r3
 8004956:	688b      	ldr	r3, [r1, #8]
 8004958:	4616      	mov	r6, r2
 800495a:	1e5a      	subs	r2, r3, #1
 800495c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004960:	b087      	sub	sp, #28
 8004962:	bf83      	ittte	hi
 8004964:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004968:	189b      	addhi	r3, r3, r2
 800496a:	9301      	strhi	r3, [sp, #4]
 800496c:	2300      	movls	r3, #0
 800496e:	bf86      	itte	hi
 8004970:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004974:	608b      	strhi	r3, [r1, #8]
 8004976:	9301      	strls	r3, [sp, #4]
 8004978:	680b      	ldr	r3, [r1, #0]
 800497a:	4688      	mov	r8, r1
 800497c:	f04f 0b00 	mov.w	fp, #0
 8004980:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004984:	f848 3b1c 	str.w	r3, [r8], #28
 8004988:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800498c:	4607      	mov	r7, r0
 800498e:	460c      	mov	r4, r1
 8004990:	4645      	mov	r5, r8
 8004992:	465a      	mov	r2, fp
 8004994:	46d9      	mov	r9, fp
 8004996:	f8cd b008 	str.w	fp, [sp, #8]
 800499a:	68a1      	ldr	r1, [r4, #8]
 800499c:	b181      	cbz	r1, 80049c0 <_scanf_float+0x70>
 800499e:	6833      	ldr	r3, [r6, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b49      	cmp	r3, #73	; 0x49
 80049a4:	d071      	beq.n	8004a8a <_scanf_float+0x13a>
 80049a6:	d84d      	bhi.n	8004a44 <_scanf_float+0xf4>
 80049a8:	2b39      	cmp	r3, #57	; 0x39
 80049aa:	d840      	bhi.n	8004a2e <_scanf_float+0xde>
 80049ac:	2b31      	cmp	r3, #49	; 0x31
 80049ae:	f080 8088 	bcs.w	8004ac2 <_scanf_float+0x172>
 80049b2:	2b2d      	cmp	r3, #45	; 0x2d
 80049b4:	f000 8090 	beq.w	8004ad8 <_scanf_float+0x188>
 80049b8:	d815      	bhi.n	80049e6 <_scanf_float+0x96>
 80049ba:	2b2b      	cmp	r3, #43	; 0x2b
 80049bc:	f000 808c 	beq.w	8004ad8 <_scanf_float+0x188>
 80049c0:	f1b9 0f00 	cmp.w	r9, #0
 80049c4:	d003      	beq.n	80049ce <_scanf_float+0x7e>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	3a01      	subs	r2, #1
 80049d0:	2a01      	cmp	r2, #1
 80049d2:	f200 80ea 	bhi.w	8004baa <_scanf_float+0x25a>
 80049d6:	4545      	cmp	r5, r8
 80049d8:	f200 80dc 	bhi.w	8004b94 <_scanf_float+0x244>
 80049dc:	2601      	movs	r6, #1
 80049de:	4630      	mov	r0, r6
 80049e0:	b007      	add	sp, #28
 80049e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e6:	2b2e      	cmp	r3, #46	; 0x2e
 80049e8:	f000 809f 	beq.w	8004b2a <_scanf_float+0x1da>
 80049ec:	2b30      	cmp	r3, #48	; 0x30
 80049ee:	d1e7      	bne.n	80049c0 <_scanf_float+0x70>
 80049f0:	6820      	ldr	r0, [r4, #0]
 80049f2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80049f6:	d064      	beq.n	8004ac2 <_scanf_float+0x172>
 80049f8:	9b01      	ldr	r3, [sp, #4]
 80049fa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80049fe:	6020      	str	r0, [r4, #0]
 8004a00:	f109 0901 	add.w	r9, r9, #1
 8004a04:	b11b      	cbz	r3, 8004a0e <_scanf_float+0xbe>
 8004a06:	3b01      	subs	r3, #1
 8004a08:	3101      	adds	r1, #1
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	60a1      	str	r1, [r4, #8]
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	60a3      	str	r3, [r4, #8]
 8004a14:	6923      	ldr	r3, [r4, #16]
 8004a16:	3301      	adds	r3, #1
 8004a18:	6123      	str	r3, [r4, #16]
 8004a1a:	6873      	ldr	r3, [r6, #4]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	6073      	str	r3, [r6, #4]
 8004a22:	f340 80ac 	ble.w	8004b7e <_scanf_float+0x22e>
 8004a26:	6833      	ldr	r3, [r6, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	6033      	str	r3, [r6, #0]
 8004a2c:	e7b5      	b.n	800499a <_scanf_float+0x4a>
 8004a2e:	2b45      	cmp	r3, #69	; 0x45
 8004a30:	f000 8085 	beq.w	8004b3e <_scanf_float+0x1ee>
 8004a34:	2b46      	cmp	r3, #70	; 0x46
 8004a36:	d06a      	beq.n	8004b0e <_scanf_float+0x1be>
 8004a38:	2b41      	cmp	r3, #65	; 0x41
 8004a3a:	d1c1      	bne.n	80049c0 <_scanf_float+0x70>
 8004a3c:	2a01      	cmp	r2, #1
 8004a3e:	d1bf      	bne.n	80049c0 <_scanf_float+0x70>
 8004a40:	2202      	movs	r2, #2
 8004a42:	e046      	b.n	8004ad2 <_scanf_float+0x182>
 8004a44:	2b65      	cmp	r3, #101	; 0x65
 8004a46:	d07a      	beq.n	8004b3e <_scanf_float+0x1ee>
 8004a48:	d818      	bhi.n	8004a7c <_scanf_float+0x12c>
 8004a4a:	2b54      	cmp	r3, #84	; 0x54
 8004a4c:	d066      	beq.n	8004b1c <_scanf_float+0x1cc>
 8004a4e:	d811      	bhi.n	8004a74 <_scanf_float+0x124>
 8004a50:	2b4e      	cmp	r3, #78	; 0x4e
 8004a52:	d1b5      	bne.n	80049c0 <_scanf_float+0x70>
 8004a54:	2a00      	cmp	r2, #0
 8004a56:	d146      	bne.n	8004ae6 <_scanf_float+0x196>
 8004a58:	f1b9 0f00 	cmp.w	r9, #0
 8004a5c:	d145      	bne.n	8004aea <_scanf_float+0x19a>
 8004a5e:	6821      	ldr	r1, [r4, #0]
 8004a60:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004a64:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004a68:	d13f      	bne.n	8004aea <_scanf_float+0x19a>
 8004a6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004a6e:	6021      	str	r1, [r4, #0]
 8004a70:	2201      	movs	r2, #1
 8004a72:	e02e      	b.n	8004ad2 <_scanf_float+0x182>
 8004a74:	2b59      	cmp	r3, #89	; 0x59
 8004a76:	d01e      	beq.n	8004ab6 <_scanf_float+0x166>
 8004a78:	2b61      	cmp	r3, #97	; 0x61
 8004a7a:	e7de      	b.n	8004a3a <_scanf_float+0xea>
 8004a7c:	2b6e      	cmp	r3, #110	; 0x6e
 8004a7e:	d0e9      	beq.n	8004a54 <_scanf_float+0x104>
 8004a80:	d815      	bhi.n	8004aae <_scanf_float+0x15e>
 8004a82:	2b66      	cmp	r3, #102	; 0x66
 8004a84:	d043      	beq.n	8004b0e <_scanf_float+0x1be>
 8004a86:	2b69      	cmp	r3, #105	; 0x69
 8004a88:	d19a      	bne.n	80049c0 <_scanf_float+0x70>
 8004a8a:	f1bb 0f00 	cmp.w	fp, #0
 8004a8e:	d138      	bne.n	8004b02 <_scanf_float+0x1b2>
 8004a90:	f1b9 0f00 	cmp.w	r9, #0
 8004a94:	d197      	bne.n	80049c6 <_scanf_float+0x76>
 8004a96:	6821      	ldr	r1, [r4, #0]
 8004a98:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004a9c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004aa0:	d195      	bne.n	80049ce <_scanf_float+0x7e>
 8004aa2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004aa6:	6021      	str	r1, [r4, #0]
 8004aa8:	f04f 0b01 	mov.w	fp, #1
 8004aac:	e011      	b.n	8004ad2 <_scanf_float+0x182>
 8004aae:	2b74      	cmp	r3, #116	; 0x74
 8004ab0:	d034      	beq.n	8004b1c <_scanf_float+0x1cc>
 8004ab2:	2b79      	cmp	r3, #121	; 0x79
 8004ab4:	d184      	bne.n	80049c0 <_scanf_float+0x70>
 8004ab6:	f1bb 0f07 	cmp.w	fp, #7
 8004aba:	d181      	bne.n	80049c0 <_scanf_float+0x70>
 8004abc:	f04f 0b08 	mov.w	fp, #8
 8004ac0:	e007      	b.n	8004ad2 <_scanf_float+0x182>
 8004ac2:	eb12 0f0b 	cmn.w	r2, fp
 8004ac6:	f47f af7b 	bne.w	80049c0 <_scanf_float+0x70>
 8004aca:	6821      	ldr	r1, [r4, #0]
 8004acc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004ad0:	6021      	str	r1, [r4, #0]
 8004ad2:	702b      	strb	r3, [r5, #0]
 8004ad4:	3501      	adds	r5, #1
 8004ad6:	e79a      	b.n	8004a0e <_scanf_float+0xbe>
 8004ad8:	6821      	ldr	r1, [r4, #0]
 8004ada:	0608      	lsls	r0, r1, #24
 8004adc:	f57f af70 	bpl.w	80049c0 <_scanf_float+0x70>
 8004ae0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ae4:	e7f4      	b.n	8004ad0 <_scanf_float+0x180>
 8004ae6:	2a02      	cmp	r2, #2
 8004ae8:	d047      	beq.n	8004b7a <_scanf_float+0x22a>
 8004aea:	f1bb 0f01 	cmp.w	fp, #1
 8004aee:	d003      	beq.n	8004af8 <_scanf_float+0x1a8>
 8004af0:	f1bb 0f04 	cmp.w	fp, #4
 8004af4:	f47f af64 	bne.w	80049c0 <_scanf_float+0x70>
 8004af8:	f10b 0b01 	add.w	fp, fp, #1
 8004afc:	fa5f fb8b 	uxtb.w	fp, fp
 8004b00:	e7e7      	b.n	8004ad2 <_scanf_float+0x182>
 8004b02:	f1bb 0f03 	cmp.w	fp, #3
 8004b06:	d0f7      	beq.n	8004af8 <_scanf_float+0x1a8>
 8004b08:	f1bb 0f05 	cmp.w	fp, #5
 8004b0c:	e7f2      	b.n	8004af4 <_scanf_float+0x1a4>
 8004b0e:	f1bb 0f02 	cmp.w	fp, #2
 8004b12:	f47f af55 	bne.w	80049c0 <_scanf_float+0x70>
 8004b16:	f04f 0b03 	mov.w	fp, #3
 8004b1a:	e7da      	b.n	8004ad2 <_scanf_float+0x182>
 8004b1c:	f1bb 0f06 	cmp.w	fp, #6
 8004b20:	f47f af4e 	bne.w	80049c0 <_scanf_float+0x70>
 8004b24:	f04f 0b07 	mov.w	fp, #7
 8004b28:	e7d3      	b.n	8004ad2 <_scanf_float+0x182>
 8004b2a:	6821      	ldr	r1, [r4, #0]
 8004b2c:	0588      	lsls	r0, r1, #22
 8004b2e:	f57f af47 	bpl.w	80049c0 <_scanf_float+0x70>
 8004b32:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004b36:	6021      	str	r1, [r4, #0]
 8004b38:	f8cd 9008 	str.w	r9, [sp, #8]
 8004b3c:	e7c9      	b.n	8004ad2 <_scanf_float+0x182>
 8004b3e:	6821      	ldr	r1, [r4, #0]
 8004b40:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004b44:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004b48:	d006      	beq.n	8004b58 <_scanf_float+0x208>
 8004b4a:	0548      	lsls	r0, r1, #21
 8004b4c:	f57f af38 	bpl.w	80049c0 <_scanf_float+0x70>
 8004b50:	f1b9 0f00 	cmp.w	r9, #0
 8004b54:	f43f af3b 	beq.w	80049ce <_scanf_float+0x7e>
 8004b58:	0588      	lsls	r0, r1, #22
 8004b5a:	bf58      	it	pl
 8004b5c:	9802      	ldrpl	r0, [sp, #8]
 8004b5e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004b62:	bf58      	it	pl
 8004b64:	eba9 0000 	subpl.w	r0, r9, r0
 8004b68:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004b6c:	bf58      	it	pl
 8004b6e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004b72:	6021      	str	r1, [r4, #0]
 8004b74:	f04f 0900 	mov.w	r9, #0
 8004b78:	e7ab      	b.n	8004ad2 <_scanf_float+0x182>
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	e7a9      	b.n	8004ad2 <_scanf_float+0x182>
 8004b7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004b82:	9205      	str	r2, [sp, #20]
 8004b84:	4631      	mov	r1, r6
 8004b86:	4638      	mov	r0, r7
 8004b88:	4798      	blx	r3
 8004b8a:	9a05      	ldr	r2, [sp, #20]
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	f43f af04 	beq.w	800499a <_scanf_float+0x4a>
 8004b92:	e715      	b.n	80049c0 <_scanf_float+0x70>
 8004b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004b98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	4798      	blx	r3
 8004ba2:	6923      	ldr	r3, [r4, #16]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	6123      	str	r3, [r4, #16]
 8004ba8:	e715      	b.n	80049d6 <_scanf_float+0x86>
 8004baa:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004bae:	2b06      	cmp	r3, #6
 8004bb0:	d80a      	bhi.n	8004bc8 <_scanf_float+0x278>
 8004bb2:	f1bb 0f02 	cmp.w	fp, #2
 8004bb6:	d968      	bls.n	8004c8a <_scanf_float+0x33a>
 8004bb8:	f1ab 0b03 	sub.w	fp, fp, #3
 8004bbc:	fa5f fb8b 	uxtb.w	fp, fp
 8004bc0:	eba5 0b0b 	sub.w	fp, r5, fp
 8004bc4:	455d      	cmp	r5, fp
 8004bc6:	d14b      	bne.n	8004c60 <_scanf_float+0x310>
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	05da      	lsls	r2, r3, #23
 8004bcc:	d51f      	bpl.n	8004c0e <_scanf_float+0x2be>
 8004bce:	055b      	lsls	r3, r3, #21
 8004bd0:	d468      	bmi.n	8004ca4 <_scanf_float+0x354>
 8004bd2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	2965      	cmp	r1, #101	; 0x65
 8004bda:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004bde:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8004be2:	6123      	str	r3, [r4, #16]
 8004be4:	d00d      	beq.n	8004c02 <_scanf_float+0x2b2>
 8004be6:	2945      	cmp	r1, #69	; 0x45
 8004be8:	d00b      	beq.n	8004c02 <_scanf_float+0x2b2>
 8004bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bee:	4632      	mov	r2, r6
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	4798      	blx	r3
 8004bf4:	6923      	ldr	r3, [r4, #16]
 8004bf6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	f1a5 0b02 	sub.w	fp, r5, #2
 8004c00:	6123      	str	r3, [r4, #16]
 8004c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c06:	4632      	mov	r2, r6
 8004c08:	4638      	mov	r0, r7
 8004c0a:	4798      	blx	r3
 8004c0c:	465d      	mov	r5, fp
 8004c0e:	6826      	ldr	r6, [r4, #0]
 8004c10:	f016 0610 	ands.w	r6, r6, #16
 8004c14:	d17a      	bne.n	8004d0c <_scanf_float+0x3bc>
 8004c16:	702e      	strb	r6, [r5, #0]
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c22:	d142      	bne.n	8004caa <_scanf_float+0x35a>
 8004c24:	9b02      	ldr	r3, [sp, #8]
 8004c26:	eba9 0303 	sub.w	r3, r9, r3
 8004c2a:	425a      	negs	r2, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d149      	bne.n	8004cc4 <_scanf_float+0x374>
 8004c30:	2200      	movs	r2, #0
 8004c32:	4641      	mov	r1, r8
 8004c34:	4638      	mov	r0, r7
 8004c36:	f000 feb3 	bl	80059a0 <_strtod_r>
 8004c3a:	6825      	ldr	r5, [r4, #0]
 8004c3c:	f8da 3000 	ldr.w	r3, [sl]
 8004c40:	f015 0f02 	tst.w	r5, #2
 8004c44:	f103 0204 	add.w	r2, r3, #4
 8004c48:	ec59 8b10 	vmov	r8, r9, d0
 8004c4c:	f8ca 2000 	str.w	r2, [sl]
 8004c50:	d043      	beq.n	8004cda <_scanf_float+0x38a>
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	e9c3 8900 	strd	r8, r9, [r3]
 8004c58:	68e3      	ldr	r3, [r4, #12]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60e3      	str	r3, [r4, #12]
 8004c5e:	e6be      	b.n	80049de <_scanf_float+0x8e>
 8004c60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004c68:	4632      	mov	r2, r6
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	4798      	blx	r3
 8004c6e:	6923      	ldr	r3, [r4, #16]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	6123      	str	r3, [r4, #16]
 8004c74:	e7a6      	b.n	8004bc4 <_scanf_float+0x274>
 8004c76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c7a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004c7e:	4632      	mov	r2, r6
 8004c80:	4638      	mov	r0, r7
 8004c82:	4798      	blx	r3
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	6123      	str	r3, [r4, #16]
 8004c8a:	4545      	cmp	r5, r8
 8004c8c:	d8f3      	bhi.n	8004c76 <_scanf_float+0x326>
 8004c8e:	e6a5      	b.n	80049dc <_scanf_float+0x8c>
 8004c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004c94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004c98:	4632      	mov	r2, r6
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	4798      	blx	r3
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	6123      	str	r3, [r4, #16]
 8004ca4:	4545      	cmp	r5, r8
 8004ca6:	d8f3      	bhi.n	8004c90 <_scanf_float+0x340>
 8004ca8:	e698      	b.n	80049dc <_scanf_float+0x8c>
 8004caa:	9b03      	ldr	r3, [sp, #12]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0bf      	beq.n	8004c30 <_scanf_float+0x2e0>
 8004cb0:	9904      	ldr	r1, [sp, #16]
 8004cb2:	230a      	movs	r3, #10
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	3101      	adds	r1, #1
 8004cb8:	4638      	mov	r0, r7
 8004cba:	f000 fefd 	bl	8005ab8 <_strtol_r>
 8004cbe:	9b03      	ldr	r3, [sp, #12]
 8004cc0:	9d04      	ldr	r5, [sp, #16]
 8004cc2:	1ac2      	subs	r2, r0, r3
 8004cc4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004cc8:	429d      	cmp	r5, r3
 8004cca:	bf28      	it	cs
 8004ccc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004cd0:	490f      	ldr	r1, [pc, #60]	; (8004d10 <_scanf_float+0x3c0>)
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f000 f834 	bl	8004d40 <siprintf>
 8004cd8:	e7aa      	b.n	8004c30 <_scanf_float+0x2e0>
 8004cda:	f015 0504 	ands.w	r5, r5, #4
 8004cde:	d1b8      	bne.n	8004c52 <_scanf_float+0x302>
 8004ce0:	681f      	ldr	r7, [r3, #0]
 8004ce2:	ee10 2a10 	vmov	r2, s0
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	ee10 0a10 	vmov	r0, s0
 8004cec:	4649      	mov	r1, r9
 8004cee:	f7fb ff1d 	bl	8000b2c <__aeabi_dcmpun>
 8004cf2:	b128      	cbz	r0, 8004d00 <_scanf_float+0x3b0>
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f000 f81d 	bl	8004d34 <nanf>
 8004cfa:	ed87 0a00 	vstr	s0, [r7]
 8004cfe:	e7ab      	b.n	8004c58 <_scanf_float+0x308>
 8004d00:	4640      	mov	r0, r8
 8004d02:	4649      	mov	r1, r9
 8004d04:	f7fb ff70 	bl	8000be8 <__aeabi_d2f>
 8004d08:	6038      	str	r0, [r7, #0]
 8004d0a:	e7a5      	b.n	8004c58 <_scanf_float+0x308>
 8004d0c:	2600      	movs	r6, #0
 8004d0e:	e666      	b.n	80049de <_scanf_float+0x8e>
 8004d10:	08007e3e 	.word	0x08007e3e

08004d14 <_sbrk_r>:
 8004d14:	b538      	push	{r3, r4, r5, lr}
 8004d16:	4c06      	ldr	r4, [pc, #24]	; (8004d30 <_sbrk_r+0x1c>)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	4605      	mov	r5, r0
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	6023      	str	r3, [r4, #0]
 8004d20:	f7fc f97a 	bl	8001018 <_sbrk>
 8004d24:	1c43      	adds	r3, r0, #1
 8004d26:	d102      	bne.n	8004d2e <_sbrk_r+0x1a>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	b103      	cbz	r3, 8004d2e <_sbrk_r+0x1a>
 8004d2c:	602b      	str	r3, [r5, #0]
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	20001c60 	.word	0x20001c60

08004d34 <nanf>:
 8004d34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004d3c <nanf+0x8>
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	7fc00000 	.word	0x7fc00000

08004d40 <siprintf>:
 8004d40:	b40e      	push	{r1, r2, r3}
 8004d42:	b500      	push	{lr}
 8004d44:	b09c      	sub	sp, #112	; 0x70
 8004d46:	ab1d      	add	r3, sp, #116	; 0x74
 8004d48:	9002      	str	r0, [sp, #8]
 8004d4a:	9006      	str	r0, [sp, #24]
 8004d4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d50:	4809      	ldr	r0, [pc, #36]	; (8004d78 <siprintf+0x38>)
 8004d52:	9107      	str	r1, [sp, #28]
 8004d54:	9104      	str	r1, [sp, #16]
 8004d56:	4909      	ldr	r1, [pc, #36]	; (8004d7c <siprintf+0x3c>)
 8004d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d5c:	9105      	str	r1, [sp, #20]
 8004d5e:	6800      	ldr	r0, [r0, #0]
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	a902      	add	r1, sp, #8
 8004d64:	f002 fcc0 	bl	80076e8 <_svfiprintf_r>
 8004d68:	9b02      	ldr	r3, [sp, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	b01c      	add	sp, #112	; 0x70
 8004d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d74:	b003      	add	sp, #12
 8004d76:	4770      	bx	lr
 8004d78:	20000184 	.word	0x20000184
 8004d7c:	ffff0208 	.word	0xffff0208

08004d80 <sulp>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	4604      	mov	r4, r0
 8004d84:	460d      	mov	r5, r1
 8004d86:	ec45 4b10 	vmov	d0, r4, r5
 8004d8a:	4616      	mov	r6, r2
 8004d8c:	f002 fb10 	bl	80073b0 <__ulp>
 8004d90:	ec51 0b10 	vmov	r0, r1, d0
 8004d94:	b17e      	cbz	r6, 8004db6 <sulp+0x36>
 8004d96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004d9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	dd09      	ble.n	8004db6 <sulp+0x36>
 8004da2:	051b      	lsls	r3, r3, #20
 8004da4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004da8:	2400      	movs	r4, #0
 8004daa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004dae:	4622      	mov	r2, r4
 8004db0:	462b      	mov	r3, r5
 8004db2:	f7fb fc21 	bl	80005f8 <__aeabi_dmul>
 8004db6:	bd70      	pop	{r4, r5, r6, pc}

08004db8 <_strtod_l>:
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	461f      	mov	r7, r3
 8004dbe:	b0a1      	sub	sp, #132	; 0x84
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4681      	mov	r9, r0
 8004dc4:	4638      	mov	r0, r7
 8004dc6:	460e      	mov	r6, r1
 8004dc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8004dca:	931c      	str	r3, [sp, #112]	; 0x70
 8004dcc:	f001 fff5 	bl	8006dba <__localeconv_l>
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	6800      	ldr	r0, [r0, #0]
 8004dd4:	f7fb f9fc 	bl	80001d0 <strlen>
 8004dd8:	f04f 0a00 	mov.w	sl, #0
 8004ddc:	4604      	mov	r4, r0
 8004dde:	f04f 0b00 	mov.w	fp, #0
 8004de2:	961b      	str	r6, [sp, #108]	; 0x6c
 8004de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004de6:	781a      	ldrb	r2, [r3, #0]
 8004de8:	2a0d      	cmp	r2, #13
 8004dea:	d832      	bhi.n	8004e52 <_strtod_l+0x9a>
 8004dec:	2a09      	cmp	r2, #9
 8004dee:	d236      	bcs.n	8004e5e <_strtod_l+0xa6>
 8004df0:	2a00      	cmp	r2, #0
 8004df2:	d03e      	beq.n	8004e72 <_strtod_l+0xba>
 8004df4:	2300      	movs	r3, #0
 8004df6:	930d      	str	r3, [sp, #52]	; 0x34
 8004df8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004dfa:	782b      	ldrb	r3, [r5, #0]
 8004dfc:	2b30      	cmp	r3, #48	; 0x30
 8004dfe:	f040 80ac 	bne.w	8004f5a <_strtod_l+0x1a2>
 8004e02:	786b      	ldrb	r3, [r5, #1]
 8004e04:	2b58      	cmp	r3, #88	; 0x58
 8004e06:	d001      	beq.n	8004e0c <_strtod_l+0x54>
 8004e08:	2b78      	cmp	r3, #120	; 0x78
 8004e0a:	d167      	bne.n	8004edc <_strtod_l+0x124>
 8004e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	ab1c      	add	r3, sp, #112	; 0x70
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	9702      	str	r7, [sp, #8]
 8004e16:	ab1d      	add	r3, sp, #116	; 0x74
 8004e18:	4a88      	ldr	r2, [pc, #544]	; (800503c <_strtod_l+0x284>)
 8004e1a:	a91b      	add	r1, sp, #108	; 0x6c
 8004e1c:	4648      	mov	r0, r9
 8004e1e:	f001 fcf2 	bl	8006806 <__gethex>
 8004e22:	f010 0407 	ands.w	r4, r0, #7
 8004e26:	4606      	mov	r6, r0
 8004e28:	d005      	beq.n	8004e36 <_strtod_l+0x7e>
 8004e2a:	2c06      	cmp	r4, #6
 8004e2c:	d12b      	bne.n	8004e86 <_strtod_l+0xce>
 8004e2e:	3501      	adds	r5, #1
 8004e30:	2300      	movs	r3, #0
 8004e32:	951b      	str	r5, [sp, #108]	; 0x6c
 8004e34:	930d      	str	r3, [sp, #52]	; 0x34
 8004e36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 859a 	bne.w	8005972 <_strtod_l+0xbba>
 8004e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e40:	b1e3      	cbz	r3, 8004e7c <_strtod_l+0xc4>
 8004e42:	4652      	mov	r2, sl
 8004e44:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004e48:	ec43 2b10 	vmov	d0, r2, r3
 8004e4c:	b021      	add	sp, #132	; 0x84
 8004e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e52:	2a2b      	cmp	r2, #43	; 0x2b
 8004e54:	d015      	beq.n	8004e82 <_strtod_l+0xca>
 8004e56:	2a2d      	cmp	r2, #45	; 0x2d
 8004e58:	d004      	beq.n	8004e64 <_strtod_l+0xac>
 8004e5a:	2a20      	cmp	r2, #32
 8004e5c:	d1ca      	bne.n	8004df4 <_strtod_l+0x3c>
 8004e5e:	3301      	adds	r3, #1
 8004e60:	931b      	str	r3, [sp, #108]	; 0x6c
 8004e62:	e7bf      	b.n	8004de4 <_strtod_l+0x2c>
 8004e64:	2201      	movs	r2, #1
 8004e66:	920d      	str	r2, [sp, #52]	; 0x34
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1c2      	bne.n	8004df8 <_strtod_l+0x40>
 8004e72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e74:	961b      	str	r6, [sp, #108]	; 0x6c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f040 8579 	bne.w	800596e <_strtod_l+0xbb6>
 8004e7c:	4652      	mov	r2, sl
 8004e7e:	465b      	mov	r3, fp
 8004e80:	e7e2      	b.n	8004e48 <_strtod_l+0x90>
 8004e82:	2200      	movs	r2, #0
 8004e84:	e7ef      	b.n	8004e66 <_strtod_l+0xae>
 8004e86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004e88:	b13a      	cbz	r2, 8004e9a <_strtod_l+0xe2>
 8004e8a:	2135      	movs	r1, #53	; 0x35
 8004e8c:	a81e      	add	r0, sp, #120	; 0x78
 8004e8e:	f002 fb87 	bl	80075a0 <__copybits>
 8004e92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e94:	4648      	mov	r0, r9
 8004e96:	f001 fff4 	bl	8006e82 <_Bfree>
 8004e9a:	3c01      	subs	r4, #1
 8004e9c:	2c04      	cmp	r4, #4
 8004e9e:	d806      	bhi.n	8004eae <_strtod_l+0xf6>
 8004ea0:	e8df f004 	tbb	[pc, r4]
 8004ea4:	1714030a 	.word	0x1714030a
 8004ea8:	0a          	.byte	0x0a
 8004ea9:	00          	.byte	0x00
 8004eaa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004eae:	0730      	lsls	r0, r6, #28
 8004eb0:	d5c1      	bpl.n	8004e36 <_strtod_l+0x7e>
 8004eb2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004eb6:	e7be      	b.n	8004e36 <_strtod_l+0x7e>
 8004eb8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004ebc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004ebe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ec2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004ec6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004eca:	e7f0      	b.n	8004eae <_strtod_l+0xf6>
 8004ecc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005040 <_strtod_l+0x288>
 8004ed0:	e7ed      	b.n	8004eae <_strtod_l+0xf6>
 8004ed2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004ed6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004eda:	e7e8      	b.n	8004eae <_strtod_l+0xf6>
 8004edc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	921b      	str	r2, [sp, #108]	; 0x6c
 8004ee2:	785b      	ldrb	r3, [r3, #1]
 8004ee4:	2b30      	cmp	r3, #48	; 0x30
 8004ee6:	d0f9      	beq.n	8004edc <_strtod_l+0x124>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0a4      	beq.n	8004e36 <_strtod_l+0x7e>
 8004eec:	2301      	movs	r3, #1
 8004eee:	2500      	movs	r5, #0
 8004ef0:	9306      	str	r3, [sp, #24]
 8004ef2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ef4:	9308      	str	r3, [sp, #32]
 8004ef6:	9507      	str	r5, [sp, #28]
 8004ef8:	9505      	str	r5, [sp, #20]
 8004efa:	220a      	movs	r2, #10
 8004efc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004efe:	7807      	ldrb	r7, [r0, #0]
 8004f00:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004f04:	b2d9      	uxtb	r1, r3
 8004f06:	2909      	cmp	r1, #9
 8004f08:	d929      	bls.n	8004f5e <_strtod_l+0x1a6>
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	f8d8 1000 	ldr.w	r1, [r8]
 8004f10:	f002 fce2 	bl	80078d8 <strncmp>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d031      	beq.n	8004f7c <_strtod_l+0x1c4>
 8004f18:	2000      	movs	r0, #0
 8004f1a:	9c05      	ldr	r4, [sp, #20]
 8004f1c:	9004      	str	r0, [sp, #16]
 8004f1e:	463b      	mov	r3, r7
 8004f20:	4602      	mov	r2, r0
 8004f22:	2b65      	cmp	r3, #101	; 0x65
 8004f24:	d001      	beq.n	8004f2a <_strtod_l+0x172>
 8004f26:	2b45      	cmp	r3, #69	; 0x45
 8004f28:	d114      	bne.n	8004f54 <_strtod_l+0x19c>
 8004f2a:	b924      	cbnz	r4, 8004f36 <_strtod_l+0x17e>
 8004f2c:	b910      	cbnz	r0, 8004f34 <_strtod_l+0x17c>
 8004f2e:	9b06      	ldr	r3, [sp, #24]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d09e      	beq.n	8004e72 <_strtod_l+0xba>
 8004f34:	2400      	movs	r4, #0
 8004f36:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004f38:	1c73      	adds	r3, r6, #1
 8004f3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004f3c:	7873      	ldrb	r3, [r6, #1]
 8004f3e:	2b2b      	cmp	r3, #43	; 0x2b
 8004f40:	d078      	beq.n	8005034 <_strtod_l+0x27c>
 8004f42:	2b2d      	cmp	r3, #45	; 0x2d
 8004f44:	d070      	beq.n	8005028 <_strtod_l+0x270>
 8004f46:	f04f 0c00 	mov.w	ip, #0
 8004f4a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004f4e:	2f09      	cmp	r7, #9
 8004f50:	d97c      	bls.n	800504c <_strtod_l+0x294>
 8004f52:	961b      	str	r6, [sp, #108]	; 0x6c
 8004f54:	f04f 0e00 	mov.w	lr, #0
 8004f58:	e09a      	b.n	8005090 <_strtod_l+0x2d8>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e7c7      	b.n	8004eee <_strtod_l+0x136>
 8004f5e:	9905      	ldr	r1, [sp, #20]
 8004f60:	2908      	cmp	r1, #8
 8004f62:	bfdd      	ittte	le
 8004f64:	9907      	ldrle	r1, [sp, #28]
 8004f66:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f6a:	9307      	strle	r3, [sp, #28]
 8004f6c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004f70:	9b05      	ldr	r3, [sp, #20]
 8004f72:	3001      	adds	r0, #1
 8004f74:	3301      	adds	r3, #1
 8004f76:	9305      	str	r3, [sp, #20]
 8004f78:	901b      	str	r0, [sp, #108]	; 0x6c
 8004f7a:	e7bf      	b.n	8004efc <_strtod_l+0x144>
 8004f7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f7e:	191a      	adds	r2, r3, r4
 8004f80:	921b      	str	r2, [sp, #108]	; 0x6c
 8004f82:	9a05      	ldr	r2, [sp, #20]
 8004f84:	5d1b      	ldrb	r3, [r3, r4]
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	d037      	beq.n	8004ffa <_strtod_l+0x242>
 8004f8a:	9c05      	ldr	r4, [sp, #20]
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004f92:	2909      	cmp	r1, #9
 8004f94:	d913      	bls.n	8004fbe <_strtod_l+0x206>
 8004f96:	2101      	movs	r1, #1
 8004f98:	9104      	str	r1, [sp, #16]
 8004f9a:	e7c2      	b.n	8004f22 <_strtod_l+0x16a>
 8004f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	921b      	str	r2, [sp, #108]	; 0x6c
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	2b30      	cmp	r3, #48	; 0x30
 8004fa8:	d0f8      	beq.n	8004f9c <_strtod_l+0x1e4>
 8004faa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004fae:	2a08      	cmp	r2, #8
 8004fb0:	f200 84e4 	bhi.w	800597c <_strtod_l+0xbc4>
 8004fb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004fb6:	9208      	str	r2, [sp, #32]
 8004fb8:	4602      	mov	r2, r0
 8004fba:	2000      	movs	r0, #0
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004fc2:	f100 0101 	add.w	r1, r0, #1
 8004fc6:	d012      	beq.n	8004fee <_strtod_l+0x236>
 8004fc8:	440a      	add	r2, r1
 8004fca:	eb00 0c04 	add.w	ip, r0, r4
 8004fce:	4621      	mov	r1, r4
 8004fd0:	270a      	movs	r7, #10
 8004fd2:	458c      	cmp	ip, r1
 8004fd4:	d113      	bne.n	8004ffe <_strtod_l+0x246>
 8004fd6:	1821      	adds	r1, r4, r0
 8004fd8:	2908      	cmp	r1, #8
 8004fda:	f104 0401 	add.w	r4, r4, #1
 8004fde:	4404      	add	r4, r0
 8004fe0:	dc19      	bgt.n	8005016 <_strtod_l+0x25e>
 8004fe2:	9b07      	ldr	r3, [sp, #28]
 8004fe4:	210a      	movs	r1, #10
 8004fe6:	fb01 e303 	mla	r3, r1, r3, lr
 8004fea:	9307      	str	r3, [sp, #28]
 8004fec:	2100      	movs	r1, #0
 8004fee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ff0:	1c58      	adds	r0, r3, #1
 8004ff2:	901b      	str	r0, [sp, #108]	; 0x6c
 8004ff4:	785b      	ldrb	r3, [r3, #1]
 8004ff6:	4608      	mov	r0, r1
 8004ff8:	e7c9      	b.n	8004f8e <_strtod_l+0x1d6>
 8004ffa:	9805      	ldr	r0, [sp, #20]
 8004ffc:	e7d3      	b.n	8004fa6 <_strtod_l+0x1ee>
 8004ffe:	2908      	cmp	r1, #8
 8005000:	f101 0101 	add.w	r1, r1, #1
 8005004:	dc03      	bgt.n	800500e <_strtod_l+0x256>
 8005006:	9b07      	ldr	r3, [sp, #28]
 8005008:	437b      	muls	r3, r7
 800500a:	9307      	str	r3, [sp, #28]
 800500c:	e7e1      	b.n	8004fd2 <_strtod_l+0x21a>
 800500e:	2910      	cmp	r1, #16
 8005010:	bfd8      	it	le
 8005012:	437d      	mulle	r5, r7
 8005014:	e7dd      	b.n	8004fd2 <_strtod_l+0x21a>
 8005016:	2c10      	cmp	r4, #16
 8005018:	bfdc      	itt	le
 800501a:	210a      	movle	r1, #10
 800501c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005020:	e7e4      	b.n	8004fec <_strtod_l+0x234>
 8005022:	2301      	movs	r3, #1
 8005024:	9304      	str	r3, [sp, #16]
 8005026:	e781      	b.n	8004f2c <_strtod_l+0x174>
 8005028:	f04f 0c01 	mov.w	ip, #1
 800502c:	1cb3      	adds	r3, r6, #2
 800502e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005030:	78b3      	ldrb	r3, [r6, #2]
 8005032:	e78a      	b.n	8004f4a <_strtod_l+0x192>
 8005034:	f04f 0c00 	mov.w	ip, #0
 8005038:	e7f8      	b.n	800502c <_strtod_l+0x274>
 800503a:	bf00      	nop
 800503c:	08007e44 	.word	0x08007e44
 8005040:	7ff00000 	.word	0x7ff00000
 8005044:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005046:	1c5f      	adds	r7, r3, #1
 8005048:	971b      	str	r7, [sp, #108]	; 0x6c
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b30      	cmp	r3, #48	; 0x30
 800504e:	d0f9      	beq.n	8005044 <_strtod_l+0x28c>
 8005050:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005054:	2f08      	cmp	r7, #8
 8005056:	f63f af7d 	bhi.w	8004f54 <_strtod_l+0x19c>
 800505a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800505e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005060:	930a      	str	r3, [sp, #40]	; 0x28
 8005062:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005064:	1c5f      	adds	r7, r3, #1
 8005066:	971b      	str	r7, [sp, #108]	; 0x6c
 8005068:	785b      	ldrb	r3, [r3, #1]
 800506a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800506e:	f1b8 0f09 	cmp.w	r8, #9
 8005072:	d937      	bls.n	80050e4 <_strtod_l+0x32c>
 8005074:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005076:	1a7f      	subs	r7, r7, r1
 8005078:	2f08      	cmp	r7, #8
 800507a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800507e:	dc37      	bgt.n	80050f0 <_strtod_l+0x338>
 8005080:	45be      	cmp	lr, r7
 8005082:	bfa8      	it	ge
 8005084:	46be      	movge	lr, r7
 8005086:	f1bc 0f00 	cmp.w	ip, #0
 800508a:	d001      	beq.n	8005090 <_strtod_l+0x2d8>
 800508c:	f1ce 0e00 	rsb	lr, lr, #0
 8005090:	2c00      	cmp	r4, #0
 8005092:	d151      	bne.n	8005138 <_strtod_l+0x380>
 8005094:	2800      	cmp	r0, #0
 8005096:	f47f aece 	bne.w	8004e36 <_strtod_l+0x7e>
 800509a:	9a06      	ldr	r2, [sp, #24]
 800509c:	2a00      	cmp	r2, #0
 800509e:	f47f aeca 	bne.w	8004e36 <_strtod_l+0x7e>
 80050a2:	9a04      	ldr	r2, [sp, #16]
 80050a4:	2a00      	cmp	r2, #0
 80050a6:	f47f aee4 	bne.w	8004e72 <_strtod_l+0xba>
 80050aa:	2b4e      	cmp	r3, #78	; 0x4e
 80050ac:	d027      	beq.n	80050fe <_strtod_l+0x346>
 80050ae:	dc21      	bgt.n	80050f4 <_strtod_l+0x33c>
 80050b0:	2b49      	cmp	r3, #73	; 0x49
 80050b2:	f47f aede 	bne.w	8004e72 <_strtod_l+0xba>
 80050b6:	49a0      	ldr	r1, [pc, #640]	; (8005338 <_strtod_l+0x580>)
 80050b8:	a81b      	add	r0, sp, #108	; 0x6c
 80050ba:	f001 fdd7 	bl	8006c6c <__match>
 80050be:	2800      	cmp	r0, #0
 80050c0:	f43f aed7 	beq.w	8004e72 <_strtod_l+0xba>
 80050c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050c6:	499d      	ldr	r1, [pc, #628]	; (800533c <_strtod_l+0x584>)
 80050c8:	3b01      	subs	r3, #1
 80050ca:	a81b      	add	r0, sp, #108	; 0x6c
 80050cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80050ce:	f001 fdcd 	bl	8006c6c <__match>
 80050d2:	b910      	cbnz	r0, 80050da <_strtod_l+0x322>
 80050d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050d6:	3301      	adds	r3, #1
 80050d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80050da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005350 <_strtod_l+0x598>
 80050de:	f04f 0a00 	mov.w	sl, #0
 80050e2:	e6a8      	b.n	8004e36 <_strtod_l+0x7e>
 80050e4:	210a      	movs	r1, #10
 80050e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80050ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80050ee:	e7b8      	b.n	8005062 <_strtod_l+0x2aa>
 80050f0:	46be      	mov	lr, r7
 80050f2:	e7c8      	b.n	8005086 <_strtod_l+0x2ce>
 80050f4:	2b69      	cmp	r3, #105	; 0x69
 80050f6:	d0de      	beq.n	80050b6 <_strtod_l+0x2fe>
 80050f8:	2b6e      	cmp	r3, #110	; 0x6e
 80050fa:	f47f aeba 	bne.w	8004e72 <_strtod_l+0xba>
 80050fe:	4990      	ldr	r1, [pc, #576]	; (8005340 <_strtod_l+0x588>)
 8005100:	a81b      	add	r0, sp, #108	; 0x6c
 8005102:	f001 fdb3 	bl	8006c6c <__match>
 8005106:	2800      	cmp	r0, #0
 8005108:	f43f aeb3 	beq.w	8004e72 <_strtod_l+0xba>
 800510c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b28      	cmp	r3, #40	; 0x28
 8005112:	d10e      	bne.n	8005132 <_strtod_l+0x37a>
 8005114:	aa1e      	add	r2, sp, #120	; 0x78
 8005116:	498b      	ldr	r1, [pc, #556]	; (8005344 <_strtod_l+0x58c>)
 8005118:	a81b      	add	r0, sp, #108	; 0x6c
 800511a:	f001 fdbb 	bl	8006c94 <__hexnan>
 800511e:	2805      	cmp	r0, #5
 8005120:	d107      	bne.n	8005132 <_strtod_l+0x37a>
 8005122:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005124:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005128:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800512c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005130:	e681      	b.n	8004e36 <_strtod_l+0x7e>
 8005132:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005358 <_strtod_l+0x5a0>
 8005136:	e7d2      	b.n	80050de <_strtod_l+0x326>
 8005138:	ebae 0302 	sub.w	r3, lr, r2
 800513c:	9306      	str	r3, [sp, #24]
 800513e:	9b05      	ldr	r3, [sp, #20]
 8005140:	9807      	ldr	r0, [sp, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	bf08      	it	eq
 8005146:	4623      	moveq	r3, r4
 8005148:	2c10      	cmp	r4, #16
 800514a:	9305      	str	r3, [sp, #20]
 800514c:	46a0      	mov	r8, r4
 800514e:	bfa8      	it	ge
 8005150:	f04f 0810 	movge.w	r8, #16
 8005154:	f7fb f9d6 	bl	8000504 <__aeabi_ui2d>
 8005158:	2c09      	cmp	r4, #9
 800515a:	4682      	mov	sl, r0
 800515c:	468b      	mov	fp, r1
 800515e:	dc13      	bgt.n	8005188 <_strtod_l+0x3d0>
 8005160:	9b06      	ldr	r3, [sp, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f43f ae67 	beq.w	8004e36 <_strtod_l+0x7e>
 8005168:	9b06      	ldr	r3, [sp, #24]
 800516a:	dd7a      	ble.n	8005262 <_strtod_l+0x4aa>
 800516c:	2b16      	cmp	r3, #22
 800516e:	dc61      	bgt.n	8005234 <_strtod_l+0x47c>
 8005170:	4a75      	ldr	r2, [pc, #468]	; (8005348 <_strtod_l+0x590>)
 8005172:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8005176:	e9de 0100 	ldrd	r0, r1, [lr]
 800517a:	4652      	mov	r2, sl
 800517c:	465b      	mov	r3, fp
 800517e:	f7fb fa3b 	bl	80005f8 <__aeabi_dmul>
 8005182:	4682      	mov	sl, r0
 8005184:	468b      	mov	fp, r1
 8005186:	e656      	b.n	8004e36 <_strtod_l+0x7e>
 8005188:	4b6f      	ldr	r3, [pc, #444]	; (8005348 <_strtod_l+0x590>)
 800518a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800518e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005192:	f7fb fa31 	bl	80005f8 <__aeabi_dmul>
 8005196:	4606      	mov	r6, r0
 8005198:	4628      	mov	r0, r5
 800519a:	460f      	mov	r7, r1
 800519c:	f7fb f9b2 	bl	8000504 <__aeabi_ui2d>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4630      	mov	r0, r6
 80051a6:	4639      	mov	r1, r7
 80051a8:	f7fb f870 	bl	800028c <__adddf3>
 80051ac:	2c0f      	cmp	r4, #15
 80051ae:	4682      	mov	sl, r0
 80051b0:	468b      	mov	fp, r1
 80051b2:	ddd5      	ble.n	8005160 <_strtod_l+0x3a8>
 80051b4:	9b06      	ldr	r3, [sp, #24]
 80051b6:	eba4 0808 	sub.w	r8, r4, r8
 80051ba:	4498      	add	r8, r3
 80051bc:	f1b8 0f00 	cmp.w	r8, #0
 80051c0:	f340 8096 	ble.w	80052f0 <_strtod_l+0x538>
 80051c4:	f018 030f 	ands.w	r3, r8, #15
 80051c8:	d00a      	beq.n	80051e0 <_strtod_l+0x428>
 80051ca:	495f      	ldr	r1, [pc, #380]	; (8005348 <_strtod_l+0x590>)
 80051cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80051d0:	4652      	mov	r2, sl
 80051d2:	465b      	mov	r3, fp
 80051d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051d8:	f7fb fa0e 	bl	80005f8 <__aeabi_dmul>
 80051dc:	4682      	mov	sl, r0
 80051de:	468b      	mov	fp, r1
 80051e0:	f038 080f 	bics.w	r8, r8, #15
 80051e4:	d073      	beq.n	80052ce <_strtod_l+0x516>
 80051e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80051ea:	dd47      	ble.n	800527c <_strtod_l+0x4c4>
 80051ec:	2400      	movs	r4, #0
 80051ee:	46a0      	mov	r8, r4
 80051f0:	9407      	str	r4, [sp, #28]
 80051f2:	9405      	str	r4, [sp, #20]
 80051f4:	2322      	movs	r3, #34	; 0x22
 80051f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005350 <_strtod_l+0x598>
 80051fa:	f8c9 3000 	str.w	r3, [r9]
 80051fe:	f04f 0a00 	mov.w	sl, #0
 8005202:	9b07      	ldr	r3, [sp, #28]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f43f ae16 	beq.w	8004e36 <_strtod_l+0x7e>
 800520a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800520c:	4648      	mov	r0, r9
 800520e:	f001 fe38 	bl	8006e82 <_Bfree>
 8005212:	9905      	ldr	r1, [sp, #20]
 8005214:	4648      	mov	r0, r9
 8005216:	f001 fe34 	bl	8006e82 <_Bfree>
 800521a:	4641      	mov	r1, r8
 800521c:	4648      	mov	r0, r9
 800521e:	f001 fe30 	bl	8006e82 <_Bfree>
 8005222:	9907      	ldr	r1, [sp, #28]
 8005224:	4648      	mov	r0, r9
 8005226:	f001 fe2c 	bl	8006e82 <_Bfree>
 800522a:	4621      	mov	r1, r4
 800522c:	4648      	mov	r0, r9
 800522e:	f001 fe28 	bl	8006e82 <_Bfree>
 8005232:	e600      	b.n	8004e36 <_strtod_l+0x7e>
 8005234:	9a06      	ldr	r2, [sp, #24]
 8005236:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800523a:	4293      	cmp	r3, r2
 800523c:	dbba      	blt.n	80051b4 <_strtod_l+0x3fc>
 800523e:	4d42      	ldr	r5, [pc, #264]	; (8005348 <_strtod_l+0x590>)
 8005240:	f1c4 040f 	rsb	r4, r4, #15
 8005244:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005248:	4652      	mov	r2, sl
 800524a:	465b      	mov	r3, fp
 800524c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005250:	f7fb f9d2 	bl	80005f8 <__aeabi_dmul>
 8005254:	9b06      	ldr	r3, [sp, #24]
 8005256:	1b1c      	subs	r4, r3, r4
 8005258:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800525c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005260:	e78d      	b.n	800517e <_strtod_l+0x3c6>
 8005262:	f113 0f16 	cmn.w	r3, #22
 8005266:	dba5      	blt.n	80051b4 <_strtod_l+0x3fc>
 8005268:	4a37      	ldr	r2, [pc, #220]	; (8005348 <_strtod_l+0x590>)
 800526a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800526e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8005272:	4650      	mov	r0, sl
 8005274:	4659      	mov	r1, fp
 8005276:	f7fb fae9 	bl	800084c <__aeabi_ddiv>
 800527a:	e782      	b.n	8005182 <_strtod_l+0x3ca>
 800527c:	2300      	movs	r3, #0
 800527e:	4e33      	ldr	r6, [pc, #204]	; (800534c <_strtod_l+0x594>)
 8005280:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005284:	4650      	mov	r0, sl
 8005286:	4659      	mov	r1, fp
 8005288:	461d      	mov	r5, r3
 800528a:	f1b8 0f01 	cmp.w	r8, #1
 800528e:	dc21      	bgt.n	80052d4 <_strtod_l+0x51c>
 8005290:	b10b      	cbz	r3, 8005296 <_strtod_l+0x4de>
 8005292:	4682      	mov	sl, r0
 8005294:	468b      	mov	fp, r1
 8005296:	4b2d      	ldr	r3, [pc, #180]	; (800534c <_strtod_l+0x594>)
 8005298:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800529c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80052a0:	4652      	mov	r2, sl
 80052a2:	465b      	mov	r3, fp
 80052a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80052a8:	f7fb f9a6 	bl	80005f8 <__aeabi_dmul>
 80052ac:	4b28      	ldr	r3, [pc, #160]	; (8005350 <_strtod_l+0x598>)
 80052ae:	460a      	mov	r2, r1
 80052b0:	400b      	ands	r3, r1
 80052b2:	4928      	ldr	r1, [pc, #160]	; (8005354 <_strtod_l+0x59c>)
 80052b4:	428b      	cmp	r3, r1
 80052b6:	4682      	mov	sl, r0
 80052b8:	d898      	bhi.n	80051ec <_strtod_l+0x434>
 80052ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80052be:	428b      	cmp	r3, r1
 80052c0:	bf86      	itte	hi
 80052c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800535c <_strtod_l+0x5a4>
 80052c6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80052ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80052ce:	2300      	movs	r3, #0
 80052d0:	9304      	str	r3, [sp, #16]
 80052d2:	e077      	b.n	80053c4 <_strtod_l+0x60c>
 80052d4:	f018 0f01 	tst.w	r8, #1
 80052d8:	d006      	beq.n	80052e8 <_strtod_l+0x530>
 80052da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f7fb f989 	bl	80005f8 <__aeabi_dmul>
 80052e6:	2301      	movs	r3, #1
 80052e8:	3501      	adds	r5, #1
 80052ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80052ee:	e7cc      	b.n	800528a <_strtod_l+0x4d2>
 80052f0:	d0ed      	beq.n	80052ce <_strtod_l+0x516>
 80052f2:	f1c8 0800 	rsb	r8, r8, #0
 80052f6:	f018 020f 	ands.w	r2, r8, #15
 80052fa:	d00a      	beq.n	8005312 <_strtod_l+0x55a>
 80052fc:	4b12      	ldr	r3, [pc, #72]	; (8005348 <_strtod_l+0x590>)
 80052fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005302:	4650      	mov	r0, sl
 8005304:	4659      	mov	r1, fp
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f7fb fa9f 	bl	800084c <__aeabi_ddiv>
 800530e:	4682      	mov	sl, r0
 8005310:	468b      	mov	fp, r1
 8005312:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005316:	d0da      	beq.n	80052ce <_strtod_l+0x516>
 8005318:	f1b8 0f1f 	cmp.w	r8, #31
 800531c:	dd20      	ble.n	8005360 <_strtod_l+0x5a8>
 800531e:	2400      	movs	r4, #0
 8005320:	46a0      	mov	r8, r4
 8005322:	9407      	str	r4, [sp, #28]
 8005324:	9405      	str	r4, [sp, #20]
 8005326:	2322      	movs	r3, #34	; 0x22
 8005328:	f04f 0a00 	mov.w	sl, #0
 800532c:	f04f 0b00 	mov.w	fp, #0
 8005330:	f8c9 3000 	str.w	r3, [r9]
 8005334:	e765      	b.n	8005202 <_strtod_l+0x44a>
 8005336:	bf00      	nop
 8005338:	08007e0f 	.word	0x08007e0f
 800533c:	08007e9b 	.word	0x08007e9b
 8005340:	08007e17 	.word	0x08007e17
 8005344:	08007e58 	.word	0x08007e58
 8005348:	08007ed8 	.word	0x08007ed8
 800534c:	08007eb0 	.word	0x08007eb0
 8005350:	7ff00000 	.word	0x7ff00000
 8005354:	7ca00000 	.word	0x7ca00000
 8005358:	fff80000 	.word	0xfff80000
 800535c:	7fefffff 	.word	0x7fefffff
 8005360:	f018 0310 	ands.w	r3, r8, #16
 8005364:	bf18      	it	ne
 8005366:	236a      	movne	r3, #106	; 0x6a
 8005368:	4da0      	ldr	r5, [pc, #640]	; (80055ec <_strtod_l+0x834>)
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	4650      	mov	r0, sl
 800536e:	4659      	mov	r1, fp
 8005370:	2300      	movs	r3, #0
 8005372:	f1b8 0f00 	cmp.w	r8, #0
 8005376:	f300 810a 	bgt.w	800558e <_strtod_l+0x7d6>
 800537a:	b10b      	cbz	r3, 8005380 <_strtod_l+0x5c8>
 800537c:	4682      	mov	sl, r0
 800537e:	468b      	mov	fp, r1
 8005380:	9b04      	ldr	r3, [sp, #16]
 8005382:	b1bb      	cbz	r3, 80053b4 <_strtod_l+0x5fc>
 8005384:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800538c:	2b00      	cmp	r3, #0
 800538e:	4659      	mov	r1, fp
 8005390:	dd10      	ble.n	80053b4 <_strtod_l+0x5fc>
 8005392:	2b1f      	cmp	r3, #31
 8005394:	f340 8107 	ble.w	80055a6 <_strtod_l+0x7ee>
 8005398:	2b34      	cmp	r3, #52	; 0x34
 800539a:	bfde      	ittt	le
 800539c:	3b20      	suble	r3, #32
 800539e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80053a2:	fa02 f303 	lslle.w	r3, r2, r3
 80053a6:	f04f 0a00 	mov.w	sl, #0
 80053aa:	bfcc      	ite	gt
 80053ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80053b0:	ea03 0b01 	andle.w	fp, r3, r1
 80053b4:	2200      	movs	r2, #0
 80053b6:	2300      	movs	r3, #0
 80053b8:	4650      	mov	r0, sl
 80053ba:	4659      	mov	r1, fp
 80053bc:	f7fb fb84 	bl	8000ac8 <__aeabi_dcmpeq>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d1ac      	bne.n	800531e <_strtod_l+0x566>
 80053c4:	9b07      	ldr	r3, [sp, #28]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	9a05      	ldr	r2, [sp, #20]
 80053ca:	9908      	ldr	r1, [sp, #32]
 80053cc:	4623      	mov	r3, r4
 80053ce:	4648      	mov	r0, r9
 80053d0:	f001 fda9 	bl	8006f26 <__s2b>
 80053d4:	9007      	str	r0, [sp, #28]
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f43f af08 	beq.w	80051ec <_strtod_l+0x434>
 80053dc:	9a06      	ldr	r2, [sp, #24]
 80053de:	9b06      	ldr	r3, [sp, #24]
 80053e0:	2a00      	cmp	r2, #0
 80053e2:	f1c3 0300 	rsb	r3, r3, #0
 80053e6:	bfa8      	it	ge
 80053e8:	2300      	movge	r3, #0
 80053ea:	930e      	str	r3, [sp, #56]	; 0x38
 80053ec:	2400      	movs	r4, #0
 80053ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80053f2:	9316      	str	r3, [sp, #88]	; 0x58
 80053f4:	46a0      	mov	r8, r4
 80053f6:	9b07      	ldr	r3, [sp, #28]
 80053f8:	4648      	mov	r0, r9
 80053fa:	6859      	ldr	r1, [r3, #4]
 80053fc:	f001 fd0d 	bl	8006e1a <_Balloc>
 8005400:	9005      	str	r0, [sp, #20]
 8005402:	2800      	cmp	r0, #0
 8005404:	f43f aef6 	beq.w	80051f4 <_strtod_l+0x43c>
 8005408:	9b07      	ldr	r3, [sp, #28]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	3202      	adds	r2, #2
 800540e:	f103 010c 	add.w	r1, r3, #12
 8005412:	0092      	lsls	r2, r2, #2
 8005414:	300c      	adds	r0, #12
 8005416:	f001 fcf3 	bl	8006e00 <memcpy>
 800541a:	aa1e      	add	r2, sp, #120	; 0x78
 800541c:	a91d      	add	r1, sp, #116	; 0x74
 800541e:	ec4b ab10 	vmov	d0, sl, fp
 8005422:	4648      	mov	r0, r9
 8005424:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005428:	f002 f838 	bl	800749c <__d2b>
 800542c:	901c      	str	r0, [sp, #112]	; 0x70
 800542e:	2800      	cmp	r0, #0
 8005430:	f43f aee0 	beq.w	80051f4 <_strtod_l+0x43c>
 8005434:	2101      	movs	r1, #1
 8005436:	4648      	mov	r0, r9
 8005438:	f001 fe01 	bl	800703e <__i2b>
 800543c:	4680      	mov	r8, r0
 800543e:	2800      	cmp	r0, #0
 8005440:	f43f aed8 	beq.w	80051f4 <_strtod_l+0x43c>
 8005444:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005446:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005448:	2e00      	cmp	r6, #0
 800544a:	bfab      	itete	ge
 800544c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800544e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005450:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005452:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005454:	bfac      	ite	ge
 8005456:	18f7      	addge	r7, r6, r3
 8005458:	1b9d      	sublt	r5, r3, r6
 800545a:	9b04      	ldr	r3, [sp, #16]
 800545c:	1af6      	subs	r6, r6, r3
 800545e:	4416      	add	r6, r2
 8005460:	4b63      	ldr	r3, [pc, #396]	; (80055f0 <_strtod_l+0x838>)
 8005462:	3e01      	subs	r6, #1
 8005464:	429e      	cmp	r6, r3
 8005466:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800546a:	f280 80af 	bge.w	80055cc <_strtod_l+0x814>
 800546e:	1b9b      	subs	r3, r3, r6
 8005470:	2b1f      	cmp	r3, #31
 8005472:	eba2 0203 	sub.w	r2, r2, r3
 8005476:	f04f 0101 	mov.w	r1, #1
 800547a:	f300 809b 	bgt.w	80055b4 <_strtod_l+0x7fc>
 800547e:	fa01 f303 	lsl.w	r3, r1, r3
 8005482:	930f      	str	r3, [sp, #60]	; 0x3c
 8005484:	2300      	movs	r3, #0
 8005486:	930a      	str	r3, [sp, #40]	; 0x28
 8005488:	18be      	adds	r6, r7, r2
 800548a:	9b04      	ldr	r3, [sp, #16]
 800548c:	42b7      	cmp	r7, r6
 800548e:	4415      	add	r5, r2
 8005490:	441d      	add	r5, r3
 8005492:	463b      	mov	r3, r7
 8005494:	bfa8      	it	ge
 8005496:	4633      	movge	r3, r6
 8005498:	42ab      	cmp	r3, r5
 800549a:	bfa8      	it	ge
 800549c:	462b      	movge	r3, r5
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bfc2      	ittt	gt
 80054a2:	1af6      	subgt	r6, r6, r3
 80054a4:	1aed      	subgt	r5, r5, r3
 80054a6:	1aff      	subgt	r7, r7, r3
 80054a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054aa:	b1bb      	cbz	r3, 80054dc <_strtod_l+0x724>
 80054ac:	4641      	mov	r1, r8
 80054ae:	461a      	mov	r2, r3
 80054b0:	4648      	mov	r0, r9
 80054b2:	f001 fe63 	bl	800717c <__pow5mult>
 80054b6:	4680      	mov	r8, r0
 80054b8:	2800      	cmp	r0, #0
 80054ba:	f43f ae9b 	beq.w	80051f4 <_strtod_l+0x43c>
 80054be:	4601      	mov	r1, r0
 80054c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80054c2:	4648      	mov	r0, r9
 80054c4:	f001 fdc4 	bl	8007050 <__multiply>
 80054c8:	900c      	str	r0, [sp, #48]	; 0x30
 80054ca:	2800      	cmp	r0, #0
 80054cc:	f43f ae92 	beq.w	80051f4 <_strtod_l+0x43c>
 80054d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80054d2:	4648      	mov	r0, r9
 80054d4:	f001 fcd5 	bl	8006e82 <_Bfree>
 80054d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054da:	931c      	str	r3, [sp, #112]	; 0x70
 80054dc:	2e00      	cmp	r6, #0
 80054de:	dc7a      	bgt.n	80055d6 <_strtod_l+0x81e>
 80054e0:	9b06      	ldr	r3, [sp, #24]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	dd08      	ble.n	80054f8 <_strtod_l+0x740>
 80054e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80054e8:	9905      	ldr	r1, [sp, #20]
 80054ea:	4648      	mov	r0, r9
 80054ec:	f001 fe46 	bl	800717c <__pow5mult>
 80054f0:	9005      	str	r0, [sp, #20]
 80054f2:	2800      	cmp	r0, #0
 80054f4:	f43f ae7e 	beq.w	80051f4 <_strtod_l+0x43c>
 80054f8:	2d00      	cmp	r5, #0
 80054fa:	dd08      	ble.n	800550e <_strtod_l+0x756>
 80054fc:	462a      	mov	r2, r5
 80054fe:	9905      	ldr	r1, [sp, #20]
 8005500:	4648      	mov	r0, r9
 8005502:	f001 fe89 	bl	8007218 <__lshift>
 8005506:	9005      	str	r0, [sp, #20]
 8005508:	2800      	cmp	r0, #0
 800550a:	f43f ae73 	beq.w	80051f4 <_strtod_l+0x43c>
 800550e:	2f00      	cmp	r7, #0
 8005510:	dd08      	ble.n	8005524 <_strtod_l+0x76c>
 8005512:	4641      	mov	r1, r8
 8005514:	463a      	mov	r2, r7
 8005516:	4648      	mov	r0, r9
 8005518:	f001 fe7e 	bl	8007218 <__lshift>
 800551c:	4680      	mov	r8, r0
 800551e:	2800      	cmp	r0, #0
 8005520:	f43f ae68 	beq.w	80051f4 <_strtod_l+0x43c>
 8005524:	9a05      	ldr	r2, [sp, #20]
 8005526:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005528:	4648      	mov	r0, r9
 800552a:	f001 fee3 	bl	80072f4 <__mdiff>
 800552e:	4604      	mov	r4, r0
 8005530:	2800      	cmp	r0, #0
 8005532:	f43f ae5f 	beq.w	80051f4 <_strtod_l+0x43c>
 8005536:	68c3      	ldr	r3, [r0, #12]
 8005538:	930c      	str	r3, [sp, #48]	; 0x30
 800553a:	2300      	movs	r3, #0
 800553c:	60c3      	str	r3, [r0, #12]
 800553e:	4641      	mov	r1, r8
 8005540:	f001 febe 	bl	80072c0 <__mcmp>
 8005544:	2800      	cmp	r0, #0
 8005546:	da55      	bge.n	80055f4 <_strtod_l+0x83c>
 8005548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800554a:	b9e3      	cbnz	r3, 8005586 <_strtod_l+0x7ce>
 800554c:	f1ba 0f00 	cmp.w	sl, #0
 8005550:	d119      	bne.n	8005586 <_strtod_l+0x7ce>
 8005552:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005556:	b9b3      	cbnz	r3, 8005586 <_strtod_l+0x7ce>
 8005558:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800555c:	0d1b      	lsrs	r3, r3, #20
 800555e:	051b      	lsls	r3, r3, #20
 8005560:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005564:	d90f      	bls.n	8005586 <_strtod_l+0x7ce>
 8005566:	6963      	ldr	r3, [r4, #20]
 8005568:	b913      	cbnz	r3, 8005570 <_strtod_l+0x7b8>
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	2b01      	cmp	r3, #1
 800556e:	dd0a      	ble.n	8005586 <_strtod_l+0x7ce>
 8005570:	4621      	mov	r1, r4
 8005572:	2201      	movs	r2, #1
 8005574:	4648      	mov	r0, r9
 8005576:	f001 fe4f 	bl	8007218 <__lshift>
 800557a:	4641      	mov	r1, r8
 800557c:	4604      	mov	r4, r0
 800557e:	f001 fe9f 	bl	80072c0 <__mcmp>
 8005582:	2800      	cmp	r0, #0
 8005584:	dc67      	bgt.n	8005656 <_strtod_l+0x89e>
 8005586:	9b04      	ldr	r3, [sp, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d171      	bne.n	8005670 <_strtod_l+0x8b8>
 800558c:	e63d      	b.n	800520a <_strtod_l+0x452>
 800558e:	f018 0f01 	tst.w	r8, #1
 8005592:	d004      	beq.n	800559e <_strtod_l+0x7e6>
 8005594:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005598:	f7fb f82e 	bl	80005f8 <__aeabi_dmul>
 800559c:	2301      	movs	r3, #1
 800559e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80055a2:	3508      	adds	r5, #8
 80055a4:	e6e5      	b.n	8005372 <_strtod_l+0x5ba>
 80055a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	ea03 0a0a 	and.w	sl, r3, sl
 80055b2:	e6ff      	b.n	80053b4 <_strtod_l+0x5fc>
 80055b4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80055b8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80055bc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80055c0:	36e2      	adds	r6, #226	; 0xe2
 80055c2:	fa01 f306 	lsl.w	r3, r1, r6
 80055c6:	930a      	str	r3, [sp, #40]	; 0x28
 80055c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80055ca:	e75d      	b.n	8005488 <_strtod_l+0x6d0>
 80055cc:	2300      	movs	r3, #0
 80055ce:	930a      	str	r3, [sp, #40]	; 0x28
 80055d0:	2301      	movs	r3, #1
 80055d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80055d4:	e758      	b.n	8005488 <_strtod_l+0x6d0>
 80055d6:	4632      	mov	r2, r6
 80055d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80055da:	4648      	mov	r0, r9
 80055dc:	f001 fe1c 	bl	8007218 <__lshift>
 80055e0:	901c      	str	r0, [sp, #112]	; 0x70
 80055e2:	2800      	cmp	r0, #0
 80055e4:	f47f af7c 	bne.w	80054e0 <_strtod_l+0x728>
 80055e8:	e604      	b.n	80051f4 <_strtod_l+0x43c>
 80055ea:	bf00      	nop
 80055ec:	08007e70 	.word	0x08007e70
 80055f0:	fffffc02 	.word	0xfffffc02
 80055f4:	465d      	mov	r5, fp
 80055f6:	f040 8086 	bne.w	8005706 <_strtod_l+0x94e>
 80055fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005600:	b32a      	cbz	r2, 800564e <_strtod_l+0x896>
 8005602:	4aaf      	ldr	r2, [pc, #700]	; (80058c0 <_strtod_l+0xb08>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d153      	bne.n	80056b0 <_strtod_l+0x8f8>
 8005608:	9b04      	ldr	r3, [sp, #16]
 800560a:	4650      	mov	r0, sl
 800560c:	b1d3      	cbz	r3, 8005644 <_strtod_l+0x88c>
 800560e:	4aad      	ldr	r2, [pc, #692]	; (80058c4 <_strtod_l+0xb0c>)
 8005610:	402a      	ands	r2, r5
 8005612:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005616:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800561a:	d816      	bhi.n	800564a <_strtod_l+0x892>
 800561c:	0d12      	lsrs	r2, r2, #20
 800561e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005622:	fa01 f303 	lsl.w	r3, r1, r3
 8005626:	4298      	cmp	r0, r3
 8005628:	d142      	bne.n	80056b0 <_strtod_l+0x8f8>
 800562a:	4ba7      	ldr	r3, [pc, #668]	; (80058c8 <_strtod_l+0xb10>)
 800562c:	429d      	cmp	r5, r3
 800562e:	d102      	bne.n	8005636 <_strtod_l+0x87e>
 8005630:	3001      	adds	r0, #1
 8005632:	f43f addf 	beq.w	80051f4 <_strtod_l+0x43c>
 8005636:	4ba3      	ldr	r3, [pc, #652]	; (80058c4 <_strtod_l+0xb0c>)
 8005638:	402b      	ands	r3, r5
 800563a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800563e:	f04f 0a00 	mov.w	sl, #0
 8005642:	e7a0      	b.n	8005586 <_strtod_l+0x7ce>
 8005644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005648:	e7ed      	b.n	8005626 <_strtod_l+0x86e>
 800564a:	460b      	mov	r3, r1
 800564c:	e7eb      	b.n	8005626 <_strtod_l+0x86e>
 800564e:	bb7b      	cbnz	r3, 80056b0 <_strtod_l+0x8f8>
 8005650:	f1ba 0f00 	cmp.w	sl, #0
 8005654:	d12c      	bne.n	80056b0 <_strtod_l+0x8f8>
 8005656:	9904      	ldr	r1, [sp, #16]
 8005658:	4a9a      	ldr	r2, [pc, #616]	; (80058c4 <_strtod_l+0xb0c>)
 800565a:	465b      	mov	r3, fp
 800565c:	b1f1      	cbz	r1, 800569c <_strtod_l+0x8e4>
 800565e:	ea02 010b 	and.w	r1, r2, fp
 8005662:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005666:	dc19      	bgt.n	800569c <_strtod_l+0x8e4>
 8005668:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800566c:	f77f ae5b 	ble.w	8005326 <_strtod_l+0x56e>
 8005670:	4a96      	ldr	r2, [pc, #600]	; (80058cc <_strtod_l+0xb14>)
 8005672:	2300      	movs	r3, #0
 8005674:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005678:	4650      	mov	r0, sl
 800567a:	4659      	mov	r1, fp
 800567c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005680:	f7fa ffba 	bl	80005f8 <__aeabi_dmul>
 8005684:	4682      	mov	sl, r0
 8005686:	468b      	mov	fp, r1
 8005688:	2900      	cmp	r1, #0
 800568a:	f47f adbe 	bne.w	800520a <_strtod_l+0x452>
 800568e:	2800      	cmp	r0, #0
 8005690:	f47f adbb 	bne.w	800520a <_strtod_l+0x452>
 8005694:	2322      	movs	r3, #34	; 0x22
 8005696:	f8c9 3000 	str.w	r3, [r9]
 800569a:	e5b6      	b.n	800520a <_strtod_l+0x452>
 800569c:	4013      	ands	r3, r2
 800569e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80056a2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80056a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80056aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80056ae:	e76a      	b.n	8005586 <_strtod_l+0x7ce>
 80056b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b2:	b193      	cbz	r3, 80056da <_strtod_l+0x922>
 80056b4:	422b      	tst	r3, r5
 80056b6:	f43f af66 	beq.w	8005586 <_strtod_l+0x7ce>
 80056ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056bc:	9a04      	ldr	r2, [sp, #16]
 80056be:	4650      	mov	r0, sl
 80056c0:	4659      	mov	r1, fp
 80056c2:	b173      	cbz	r3, 80056e2 <_strtod_l+0x92a>
 80056c4:	f7ff fb5c 	bl	8004d80 <sulp>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056d0:	f7fa fddc 	bl	800028c <__adddf3>
 80056d4:	4682      	mov	sl, r0
 80056d6:	468b      	mov	fp, r1
 80056d8:	e755      	b.n	8005586 <_strtod_l+0x7ce>
 80056da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056dc:	ea13 0f0a 	tst.w	r3, sl
 80056e0:	e7e9      	b.n	80056b6 <_strtod_l+0x8fe>
 80056e2:	f7ff fb4d 	bl	8004d80 <sulp>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056ee:	f7fa fdcb 	bl	8000288 <__aeabi_dsub>
 80056f2:	2200      	movs	r2, #0
 80056f4:	2300      	movs	r3, #0
 80056f6:	4682      	mov	sl, r0
 80056f8:	468b      	mov	fp, r1
 80056fa:	f7fb f9e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80056fe:	2800      	cmp	r0, #0
 8005700:	f47f ae11 	bne.w	8005326 <_strtod_l+0x56e>
 8005704:	e73f      	b.n	8005586 <_strtod_l+0x7ce>
 8005706:	4641      	mov	r1, r8
 8005708:	4620      	mov	r0, r4
 800570a:	f001 ff16 	bl	800753a <__ratio>
 800570e:	ec57 6b10 	vmov	r6, r7, d0
 8005712:	2200      	movs	r2, #0
 8005714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005718:	ee10 0a10 	vmov	r0, s0
 800571c:	4639      	mov	r1, r7
 800571e:	f7fb f9e7 	bl	8000af0 <__aeabi_dcmple>
 8005722:	2800      	cmp	r0, #0
 8005724:	d077      	beq.n	8005816 <_strtod_l+0xa5e>
 8005726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005728:	2b00      	cmp	r3, #0
 800572a:	d04a      	beq.n	80057c2 <_strtod_l+0xa0a>
 800572c:	4b68      	ldr	r3, [pc, #416]	; (80058d0 <_strtod_l+0xb18>)
 800572e:	2200      	movs	r2, #0
 8005730:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005734:	4f66      	ldr	r7, [pc, #408]	; (80058d0 <_strtod_l+0xb18>)
 8005736:	2600      	movs	r6, #0
 8005738:	4b62      	ldr	r3, [pc, #392]	; (80058c4 <_strtod_l+0xb0c>)
 800573a:	402b      	ands	r3, r5
 800573c:	930f      	str	r3, [sp, #60]	; 0x3c
 800573e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005740:	4b64      	ldr	r3, [pc, #400]	; (80058d4 <_strtod_l+0xb1c>)
 8005742:	429a      	cmp	r2, r3
 8005744:	f040 80ce 	bne.w	80058e4 <_strtod_l+0xb2c>
 8005748:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800574c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005750:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005754:	ec4b ab10 	vmov	d0, sl, fp
 8005758:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800575c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005760:	f001 fe26 	bl	80073b0 <__ulp>
 8005764:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005768:	ec53 2b10 	vmov	r2, r3, d0
 800576c:	f7fa ff44 	bl	80005f8 <__aeabi_dmul>
 8005770:	4652      	mov	r2, sl
 8005772:	465b      	mov	r3, fp
 8005774:	f7fa fd8a 	bl	800028c <__adddf3>
 8005778:	460b      	mov	r3, r1
 800577a:	4952      	ldr	r1, [pc, #328]	; (80058c4 <_strtod_l+0xb0c>)
 800577c:	4a56      	ldr	r2, [pc, #344]	; (80058d8 <_strtod_l+0xb20>)
 800577e:	4019      	ands	r1, r3
 8005780:	4291      	cmp	r1, r2
 8005782:	4682      	mov	sl, r0
 8005784:	d95b      	bls.n	800583e <_strtod_l+0xa86>
 8005786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005788:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800578c:	4293      	cmp	r3, r2
 800578e:	d103      	bne.n	8005798 <_strtod_l+0x9e0>
 8005790:	9b08      	ldr	r3, [sp, #32]
 8005792:	3301      	adds	r3, #1
 8005794:	f43f ad2e 	beq.w	80051f4 <_strtod_l+0x43c>
 8005798:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80058c8 <_strtod_l+0xb10>
 800579c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80057a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057a2:	4648      	mov	r0, r9
 80057a4:	f001 fb6d 	bl	8006e82 <_Bfree>
 80057a8:	9905      	ldr	r1, [sp, #20]
 80057aa:	4648      	mov	r0, r9
 80057ac:	f001 fb69 	bl	8006e82 <_Bfree>
 80057b0:	4641      	mov	r1, r8
 80057b2:	4648      	mov	r0, r9
 80057b4:	f001 fb65 	bl	8006e82 <_Bfree>
 80057b8:	4621      	mov	r1, r4
 80057ba:	4648      	mov	r0, r9
 80057bc:	f001 fb61 	bl	8006e82 <_Bfree>
 80057c0:	e619      	b.n	80053f6 <_strtod_l+0x63e>
 80057c2:	f1ba 0f00 	cmp.w	sl, #0
 80057c6:	d11a      	bne.n	80057fe <_strtod_l+0xa46>
 80057c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057cc:	b9eb      	cbnz	r3, 800580a <_strtod_l+0xa52>
 80057ce:	2200      	movs	r2, #0
 80057d0:	4b3f      	ldr	r3, [pc, #252]	; (80058d0 <_strtod_l+0xb18>)
 80057d2:	4630      	mov	r0, r6
 80057d4:	4639      	mov	r1, r7
 80057d6:	f7fb f981 	bl	8000adc <__aeabi_dcmplt>
 80057da:	b9c8      	cbnz	r0, 8005810 <_strtod_l+0xa58>
 80057dc:	4630      	mov	r0, r6
 80057de:	4639      	mov	r1, r7
 80057e0:	2200      	movs	r2, #0
 80057e2:	4b3e      	ldr	r3, [pc, #248]	; (80058dc <_strtod_l+0xb24>)
 80057e4:	f7fa ff08 	bl	80005f8 <__aeabi_dmul>
 80057e8:	4606      	mov	r6, r0
 80057ea:	460f      	mov	r7, r1
 80057ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80057f0:	9618      	str	r6, [sp, #96]	; 0x60
 80057f2:	9319      	str	r3, [sp, #100]	; 0x64
 80057f4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80057f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80057fc:	e79c      	b.n	8005738 <_strtod_l+0x980>
 80057fe:	f1ba 0f01 	cmp.w	sl, #1
 8005802:	d102      	bne.n	800580a <_strtod_l+0xa52>
 8005804:	2d00      	cmp	r5, #0
 8005806:	f43f ad8e 	beq.w	8005326 <_strtod_l+0x56e>
 800580a:	2200      	movs	r2, #0
 800580c:	4b34      	ldr	r3, [pc, #208]	; (80058e0 <_strtod_l+0xb28>)
 800580e:	e78f      	b.n	8005730 <_strtod_l+0x978>
 8005810:	2600      	movs	r6, #0
 8005812:	4f32      	ldr	r7, [pc, #200]	; (80058dc <_strtod_l+0xb24>)
 8005814:	e7ea      	b.n	80057ec <_strtod_l+0xa34>
 8005816:	4b31      	ldr	r3, [pc, #196]	; (80058dc <_strtod_l+0xb24>)
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	2200      	movs	r2, #0
 800581e:	f7fa feeb 	bl	80005f8 <__aeabi_dmul>
 8005822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005824:	4606      	mov	r6, r0
 8005826:	460f      	mov	r7, r1
 8005828:	b933      	cbnz	r3, 8005838 <_strtod_l+0xa80>
 800582a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800582e:	9010      	str	r0, [sp, #64]	; 0x40
 8005830:	9311      	str	r3, [sp, #68]	; 0x44
 8005832:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005836:	e7df      	b.n	80057f8 <_strtod_l+0xa40>
 8005838:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800583c:	e7f9      	b.n	8005832 <_strtod_l+0xa7a>
 800583e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005842:	9b04      	ldr	r3, [sp, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1ab      	bne.n	80057a0 <_strtod_l+0x9e8>
 8005848:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800584c:	0d1b      	lsrs	r3, r3, #20
 800584e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005850:	051b      	lsls	r3, r3, #20
 8005852:	429a      	cmp	r2, r3
 8005854:	465d      	mov	r5, fp
 8005856:	d1a3      	bne.n	80057a0 <_strtod_l+0x9e8>
 8005858:	4639      	mov	r1, r7
 800585a:	4630      	mov	r0, r6
 800585c:	f7fb f97c 	bl	8000b58 <__aeabi_d2iz>
 8005860:	f7fa fe60 	bl	8000524 <__aeabi_i2d>
 8005864:	460b      	mov	r3, r1
 8005866:	4602      	mov	r2, r0
 8005868:	4639      	mov	r1, r7
 800586a:	4630      	mov	r0, r6
 800586c:	f7fa fd0c 	bl	8000288 <__aeabi_dsub>
 8005870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005872:	4606      	mov	r6, r0
 8005874:	460f      	mov	r7, r1
 8005876:	b933      	cbnz	r3, 8005886 <_strtod_l+0xace>
 8005878:	f1ba 0f00 	cmp.w	sl, #0
 800587c:	d103      	bne.n	8005886 <_strtod_l+0xace>
 800587e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005882:	2d00      	cmp	r5, #0
 8005884:	d06d      	beq.n	8005962 <_strtod_l+0xbaa>
 8005886:	a30a      	add	r3, pc, #40	; (adr r3, 80058b0 <_strtod_l+0xaf8>)
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	4630      	mov	r0, r6
 800588e:	4639      	mov	r1, r7
 8005890:	f7fb f924 	bl	8000adc <__aeabi_dcmplt>
 8005894:	2800      	cmp	r0, #0
 8005896:	f47f acb8 	bne.w	800520a <_strtod_l+0x452>
 800589a:	a307      	add	r3, pc, #28	; (adr r3, 80058b8 <_strtod_l+0xb00>)
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	4630      	mov	r0, r6
 80058a2:	4639      	mov	r1, r7
 80058a4:	f7fb f938 	bl	8000b18 <__aeabi_dcmpgt>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	f43f af79 	beq.w	80057a0 <_strtod_l+0x9e8>
 80058ae:	e4ac      	b.n	800520a <_strtod_l+0x452>
 80058b0:	94a03595 	.word	0x94a03595
 80058b4:	3fdfffff 	.word	0x3fdfffff
 80058b8:	35afe535 	.word	0x35afe535
 80058bc:	3fe00000 	.word	0x3fe00000
 80058c0:	000fffff 	.word	0x000fffff
 80058c4:	7ff00000 	.word	0x7ff00000
 80058c8:	7fefffff 	.word	0x7fefffff
 80058cc:	39500000 	.word	0x39500000
 80058d0:	3ff00000 	.word	0x3ff00000
 80058d4:	7fe00000 	.word	0x7fe00000
 80058d8:	7c9fffff 	.word	0x7c9fffff
 80058dc:	3fe00000 	.word	0x3fe00000
 80058e0:	bff00000 	.word	0xbff00000
 80058e4:	9b04      	ldr	r3, [sp, #16]
 80058e6:	b333      	cbz	r3, 8005936 <_strtod_l+0xb7e>
 80058e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058ea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80058ee:	d822      	bhi.n	8005936 <_strtod_l+0xb7e>
 80058f0:	a327      	add	r3, pc, #156	; (adr r3, 8005990 <_strtod_l+0xbd8>)
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	4630      	mov	r0, r6
 80058f8:	4639      	mov	r1, r7
 80058fa:	f7fb f8f9 	bl	8000af0 <__aeabi_dcmple>
 80058fe:	b1a0      	cbz	r0, 800592a <_strtod_l+0xb72>
 8005900:	4639      	mov	r1, r7
 8005902:	4630      	mov	r0, r6
 8005904:	f7fb f950 	bl	8000ba8 <__aeabi_d2uiz>
 8005908:	2800      	cmp	r0, #0
 800590a:	bf08      	it	eq
 800590c:	2001      	moveq	r0, #1
 800590e:	f7fa fdf9 	bl	8000504 <__aeabi_ui2d>
 8005912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005914:	4606      	mov	r6, r0
 8005916:	460f      	mov	r7, r1
 8005918:	bb03      	cbnz	r3, 800595c <_strtod_l+0xba4>
 800591a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800591e:	9012      	str	r0, [sp, #72]	; 0x48
 8005920:	9313      	str	r3, [sp, #76]	; 0x4c
 8005922:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005926:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800592a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800592c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800592e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	930b      	str	r3, [sp, #44]	; 0x2c
 8005936:	ed9d 0b08 	vldr	d0, [sp, #32]
 800593a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800593e:	f001 fd37 	bl	80073b0 <__ulp>
 8005942:	4650      	mov	r0, sl
 8005944:	ec53 2b10 	vmov	r2, r3, d0
 8005948:	4659      	mov	r1, fp
 800594a:	f7fa fe55 	bl	80005f8 <__aeabi_dmul>
 800594e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005952:	f7fa fc9b 	bl	800028c <__adddf3>
 8005956:	4682      	mov	sl, r0
 8005958:	468b      	mov	fp, r1
 800595a:	e772      	b.n	8005842 <_strtod_l+0xa8a>
 800595c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005960:	e7df      	b.n	8005922 <_strtod_l+0xb6a>
 8005962:	a30d      	add	r3, pc, #52	; (adr r3, 8005998 <_strtod_l+0xbe0>)
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	f7fb f8b8 	bl	8000adc <__aeabi_dcmplt>
 800596c:	e79c      	b.n	80058a8 <_strtod_l+0xaf0>
 800596e:	2300      	movs	r3, #0
 8005970:	930d      	str	r3, [sp, #52]	; 0x34
 8005972:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	f7ff ba61 	b.w	8004e3e <_strtod_l+0x86>
 800597c:	2b65      	cmp	r3, #101	; 0x65
 800597e:	f04f 0200 	mov.w	r2, #0
 8005982:	f43f ab4e 	beq.w	8005022 <_strtod_l+0x26a>
 8005986:	2101      	movs	r1, #1
 8005988:	4614      	mov	r4, r2
 800598a:	9104      	str	r1, [sp, #16]
 800598c:	f7ff bacb 	b.w	8004f26 <_strtod_l+0x16e>
 8005990:	ffc00000 	.word	0xffc00000
 8005994:	41dfffff 	.word	0x41dfffff
 8005998:	94a03595 	.word	0x94a03595
 800599c:	3fcfffff 	.word	0x3fcfffff

080059a0 <_strtod_r>:
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <_strtod_r+0x18>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	b410      	push	{r4}
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	4c04      	ldr	r4, [pc, #16]	; (80059bc <_strtod_r+0x1c>)
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	bf08      	it	eq
 80059ae:	4623      	moveq	r3, r4
 80059b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059b4:	f7ff ba00 	b.w	8004db8 <_strtod_l>
 80059b8:	20000184 	.word	0x20000184
 80059bc:	200001e8 	.word	0x200001e8

080059c0 <_strtol_l.isra.0>:
 80059c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c4:	4680      	mov	r8, r0
 80059c6:	4689      	mov	r9, r1
 80059c8:	4692      	mov	sl, r2
 80059ca:	461e      	mov	r6, r3
 80059cc:	460f      	mov	r7, r1
 80059ce:	463d      	mov	r5, r7
 80059d0:	9808      	ldr	r0, [sp, #32]
 80059d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059d6:	f001 f9ed 	bl	8006db4 <__locale_ctype_ptr_l>
 80059da:	4420      	add	r0, r4
 80059dc:	7843      	ldrb	r3, [r0, #1]
 80059de:	f013 0308 	ands.w	r3, r3, #8
 80059e2:	d132      	bne.n	8005a4a <_strtol_l.isra.0+0x8a>
 80059e4:	2c2d      	cmp	r4, #45	; 0x2d
 80059e6:	d132      	bne.n	8005a4e <_strtol_l.isra.0+0x8e>
 80059e8:	787c      	ldrb	r4, [r7, #1]
 80059ea:	1cbd      	adds	r5, r7, #2
 80059ec:	2201      	movs	r2, #1
 80059ee:	2e00      	cmp	r6, #0
 80059f0:	d05d      	beq.n	8005aae <_strtol_l.isra.0+0xee>
 80059f2:	2e10      	cmp	r6, #16
 80059f4:	d109      	bne.n	8005a0a <_strtol_l.isra.0+0x4a>
 80059f6:	2c30      	cmp	r4, #48	; 0x30
 80059f8:	d107      	bne.n	8005a0a <_strtol_l.isra.0+0x4a>
 80059fa:	782b      	ldrb	r3, [r5, #0]
 80059fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a00:	2b58      	cmp	r3, #88	; 0x58
 8005a02:	d14f      	bne.n	8005aa4 <_strtol_l.isra.0+0xe4>
 8005a04:	786c      	ldrb	r4, [r5, #1]
 8005a06:	2610      	movs	r6, #16
 8005a08:	3502      	adds	r5, #2
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	bf14      	ite	ne
 8005a0e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005a12:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005a16:	2700      	movs	r7, #0
 8005a18:	fbb1 fcf6 	udiv	ip, r1, r6
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005a22:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005a26:	2b09      	cmp	r3, #9
 8005a28:	d817      	bhi.n	8005a5a <_strtol_l.isra.0+0x9a>
 8005a2a:	461c      	mov	r4, r3
 8005a2c:	42a6      	cmp	r6, r4
 8005a2e:	dd23      	ble.n	8005a78 <_strtol_l.isra.0+0xb8>
 8005a30:	1c7b      	adds	r3, r7, #1
 8005a32:	d007      	beq.n	8005a44 <_strtol_l.isra.0+0x84>
 8005a34:	4584      	cmp	ip, r0
 8005a36:	d31c      	bcc.n	8005a72 <_strtol_l.isra.0+0xb2>
 8005a38:	d101      	bne.n	8005a3e <_strtol_l.isra.0+0x7e>
 8005a3a:	45a6      	cmp	lr, r4
 8005a3c:	db19      	blt.n	8005a72 <_strtol_l.isra.0+0xb2>
 8005a3e:	fb00 4006 	mla	r0, r0, r6, r4
 8005a42:	2701      	movs	r7, #1
 8005a44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a48:	e7eb      	b.n	8005a22 <_strtol_l.isra.0+0x62>
 8005a4a:	462f      	mov	r7, r5
 8005a4c:	e7bf      	b.n	80059ce <_strtol_l.isra.0+0xe>
 8005a4e:	2c2b      	cmp	r4, #43	; 0x2b
 8005a50:	bf04      	itt	eq
 8005a52:	1cbd      	addeq	r5, r7, #2
 8005a54:	787c      	ldrbeq	r4, [r7, #1]
 8005a56:	461a      	mov	r2, r3
 8005a58:	e7c9      	b.n	80059ee <_strtol_l.isra.0+0x2e>
 8005a5a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005a5e:	2b19      	cmp	r3, #25
 8005a60:	d801      	bhi.n	8005a66 <_strtol_l.isra.0+0xa6>
 8005a62:	3c37      	subs	r4, #55	; 0x37
 8005a64:	e7e2      	b.n	8005a2c <_strtol_l.isra.0+0x6c>
 8005a66:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005a6a:	2b19      	cmp	r3, #25
 8005a6c:	d804      	bhi.n	8005a78 <_strtol_l.isra.0+0xb8>
 8005a6e:	3c57      	subs	r4, #87	; 0x57
 8005a70:	e7dc      	b.n	8005a2c <_strtol_l.isra.0+0x6c>
 8005a72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005a76:	e7e5      	b.n	8005a44 <_strtol_l.isra.0+0x84>
 8005a78:	1c7b      	adds	r3, r7, #1
 8005a7a:	d108      	bne.n	8005a8e <_strtol_l.isra.0+0xce>
 8005a7c:	2322      	movs	r3, #34	; 0x22
 8005a7e:	f8c8 3000 	str.w	r3, [r8]
 8005a82:	4608      	mov	r0, r1
 8005a84:	f1ba 0f00 	cmp.w	sl, #0
 8005a88:	d107      	bne.n	8005a9a <_strtol_l.isra.0+0xda>
 8005a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8e:	b102      	cbz	r2, 8005a92 <_strtol_l.isra.0+0xd2>
 8005a90:	4240      	negs	r0, r0
 8005a92:	f1ba 0f00 	cmp.w	sl, #0
 8005a96:	d0f8      	beq.n	8005a8a <_strtol_l.isra.0+0xca>
 8005a98:	b10f      	cbz	r7, 8005a9e <_strtol_l.isra.0+0xde>
 8005a9a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005a9e:	f8ca 9000 	str.w	r9, [sl]
 8005aa2:	e7f2      	b.n	8005a8a <_strtol_l.isra.0+0xca>
 8005aa4:	2430      	movs	r4, #48	; 0x30
 8005aa6:	2e00      	cmp	r6, #0
 8005aa8:	d1af      	bne.n	8005a0a <_strtol_l.isra.0+0x4a>
 8005aaa:	2608      	movs	r6, #8
 8005aac:	e7ad      	b.n	8005a0a <_strtol_l.isra.0+0x4a>
 8005aae:	2c30      	cmp	r4, #48	; 0x30
 8005ab0:	d0a3      	beq.n	80059fa <_strtol_l.isra.0+0x3a>
 8005ab2:	260a      	movs	r6, #10
 8005ab4:	e7a9      	b.n	8005a0a <_strtol_l.isra.0+0x4a>
	...

08005ab8 <_strtol_r>:
 8005ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aba:	4c06      	ldr	r4, [pc, #24]	; (8005ad4 <_strtol_r+0x1c>)
 8005abc:	4d06      	ldr	r5, [pc, #24]	; (8005ad8 <_strtol_r+0x20>)
 8005abe:	6824      	ldr	r4, [r4, #0]
 8005ac0:	6a24      	ldr	r4, [r4, #32]
 8005ac2:	2c00      	cmp	r4, #0
 8005ac4:	bf08      	it	eq
 8005ac6:	462c      	moveq	r4, r5
 8005ac8:	9400      	str	r4, [sp, #0]
 8005aca:	f7ff ff79 	bl	80059c0 <_strtol_l.isra.0>
 8005ace:	b003      	add	sp, #12
 8005ad0:	bd30      	pop	{r4, r5, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000184 	.word	0x20000184
 8005ad8:	200001e8 	.word	0x200001e8

08005adc <quorem>:
 8005adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae0:	6903      	ldr	r3, [r0, #16]
 8005ae2:	690c      	ldr	r4, [r1, #16]
 8005ae4:	42a3      	cmp	r3, r4
 8005ae6:	4680      	mov	r8, r0
 8005ae8:	f2c0 8082 	blt.w	8005bf0 <quorem+0x114>
 8005aec:	3c01      	subs	r4, #1
 8005aee:	f101 0714 	add.w	r7, r1, #20
 8005af2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005af6:	f100 0614 	add.w	r6, r0, #20
 8005afa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005afe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005b02:	eb06 030c 	add.w	r3, r6, ip
 8005b06:	3501      	adds	r5, #1
 8005b08:	eb07 090c 	add.w	r9, r7, ip
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b12:	b395      	cbz	r5, 8005b7a <quorem+0x9e>
 8005b14:	f04f 0a00 	mov.w	sl, #0
 8005b18:	4638      	mov	r0, r7
 8005b1a:	46b6      	mov	lr, r6
 8005b1c:	46d3      	mov	fp, sl
 8005b1e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b22:	b293      	uxth	r3, r2
 8005b24:	fb05 a303 	mla	r3, r5, r3, sl
 8005b28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	ebab 0303 	sub.w	r3, fp, r3
 8005b32:	0c12      	lsrs	r2, r2, #16
 8005b34:	f8de b000 	ldr.w	fp, [lr]
 8005b38:	fb05 a202 	mla	r2, r5, r2, sl
 8005b3c:	fa13 f38b 	uxtah	r3, r3, fp
 8005b40:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005b44:	fa1f fb82 	uxth.w	fp, r2
 8005b48:	f8de 2000 	ldr.w	r2, [lr]
 8005b4c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005b50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b5a:	4581      	cmp	r9, r0
 8005b5c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005b60:	f84e 3b04 	str.w	r3, [lr], #4
 8005b64:	d2db      	bcs.n	8005b1e <quorem+0x42>
 8005b66:	f856 300c 	ldr.w	r3, [r6, ip]
 8005b6a:	b933      	cbnz	r3, 8005b7a <quorem+0x9e>
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	3b04      	subs	r3, #4
 8005b70:	429e      	cmp	r6, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	d330      	bcc.n	8005bd8 <quorem+0xfc>
 8005b76:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	f001 fba0 	bl	80072c0 <__mcmp>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	db25      	blt.n	8005bd0 <quorem+0xf4>
 8005b84:	3501      	adds	r5, #1
 8005b86:	4630      	mov	r0, r6
 8005b88:	f04f 0c00 	mov.w	ip, #0
 8005b8c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005b90:	f8d0 e000 	ldr.w	lr, [r0]
 8005b94:	b293      	uxth	r3, r2
 8005b96:	ebac 0303 	sub.w	r3, ip, r3
 8005b9a:	0c12      	lsrs	r2, r2, #16
 8005b9c:	fa13 f38e 	uxtah	r3, r3, lr
 8005ba0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ba4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bae:	45b9      	cmp	r9, r7
 8005bb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005bb4:	f840 3b04 	str.w	r3, [r0], #4
 8005bb8:	d2e8      	bcs.n	8005b8c <quorem+0xb0>
 8005bba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005bbe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005bc2:	b92a      	cbnz	r2, 8005bd0 <quorem+0xf4>
 8005bc4:	3b04      	subs	r3, #4
 8005bc6:	429e      	cmp	r6, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	d30b      	bcc.n	8005be4 <quorem+0x108>
 8005bcc:	f8c8 4010 	str.w	r4, [r8, #16]
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	b003      	add	sp, #12
 8005bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	3b04      	subs	r3, #4
 8005bdc:	2a00      	cmp	r2, #0
 8005bde:	d1ca      	bne.n	8005b76 <quorem+0x9a>
 8005be0:	3c01      	subs	r4, #1
 8005be2:	e7c5      	b.n	8005b70 <quorem+0x94>
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	3b04      	subs	r3, #4
 8005be8:	2a00      	cmp	r2, #0
 8005bea:	d1ef      	bne.n	8005bcc <quorem+0xf0>
 8005bec:	3c01      	subs	r4, #1
 8005bee:	e7ea      	b.n	8005bc6 <quorem+0xea>
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	e7ee      	b.n	8005bd2 <quorem+0xf6>
 8005bf4:	0000      	movs	r0, r0
	...

08005bf8 <_dtoa_r>:
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	ec57 6b10 	vmov	r6, r7, d0
 8005c00:	b097      	sub	sp, #92	; 0x5c
 8005c02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c04:	9106      	str	r1, [sp, #24]
 8005c06:	4604      	mov	r4, r0
 8005c08:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c0a:	9312      	str	r3, [sp, #72]	; 0x48
 8005c0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005c10:	e9cd 6700 	strd	r6, r7, [sp]
 8005c14:	b93d      	cbnz	r5, 8005c26 <_dtoa_r+0x2e>
 8005c16:	2010      	movs	r0, #16
 8005c18:	f7fe f97e 	bl	8003f18 <malloc>
 8005c1c:	6260      	str	r0, [r4, #36]	; 0x24
 8005c1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c22:	6005      	str	r5, [r0, #0]
 8005c24:	60c5      	str	r5, [r0, #12]
 8005c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c28:	6819      	ldr	r1, [r3, #0]
 8005c2a:	b151      	cbz	r1, 8005c42 <_dtoa_r+0x4a>
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	604a      	str	r2, [r1, #4]
 8005c30:	2301      	movs	r3, #1
 8005c32:	4093      	lsls	r3, r2
 8005c34:	608b      	str	r3, [r1, #8]
 8005c36:	4620      	mov	r0, r4
 8005c38:	f001 f923 	bl	8006e82 <_Bfree>
 8005c3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	1e3b      	subs	r3, r7, #0
 8005c44:	bfbb      	ittet	lt
 8005c46:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c4a:	9301      	strlt	r3, [sp, #4]
 8005c4c:	2300      	movge	r3, #0
 8005c4e:	2201      	movlt	r2, #1
 8005c50:	bfac      	ite	ge
 8005c52:	f8c8 3000 	strge.w	r3, [r8]
 8005c56:	f8c8 2000 	strlt.w	r2, [r8]
 8005c5a:	4baf      	ldr	r3, [pc, #700]	; (8005f18 <_dtoa_r+0x320>)
 8005c5c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c60:	ea33 0308 	bics.w	r3, r3, r8
 8005c64:	d114      	bne.n	8005c90 <_dtoa_r+0x98>
 8005c66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c68:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	9b00      	ldr	r3, [sp, #0]
 8005c70:	b923      	cbnz	r3, 8005c7c <_dtoa_r+0x84>
 8005c72:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005c76:	2800      	cmp	r0, #0
 8005c78:	f000 8542 	beq.w	8006700 <_dtoa_r+0xb08>
 8005c7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c7e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005f2c <_dtoa_r+0x334>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8544 	beq.w	8006710 <_dtoa_r+0xb18>
 8005c88:	f10b 0303 	add.w	r3, fp, #3
 8005c8c:	f000 bd3e 	b.w	800670c <_dtoa_r+0xb14>
 8005c90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005c94:	2200      	movs	r2, #0
 8005c96:	2300      	movs	r3, #0
 8005c98:	4630      	mov	r0, r6
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	f7fa ff14 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ca0:	4681      	mov	r9, r0
 8005ca2:	b168      	cbz	r0, 8005cc0 <_dtoa_r+0xc8>
 8005ca4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8524 	beq.w	80066fa <_dtoa_r+0xb02>
 8005cb2:	4b9a      	ldr	r3, [pc, #616]	; (8005f1c <_dtoa_r+0x324>)
 8005cb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cb6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	f000 bd28 	b.w	8006710 <_dtoa_r+0xb18>
 8005cc0:	aa14      	add	r2, sp, #80	; 0x50
 8005cc2:	a915      	add	r1, sp, #84	; 0x54
 8005cc4:	ec47 6b10 	vmov	d0, r6, r7
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f001 fbe7 	bl	800749c <__d2b>
 8005cce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005cd2:	9004      	str	r0, [sp, #16]
 8005cd4:	2d00      	cmp	r5, #0
 8005cd6:	d07c      	beq.n	8005dd2 <_dtoa_r+0x1da>
 8005cd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cdc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005ce0:	46b2      	mov	sl, r6
 8005ce2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005ce6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005cea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005cee:	2200      	movs	r2, #0
 8005cf0:	4b8b      	ldr	r3, [pc, #556]	; (8005f20 <_dtoa_r+0x328>)
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	4659      	mov	r1, fp
 8005cf6:	f7fa fac7 	bl	8000288 <__aeabi_dsub>
 8005cfa:	a381      	add	r3, pc, #516	; (adr r3, 8005f00 <_dtoa_r+0x308>)
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f7fa fc7a 	bl	80005f8 <__aeabi_dmul>
 8005d04:	a380      	add	r3, pc, #512	; (adr r3, 8005f08 <_dtoa_r+0x310>)
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f7fa fabf 	bl	800028c <__adddf3>
 8005d0e:	4606      	mov	r6, r0
 8005d10:	4628      	mov	r0, r5
 8005d12:	460f      	mov	r7, r1
 8005d14:	f7fa fc06 	bl	8000524 <__aeabi_i2d>
 8005d18:	a37d      	add	r3, pc, #500	; (adr r3, 8005f10 <_dtoa_r+0x318>)
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f7fa fc6b 	bl	80005f8 <__aeabi_dmul>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4630      	mov	r0, r6
 8005d28:	4639      	mov	r1, r7
 8005d2a:	f7fa faaf 	bl	800028c <__adddf3>
 8005d2e:	4606      	mov	r6, r0
 8005d30:	460f      	mov	r7, r1
 8005d32:	f7fa ff11 	bl	8000b58 <__aeabi_d2iz>
 8005d36:	2200      	movs	r2, #0
 8005d38:	4682      	mov	sl, r0
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	4630      	mov	r0, r6
 8005d3e:	4639      	mov	r1, r7
 8005d40:	f7fa fecc 	bl	8000adc <__aeabi_dcmplt>
 8005d44:	b148      	cbz	r0, 8005d5a <_dtoa_r+0x162>
 8005d46:	4650      	mov	r0, sl
 8005d48:	f7fa fbec 	bl	8000524 <__aeabi_i2d>
 8005d4c:	4632      	mov	r2, r6
 8005d4e:	463b      	mov	r3, r7
 8005d50:	f7fa feba 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d54:	b908      	cbnz	r0, 8005d5a <_dtoa_r+0x162>
 8005d56:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005d5a:	f1ba 0f16 	cmp.w	sl, #22
 8005d5e:	d859      	bhi.n	8005e14 <_dtoa_r+0x21c>
 8005d60:	4970      	ldr	r1, [pc, #448]	; (8005f24 <_dtoa_r+0x32c>)
 8005d62:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005d66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d6e:	f7fa fed3 	bl	8000b18 <__aeabi_dcmpgt>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d050      	beq.n	8005e18 <_dtoa_r+0x220>
 8005d76:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d80:	1b5d      	subs	r5, r3, r5
 8005d82:	f1b5 0801 	subs.w	r8, r5, #1
 8005d86:	bf49      	itett	mi
 8005d88:	f1c5 0301 	rsbmi	r3, r5, #1
 8005d8c:	2300      	movpl	r3, #0
 8005d8e:	9305      	strmi	r3, [sp, #20]
 8005d90:	f04f 0800 	movmi.w	r8, #0
 8005d94:	bf58      	it	pl
 8005d96:	9305      	strpl	r3, [sp, #20]
 8005d98:	f1ba 0f00 	cmp.w	sl, #0
 8005d9c:	db3e      	blt.n	8005e1c <_dtoa_r+0x224>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	44d0      	add	r8, sl
 8005da2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005da6:	9307      	str	r3, [sp, #28]
 8005da8:	9b06      	ldr	r3, [sp, #24]
 8005daa:	2b09      	cmp	r3, #9
 8005dac:	f200 8090 	bhi.w	8005ed0 <_dtoa_r+0x2d8>
 8005db0:	2b05      	cmp	r3, #5
 8005db2:	bfc4      	itt	gt
 8005db4:	3b04      	subgt	r3, #4
 8005db6:	9306      	strgt	r3, [sp, #24]
 8005db8:	9b06      	ldr	r3, [sp, #24]
 8005dba:	f1a3 0302 	sub.w	r3, r3, #2
 8005dbe:	bfcc      	ite	gt
 8005dc0:	2500      	movgt	r5, #0
 8005dc2:	2501      	movle	r5, #1
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	f200 808f 	bhi.w	8005ee8 <_dtoa_r+0x2f0>
 8005dca:	e8df f003 	tbb	[pc, r3]
 8005dce:	7f7d      	.short	0x7f7d
 8005dd0:	7131      	.short	0x7131
 8005dd2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005dd6:	441d      	add	r5, r3
 8005dd8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005ddc:	2820      	cmp	r0, #32
 8005dde:	dd13      	ble.n	8005e08 <_dtoa_r+0x210>
 8005de0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005de4:	9b00      	ldr	r3, [sp, #0]
 8005de6:	fa08 f800 	lsl.w	r8, r8, r0
 8005dea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005dee:	fa23 f000 	lsr.w	r0, r3, r0
 8005df2:	ea48 0000 	orr.w	r0, r8, r0
 8005df6:	f7fa fb85 	bl	8000504 <__aeabi_ui2d>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4682      	mov	sl, r0
 8005dfe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005e02:	3d01      	subs	r5, #1
 8005e04:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e06:	e772      	b.n	8005cee <_dtoa_r+0xf6>
 8005e08:	9b00      	ldr	r3, [sp, #0]
 8005e0a:	f1c0 0020 	rsb	r0, r0, #32
 8005e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e12:	e7f0      	b.n	8005df6 <_dtoa_r+0x1fe>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e7b1      	b.n	8005d7c <_dtoa_r+0x184>
 8005e18:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e1a:	e7b0      	b.n	8005d7e <_dtoa_r+0x186>
 8005e1c:	9b05      	ldr	r3, [sp, #20]
 8005e1e:	eba3 030a 	sub.w	r3, r3, sl
 8005e22:	9305      	str	r3, [sp, #20]
 8005e24:	f1ca 0300 	rsb	r3, sl, #0
 8005e28:	9307      	str	r3, [sp, #28]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	930e      	str	r3, [sp, #56]	; 0x38
 8005e2e:	e7bb      	b.n	8005da8 <_dtoa_r+0x1b0>
 8005e30:	2301      	movs	r3, #1
 8005e32:	930a      	str	r3, [sp, #40]	; 0x28
 8005e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	dd59      	ble.n	8005eee <_dtoa_r+0x2f6>
 8005e3a:	9302      	str	r3, [sp, #8]
 8005e3c:	4699      	mov	r9, r3
 8005e3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e40:	2200      	movs	r2, #0
 8005e42:	6072      	str	r2, [r6, #4]
 8005e44:	2204      	movs	r2, #4
 8005e46:	f102 0014 	add.w	r0, r2, #20
 8005e4a:	4298      	cmp	r0, r3
 8005e4c:	6871      	ldr	r1, [r6, #4]
 8005e4e:	d953      	bls.n	8005ef8 <_dtoa_r+0x300>
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 ffe2 	bl	8006e1a <_Balloc>
 8005e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e58:	6030      	str	r0, [r6, #0]
 8005e5a:	f1b9 0f0e 	cmp.w	r9, #14
 8005e5e:	f8d3 b000 	ldr.w	fp, [r3]
 8005e62:	f200 80e6 	bhi.w	8006032 <_dtoa_r+0x43a>
 8005e66:	2d00      	cmp	r5, #0
 8005e68:	f000 80e3 	beq.w	8006032 <_dtoa_r+0x43a>
 8005e6c:	ed9d 7b00 	vldr	d7, [sp]
 8005e70:	f1ba 0f00 	cmp.w	sl, #0
 8005e74:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005e78:	dd74      	ble.n	8005f64 <_dtoa_r+0x36c>
 8005e7a:	4a2a      	ldr	r2, [pc, #168]	; (8005f24 <_dtoa_r+0x32c>)
 8005e7c:	f00a 030f 	and.w	r3, sl, #15
 8005e80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e84:	ed93 7b00 	vldr	d7, [r3]
 8005e88:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005e8c:	06f0      	lsls	r0, r6, #27
 8005e8e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005e92:	d565      	bpl.n	8005f60 <_dtoa_r+0x368>
 8005e94:	4b24      	ldr	r3, [pc, #144]	; (8005f28 <_dtoa_r+0x330>)
 8005e96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e9a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e9e:	f7fa fcd5 	bl	800084c <__aeabi_ddiv>
 8005ea2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ea6:	f006 060f 	and.w	r6, r6, #15
 8005eaa:	2503      	movs	r5, #3
 8005eac:	4f1e      	ldr	r7, [pc, #120]	; (8005f28 <_dtoa_r+0x330>)
 8005eae:	e04c      	b.n	8005f4a <_dtoa_r+0x352>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8005eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb6:	4453      	add	r3, sl
 8005eb8:	f103 0901 	add.w	r9, r3, #1
 8005ebc:	9302      	str	r3, [sp, #8]
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	bfb8      	it	lt
 8005ec4:	2301      	movlt	r3, #1
 8005ec6:	e7ba      	b.n	8005e3e <_dtoa_r+0x246>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e7b2      	b.n	8005e32 <_dtoa_r+0x23a>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	e7f0      	b.n	8005eb2 <_dtoa_r+0x2ba>
 8005ed0:	2501      	movs	r5, #1
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9306      	str	r3, [sp, #24]
 8005ed6:	950a      	str	r5, [sp, #40]	; 0x28
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005edc:	9302      	str	r3, [sp, #8]
 8005ede:	4699      	mov	r9, r3
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2312      	movs	r3, #18
 8005ee4:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ee6:	e7aa      	b.n	8005e3e <_dtoa_r+0x246>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	930a      	str	r3, [sp, #40]	; 0x28
 8005eec:	e7f4      	b.n	8005ed8 <_dtoa_r+0x2e0>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	9302      	str	r3, [sp, #8]
 8005ef2:	4699      	mov	r9, r3
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	e7f5      	b.n	8005ee4 <_dtoa_r+0x2ec>
 8005ef8:	3101      	adds	r1, #1
 8005efa:	6071      	str	r1, [r6, #4]
 8005efc:	0052      	lsls	r2, r2, #1
 8005efe:	e7a2      	b.n	8005e46 <_dtoa_r+0x24e>
 8005f00:	636f4361 	.word	0x636f4361
 8005f04:	3fd287a7 	.word	0x3fd287a7
 8005f08:	8b60c8b3 	.word	0x8b60c8b3
 8005f0c:	3fc68a28 	.word	0x3fc68a28
 8005f10:	509f79fb 	.word	0x509f79fb
 8005f14:	3fd34413 	.word	0x3fd34413
 8005f18:	7ff00000 	.word	0x7ff00000
 8005f1c:	08007e1b 	.word	0x08007e1b
 8005f20:	3ff80000 	.word	0x3ff80000
 8005f24:	08007ed8 	.word	0x08007ed8
 8005f28:	08007eb0 	.word	0x08007eb0
 8005f2c:	08007ea1 	.word	0x08007ea1
 8005f30:	07f1      	lsls	r1, r6, #31
 8005f32:	d508      	bpl.n	8005f46 <_dtoa_r+0x34e>
 8005f34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f3c:	f7fa fb5c 	bl	80005f8 <__aeabi_dmul>
 8005f40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f44:	3501      	adds	r5, #1
 8005f46:	1076      	asrs	r6, r6, #1
 8005f48:	3708      	adds	r7, #8
 8005f4a:	2e00      	cmp	r6, #0
 8005f4c:	d1f0      	bne.n	8005f30 <_dtoa_r+0x338>
 8005f4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f56:	f7fa fc79 	bl	800084c <__aeabi_ddiv>
 8005f5a:	e9cd 0100 	strd	r0, r1, [sp]
 8005f5e:	e01a      	b.n	8005f96 <_dtoa_r+0x39e>
 8005f60:	2502      	movs	r5, #2
 8005f62:	e7a3      	b.n	8005eac <_dtoa_r+0x2b4>
 8005f64:	f000 80a0 	beq.w	80060a8 <_dtoa_r+0x4b0>
 8005f68:	f1ca 0600 	rsb	r6, sl, #0
 8005f6c:	4b9f      	ldr	r3, [pc, #636]	; (80061ec <_dtoa_r+0x5f4>)
 8005f6e:	4fa0      	ldr	r7, [pc, #640]	; (80061f0 <_dtoa_r+0x5f8>)
 8005f70:	f006 020f 	and.w	r2, r6, #15
 8005f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f80:	f7fa fb3a 	bl	80005f8 <__aeabi_dmul>
 8005f84:	e9cd 0100 	strd	r0, r1, [sp]
 8005f88:	1136      	asrs	r6, r6, #4
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2502      	movs	r5, #2
 8005f8e:	2e00      	cmp	r6, #0
 8005f90:	d17f      	bne.n	8006092 <_dtoa_r+0x49a>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e1      	bne.n	8005f5a <_dtoa_r+0x362>
 8005f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8087 	beq.w	80060ac <_dtoa_r+0x4b4>
 8005f9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	4b93      	ldr	r3, [pc, #588]	; (80061f4 <_dtoa_r+0x5fc>)
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	4639      	mov	r1, r7
 8005faa:	f7fa fd97 	bl	8000adc <__aeabi_dcmplt>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d07c      	beq.n	80060ac <_dtoa_r+0x4b4>
 8005fb2:	f1b9 0f00 	cmp.w	r9, #0
 8005fb6:	d079      	beq.n	80060ac <_dtoa_r+0x4b4>
 8005fb8:	9b02      	ldr	r3, [sp, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dd35      	ble.n	800602a <_dtoa_r+0x432>
 8005fbe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8005fc2:	9308      	str	r3, [sp, #32]
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	4b8b      	ldr	r3, [pc, #556]	; (80061f8 <_dtoa_r+0x600>)
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f7fa fb14 	bl	80005f8 <__aeabi_dmul>
 8005fd0:	e9cd 0100 	strd	r0, r1, [sp]
 8005fd4:	9f02      	ldr	r7, [sp, #8]
 8005fd6:	3501      	adds	r5, #1
 8005fd8:	4628      	mov	r0, r5
 8005fda:	f7fa faa3 	bl	8000524 <__aeabi_i2d>
 8005fde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fe2:	f7fa fb09 	bl	80005f8 <__aeabi_dmul>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4b84      	ldr	r3, [pc, #528]	; (80061fc <_dtoa_r+0x604>)
 8005fea:	f7fa f94f 	bl	800028c <__adddf3>
 8005fee:	4605      	mov	r5, r0
 8005ff0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005ff4:	2f00      	cmp	r7, #0
 8005ff6:	d15d      	bne.n	80060b4 <_dtoa_r+0x4bc>
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4b81      	ldr	r3, [pc, #516]	; (8006200 <_dtoa_r+0x608>)
 8005ffc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006000:	f7fa f942 	bl	8000288 <__aeabi_dsub>
 8006004:	462a      	mov	r2, r5
 8006006:	4633      	mov	r3, r6
 8006008:	e9cd 0100 	strd	r0, r1, [sp]
 800600c:	f7fa fd84 	bl	8000b18 <__aeabi_dcmpgt>
 8006010:	2800      	cmp	r0, #0
 8006012:	f040 8288 	bne.w	8006526 <_dtoa_r+0x92e>
 8006016:	462a      	mov	r2, r5
 8006018:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800601c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006020:	f7fa fd5c 	bl	8000adc <__aeabi_dcmplt>
 8006024:	2800      	cmp	r0, #0
 8006026:	f040 827c 	bne.w	8006522 <_dtoa_r+0x92a>
 800602a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800602e:	e9cd 2300 	strd	r2, r3, [sp]
 8006032:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006034:	2b00      	cmp	r3, #0
 8006036:	f2c0 8150 	blt.w	80062da <_dtoa_r+0x6e2>
 800603a:	f1ba 0f0e 	cmp.w	sl, #14
 800603e:	f300 814c 	bgt.w	80062da <_dtoa_r+0x6e2>
 8006042:	4b6a      	ldr	r3, [pc, #424]	; (80061ec <_dtoa_r+0x5f4>)
 8006044:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006048:	ed93 7b00 	vldr	d7, [r3]
 800604c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800604e:	2b00      	cmp	r3, #0
 8006050:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006054:	f280 80d8 	bge.w	8006208 <_dtoa_r+0x610>
 8006058:	f1b9 0f00 	cmp.w	r9, #0
 800605c:	f300 80d4 	bgt.w	8006208 <_dtoa_r+0x610>
 8006060:	f040 825e 	bne.w	8006520 <_dtoa_r+0x928>
 8006064:	2200      	movs	r2, #0
 8006066:	4b66      	ldr	r3, [pc, #408]	; (8006200 <_dtoa_r+0x608>)
 8006068:	ec51 0b17 	vmov	r0, r1, d7
 800606c:	f7fa fac4 	bl	80005f8 <__aeabi_dmul>
 8006070:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006074:	f7fa fd46 	bl	8000b04 <__aeabi_dcmpge>
 8006078:	464f      	mov	r7, r9
 800607a:	464e      	mov	r6, r9
 800607c:	2800      	cmp	r0, #0
 800607e:	f040 8234 	bne.w	80064ea <_dtoa_r+0x8f2>
 8006082:	2331      	movs	r3, #49	; 0x31
 8006084:	f10b 0501 	add.w	r5, fp, #1
 8006088:	f88b 3000 	strb.w	r3, [fp]
 800608c:	f10a 0a01 	add.w	sl, sl, #1
 8006090:	e22f      	b.n	80064f2 <_dtoa_r+0x8fa>
 8006092:	07f2      	lsls	r2, r6, #31
 8006094:	d505      	bpl.n	80060a2 <_dtoa_r+0x4aa>
 8006096:	e9d7 2300 	ldrd	r2, r3, [r7]
 800609a:	f7fa faad 	bl	80005f8 <__aeabi_dmul>
 800609e:	3501      	adds	r5, #1
 80060a0:	2301      	movs	r3, #1
 80060a2:	1076      	asrs	r6, r6, #1
 80060a4:	3708      	adds	r7, #8
 80060a6:	e772      	b.n	8005f8e <_dtoa_r+0x396>
 80060a8:	2502      	movs	r5, #2
 80060aa:	e774      	b.n	8005f96 <_dtoa_r+0x39e>
 80060ac:	f8cd a020 	str.w	sl, [sp, #32]
 80060b0:	464f      	mov	r7, r9
 80060b2:	e791      	b.n	8005fd8 <_dtoa_r+0x3e0>
 80060b4:	4b4d      	ldr	r3, [pc, #308]	; (80061ec <_dtoa_r+0x5f4>)
 80060b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80060be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d047      	beq.n	8006154 <_dtoa_r+0x55c>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	2000      	movs	r0, #0
 80060ca:	494e      	ldr	r1, [pc, #312]	; (8006204 <_dtoa_r+0x60c>)
 80060cc:	f7fa fbbe 	bl	800084c <__aeabi_ddiv>
 80060d0:	462a      	mov	r2, r5
 80060d2:	4633      	mov	r3, r6
 80060d4:	f7fa f8d8 	bl	8000288 <__aeabi_dsub>
 80060d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80060dc:	465d      	mov	r5, fp
 80060de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060e2:	f7fa fd39 	bl	8000b58 <__aeabi_d2iz>
 80060e6:	4606      	mov	r6, r0
 80060e8:	f7fa fa1c 	bl	8000524 <__aeabi_i2d>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060f4:	f7fa f8c8 	bl	8000288 <__aeabi_dsub>
 80060f8:	3630      	adds	r6, #48	; 0x30
 80060fa:	f805 6b01 	strb.w	r6, [r5], #1
 80060fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006102:	e9cd 0100 	strd	r0, r1, [sp]
 8006106:	f7fa fce9 	bl	8000adc <__aeabi_dcmplt>
 800610a:	2800      	cmp	r0, #0
 800610c:	d163      	bne.n	80061d6 <_dtoa_r+0x5de>
 800610e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006112:	2000      	movs	r0, #0
 8006114:	4937      	ldr	r1, [pc, #220]	; (80061f4 <_dtoa_r+0x5fc>)
 8006116:	f7fa f8b7 	bl	8000288 <__aeabi_dsub>
 800611a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800611e:	f7fa fcdd 	bl	8000adc <__aeabi_dcmplt>
 8006122:	2800      	cmp	r0, #0
 8006124:	f040 80b7 	bne.w	8006296 <_dtoa_r+0x69e>
 8006128:	eba5 030b 	sub.w	r3, r5, fp
 800612c:	429f      	cmp	r7, r3
 800612e:	f77f af7c 	ble.w	800602a <_dtoa_r+0x432>
 8006132:	2200      	movs	r2, #0
 8006134:	4b30      	ldr	r3, [pc, #192]	; (80061f8 <_dtoa_r+0x600>)
 8006136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800613a:	f7fa fa5d 	bl	80005f8 <__aeabi_dmul>
 800613e:	2200      	movs	r2, #0
 8006140:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006144:	4b2c      	ldr	r3, [pc, #176]	; (80061f8 <_dtoa_r+0x600>)
 8006146:	e9dd 0100 	ldrd	r0, r1, [sp]
 800614a:	f7fa fa55 	bl	80005f8 <__aeabi_dmul>
 800614e:	e9cd 0100 	strd	r0, r1, [sp]
 8006152:	e7c4      	b.n	80060de <_dtoa_r+0x4e6>
 8006154:	462a      	mov	r2, r5
 8006156:	4633      	mov	r3, r6
 8006158:	f7fa fa4e 	bl	80005f8 <__aeabi_dmul>
 800615c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006160:	eb0b 0507 	add.w	r5, fp, r7
 8006164:	465e      	mov	r6, fp
 8006166:	e9dd 0100 	ldrd	r0, r1, [sp]
 800616a:	f7fa fcf5 	bl	8000b58 <__aeabi_d2iz>
 800616e:	4607      	mov	r7, r0
 8006170:	f7fa f9d8 	bl	8000524 <__aeabi_i2d>
 8006174:	3730      	adds	r7, #48	; 0x30
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800617e:	f7fa f883 	bl	8000288 <__aeabi_dsub>
 8006182:	f806 7b01 	strb.w	r7, [r6], #1
 8006186:	42ae      	cmp	r6, r5
 8006188:	e9cd 0100 	strd	r0, r1, [sp]
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	d126      	bne.n	80061e0 <_dtoa_r+0x5e8>
 8006192:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <_dtoa_r+0x60c>)
 8006194:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006198:	f7fa f878 	bl	800028c <__adddf3>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061a4:	f7fa fcb8 	bl	8000b18 <__aeabi_dcmpgt>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d174      	bne.n	8006296 <_dtoa_r+0x69e>
 80061ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80061b0:	2000      	movs	r0, #0
 80061b2:	4914      	ldr	r1, [pc, #80]	; (8006204 <_dtoa_r+0x60c>)
 80061b4:	f7fa f868 	bl	8000288 <__aeabi_dsub>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061c0:	f7fa fc8c 	bl	8000adc <__aeabi_dcmplt>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	f43f af30 	beq.w	800602a <_dtoa_r+0x432>
 80061ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061ce:	2b30      	cmp	r3, #48	; 0x30
 80061d0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80061d4:	d002      	beq.n	80061dc <_dtoa_r+0x5e4>
 80061d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80061da:	e04a      	b.n	8006272 <_dtoa_r+0x67a>
 80061dc:	4615      	mov	r5, r2
 80061de:	e7f4      	b.n	80061ca <_dtoa_r+0x5d2>
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <_dtoa_r+0x600>)
 80061e2:	f7fa fa09 	bl	80005f8 <__aeabi_dmul>
 80061e6:	e9cd 0100 	strd	r0, r1, [sp]
 80061ea:	e7bc      	b.n	8006166 <_dtoa_r+0x56e>
 80061ec:	08007ed8 	.word	0x08007ed8
 80061f0:	08007eb0 	.word	0x08007eb0
 80061f4:	3ff00000 	.word	0x3ff00000
 80061f8:	40240000 	.word	0x40240000
 80061fc:	401c0000 	.word	0x401c0000
 8006200:	40140000 	.word	0x40140000
 8006204:	3fe00000 	.word	0x3fe00000
 8006208:	e9dd 6700 	ldrd	r6, r7, [sp]
 800620c:	465d      	mov	r5, fp
 800620e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006212:	4630      	mov	r0, r6
 8006214:	4639      	mov	r1, r7
 8006216:	f7fa fb19 	bl	800084c <__aeabi_ddiv>
 800621a:	f7fa fc9d 	bl	8000b58 <__aeabi_d2iz>
 800621e:	4680      	mov	r8, r0
 8006220:	f7fa f980 	bl	8000524 <__aeabi_i2d>
 8006224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006228:	f7fa f9e6 	bl	80005f8 <__aeabi_dmul>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4630      	mov	r0, r6
 8006232:	4639      	mov	r1, r7
 8006234:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006238:	f7fa f826 	bl	8000288 <__aeabi_dsub>
 800623c:	f805 6b01 	strb.w	r6, [r5], #1
 8006240:	eba5 060b 	sub.w	r6, r5, fp
 8006244:	45b1      	cmp	r9, r6
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	d139      	bne.n	80062c0 <_dtoa_r+0x6c8>
 800624c:	f7fa f81e 	bl	800028c <__adddf3>
 8006250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006254:	4606      	mov	r6, r0
 8006256:	460f      	mov	r7, r1
 8006258:	f7fa fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 800625c:	b9c8      	cbnz	r0, 8006292 <_dtoa_r+0x69a>
 800625e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006262:	4630      	mov	r0, r6
 8006264:	4639      	mov	r1, r7
 8006266:	f7fa fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800626a:	b110      	cbz	r0, 8006272 <_dtoa_r+0x67a>
 800626c:	f018 0f01 	tst.w	r8, #1
 8006270:	d10f      	bne.n	8006292 <_dtoa_r+0x69a>
 8006272:	9904      	ldr	r1, [sp, #16]
 8006274:	4620      	mov	r0, r4
 8006276:	f000 fe04 	bl	8006e82 <_Bfree>
 800627a:	2300      	movs	r3, #0
 800627c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800627e:	702b      	strb	r3, [r5, #0]
 8006280:	f10a 0301 	add.w	r3, sl, #1
 8006284:	6013      	str	r3, [r2, #0]
 8006286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8241 	beq.w	8006710 <_dtoa_r+0xb18>
 800628e:	601d      	str	r5, [r3, #0]
 8006290:	e23e      	b.n	8006710 <_dtoa_r+0xb18>
 8006292:	f8cd a020 	str.w	sl, [sp, #32]
 8006296:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800629a:	2a39      	cmp	r2, #57	; 0x39
 800629c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80062a0:	d108      	bne.n	80062b4 <_dtoa_r+0x6bc>
 80062a2:	459b      	cmp	fp, r3
 80062a4:	d10a      	bne.n	80062bc <_dtoa_r+0x6c4>
 80062a6:	9b08      	ldr	r3, [sp, #32]
 80062a8:	3301      	adds	r3, #1
 80062aa:	9308      	str	r3, [sp, #32]
 80062ac:	2330      	movs	r3, #48	; 0x30
 80062ae:	f88b 3000 	strb.w	r3, [fp]
 80062b2:	465b      	mov	r3, fp
 80062b4:	781a      	ldrb	r2, [r3, #0]
 80062b6:	3201      	adds	r2, #1
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	e78c      	b.n	80061d6 <_dtoa_r+0x5de>
 80062bc:	461d      	mov	r5, r3
 80062be:	e7ea      	b.n	8006296 <_dtoa_r+0x69e>
 80062c0:	2200      	movs	r2, #0
 80062c2:	4b9b      	ldr	r3, [pc, #620]	; (8006530 <_dtoa_r+0x938>)
 80062c4:	f7fa f998 	bl	80005f8 <__aeabi_dmul>
 80062c8:	2200      	movs	r2, #0
 80062ca:	2300      	movs	r3, #0
 80062cc:	4606      	mov	r6, r0
 80062ce:	460f      	mov	r7, r1
 80062d0:	f7fa fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	d09a      	beq.n	800620e <_dtoa_r+0x616>
 80062d8:	e7cb      	b.n	8006272 <_dtoa_r+0x67a>
 80062da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062dc:	2a00      	cmp	r2, #0
 80062de:	f000 808b 	beq.w	80063f8 <_dtoa_r+0x800>
 80062e2:	9a06      	ldr	r2, [sp, #24]
 80062e4:	2a01      	cmp	r2, #1
 80062e6:	dc6e      	bgt.n	80063c6 <_dtoa_r+0x7ce>
 80062e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062ea:	2a00      	cmp	r2, #0
 80062ec:	d067      	beq.n	80063be <_dtoa_r+0x7c6>
 80062ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062f2:	9f07      	ldr	r7, [sp, #28]
 80062f4:	9d05      	ldr	r5, [sp, #20]
 80062f6:	9a05      	ldr	r2, [sp, #20]
 80062f8:	2101      	movs	r1, #1
 80062fa:	441a      	add	r2, r3
 80062fc:	4620      	mov	r0, r4
 80062fe:	9205      	str	r2, [sp, #20]
 8006300:	4498      	add	r8, r3
 8006302:	f000 fe9c 	bl	800703e <__i2b>
 8006306:	4606      	mov	r6, r0
 8006308:	2d00      	cmp	r5, #0
 800630a:	dd0c      	ble.n	8006326 <_dtoa_r+0x72e>
 800630c:	f1b8 0f00 	cmp.w	r8, #0
 8006310:	dd09      	ble.n	8006326 <_dtoa_r+0x72e>
 8006312:	4545      	cmp	r5, r8
 8006314:	9a05      	ldr	r2, [sp, #20]
 8006316:	462b      	mov	r3, r5
 8006318:	bfa8      	it	ge
 800631a:	4643      	movge	r3, r8
 800631c:	1ad2      	subs	r2, r2, r3
 800631e:	9205      	str	r2, [sp, #20]
 8006320:	1aed      	subs	r5, r5, r3
 8006322:	eba8 0803 	sub.w	r8, r8, r3
 8006326:	9b07      	ldr	r3, [sp, #28]
 8006328:	b1eb      	cbz	r3, 8006366 <_dtoa_r+0x76e>
 800632a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800632c:	2b00      	cmp	r3, #0
 800632e:	d067      	beq.n	8006400 <_dtoa_r+0x808>
 8006330:	b18f      	cbz	r7, 8006356 <_dtoa_r+0x75e>
 8006332:	4631      	mov	r1, r6
 8006334:	463a      	mov	r2, r7
 8006336:	4620      	mov	r0, r4
 8006338:	f000 ff20 	bl	800717c <__pow5mult>
 800633c:	9a04      	ldr	r2, [sp, #16]
 800633e:	4601      	mov	r1, r0
 8006340:	4606      	mov	r6, r0
 8006342:	4620      	mov	r0, r4
 8006344:	f000 fe84 	bl	8007050 <__multiply>
 8006348:	9904      	ldr	r1, [sp, #16]
 800634a:	9008      	str	r0, [sp, #32]
 800634c:	4620      	mov	r0, r4
 800634e:	f000 fd98 	bl	8006e82 <_Bfree>
 8006352:	9b08      	ldr	r3, [sp, #32]
 8006354:	9304      	str	r3, [sp, #16]
 8006356:	9b07      	ldr	r3, [sp, #28]
 8006358:	1bda      	subs	r2, r3, r7
 800635a:	d004      	beq.n	8006366 <_dtoa_r+0x76e>
 800635c:	9904      	ldr	r1, [sp, #16]
 800635e:	4620      	mov	r0, r4
 8006360:	f000 ff0c 	bl	800717c <__pow5mult>
 8006364:	9004      	str	r0, [sp, #16]
 8006366:	2101      	movs	r1, #1
 8006368:	4620      	mov	r0, r4
 800636a:	f000 fe68 	bl	800703e <__i2b>
 800636e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006370:	4607      	mov	r7, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 81d0 	beq.w	8006718 <_dtoa_r+0xb20>
 8006378:	461a      	mov	r2, r3
 800637a:	4601      	mov	r1, r0
 800637c:	4620      	mov	r0, r4
 800637e:	f000 fefd 	bl	800717c <__pow5mult>
 8006382:	9b06      	ldr	r3, [sp, #24]
 8006384:	2b01      	cmp	r3, #1
 8006386:	4607      	mov	r7, r0
 8006388:	dc40      	bgt.n	800640c <_dtoa_r+0x814>
 800638a:	9b00      	ldr	r3, [sp, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d139      	bne.n	8006404 <_dtoa_r+0x80c>
 8006390:	9b01      	ldr	r3, [sp, #4]
 8006392:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006396:	2b00      	cmp	r3, #0
 8006398:	d136      	bne.n	8006408 <_dtoa_r+0x810>
 800639a:	9b01      	ldr	r3, [sp, #4]
 800639c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a0:	0d1b      	lsrs	r3, r3, #20
 80063a2:	051b      	lsls	r3, r3, #20
 80063a4:	b12b      	cbz	r3, 80063b2 <_dtoa_r+0x7ba>
 80063a6:	9b05      	ldr	r3, [sp, #20]
 80063a8:	3301      	adds	r3, #1
 80063aa:	9305      	str	r3, [sp, #20]
 80063ac:	f108 0801 	add.w	r8, r8, #1
 80063b0:	2301      	movs	r3, #1
 80063b2:	9307      	str	r3, [sp, #28]
 80063b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d12a      	bne.n	8006410 <_dtoa_r+0x818>
 80063ba:	2001      	movs	r0, #1
 80063bc:	e030      	b.n	8006420 <_dtoa_r+0x828>
 80063be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063c4:	e795      	b.n	80062f2 <_dtoa_r+0x6fa>
 80063c6:	9b07      	ldr	r3, [sp, #28]
 80063c8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80063cc:	42bb      	cmp	r3, r7
 80063ce:	bfbf      	itttt	lt
 80063d0:	9b07      	ldrlt	r3, [sp, #28]
 80063d2:	9707      	strlt	r7, [sp, #28]
 80063d4:	1afa      	sublt	r2, r7, r3
 80063d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80063d8:	bfbb      	ittet	lt
 80063da:	189b      	addlt	r3, r3, r2
 80063dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80063de:	1bdf      	subge	r7, r3, r7
 80063e0:	2700      	movlt	r7, #0
 80063e2:	f1b9 0f00 	cmp.w	r9, #0
 80063e6:	bfb5      	itete	lt
 80063e8:	9b05      	ldrlt	r3, [sp, #20]
 80063ea:	9d05      	ldrge	r5, [sp, #20]
 80063ec:	eba3 0509 	sublt.w	r5, r3, r9
 80063f0:	464b      	movge	r3, r9
 80063f2:	bfb8      	it	lt
 80063f4:	2300      	movlt	r3, #0
 80063f6:	e77e      	b.n	80062f6 <_dtoa_r+0x6fe>
 80063f8:	9f07      	ldr	r7, [sp, #28]
 80063fa:	9d05      	ldr	r5, [sp, #20]
 80063fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80063fe:	e783      	b.n	8006308 <_dtoa_r+0x710>
 8006400:	9a07      	ldr	r2, [sp, #28]
 8006402:	e7ab      	b.n	800635c <_dtoa_r+0x764>
 8006404:	2300      	movs	r3, #0
 8006406:	e7d4      	b.n	80063b2 <_dtoa_r+0x7ba>
 8006408:	9b00      	ldr	r3, [sp, #0]
 800640a:	e7d2      	b.n	80063b2 <_dtoa_r+0x7ba>
 800640c:	2300      	movs	r3, #0
 800640e:	9307      	str	r3, [sp, #28]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006416:	6918      	ldr	r0, [r3, #16]
 8006418:	f000 fdc3 	bl	8006fa2 <__hi0bits>
 800641c:	f1c0 0020 	rsb	r0, r0, #32
 8006420:	4440      	add	r0, r8
 8006422:	f010 001f 	ands.w	r0, r0, #31
 8006426:	d047      	beq.n	80064b8 <_dtoa_r+0x8c0>
 8006428:	f1c0 0320 	rsb	r3, r0, #32
 800642c:	2b04      	cmp	r3, #4
 800642e:	dd3b      	ble.n	80064a8 <_dtoa_r+0x8b0>
 8006430:	9b05      	ldr	r3, [sp, #20]
 8006432:	f1c0 001c 	rsb	r0, r0, #28
 8006436:	4403      	add	r3, r0
 8006438:	9305      	str	r3, [sp, #20]
 800643a:	4405      	add	r5, r0
 800643c:	4480      	add	r8, r0
 800643e:	9b05      	ldr	r3, [sp, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	dd05      	ble.n	8006450 <_dtoa_r+0x858>
 8006444:	461a      	mov	r2, r3
 8006446:	9904      	ldr	r1, [sp, #16]
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fee5 	bl	8007218 <__lshift>
 800644e:	9004      	str	r0, [sp, #16]
 8006450:	f1b8 0f00 	cmp.w	r8, #0
 8006454:	dd05      	ble.n	8006462 <_dtoa_r+0x86a>
 8006456:	4639      	mov	r1, r7
 8006458:	4642      	mov	r2, r8
 800645a:	4620      	mov	r0, r4
 800645c:	f000 fedc 	bl	8007218 <__lshift>
 8006460:	4607      	mov	r7, r0
 8006462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006464:	b353      	cbz	r3, 80064bc <_dtoa_r+0x8c4>
 8006466:	4639      	mov	r1, r7
 8006468:	9804      	ldr	r0, [sp, #16]
 800646a:	f000 ff29 	bl	80072c0 <__mcmp>
 800646e:	2800      	cmp	r0, #0
 8006470:	da24      	bge.n	80064bc <_dtoa_r+0x8c4>
 8006472:	2300      	movs	r3, #0
 8006474:	220a      	movs	r2, #10
 8006476:	9904      	ldr	r1, [sp, #16]
 8006478:	4620      	mov	r0, r4
 800647a:	f000 fd19 	bl	8006eb0 <__multadd>
 800647e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006480:	9004      	str	r0, [sp, #16]
 8006482:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 814d 	beq.w	8006726 <_dtoa_r+0xb2e>
 800648c:	2300      	movs	r3, #0
 800648e:	4631      	mov	r1, r6
 8006490:	220a      	movs	r2, #10
 8006492:	4620      	mov	r0, r4
 8006494:	f000 fd0c 	bl	8006eb0 <__multadd>
 8006498:	9b02      	ldr	r3, [sp, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	4606      	mov	r6, r0
 800649e:	dc4f      	bgt.n	8006540 <_dtoa_r+0x948>
 80064a0:	9b06      	ldr	r3, [sp, #24]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	dd4c      	ble.n	8006540 <_dtoa_r+0x948>
 80064a6:	e011      	b.n	80064cc <_dtoa_r+0x8d4>
 80064a8:	d0c9      	beq.n	800643e <_dtoa_r+0x846>
 80064aa:	9a05      	ldr	r2, [sp, #20]
 80064ac:	331c      	adds	r3, #28
 80064ae:	441a      	add	r2, r3
 80064b0:	9205      	str	r2, [sp, #20]
 80064b2:	441d      	add	r5, r3
 80064b4:	4498      	add	r8, r3
 80064b6:	e7c2      	b.n	800643e <_dtoa_r+0x846>
 80064b8:	4603      	mov	r3, r0
 80064ba:	e7f6      	b.n	80064aa <_dtoa_r+0x8b2>
 80064bc:	f1b9 0f00 	cmp.w	r9, #0
 80064c0:	dc38      	bgt.n	8006534 <_dtoa_r+0x93c>
 80064c2:	9b06      	ldr	r3, [sp, #24]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	dd35      	ble.n	8006534 <_dtoa_r+0x93c>
 80064c8:	f8cd 9008 	str.w	r9, [sp, #8]
 80064cc:	9b02      	ldr	r3, [sp, #8]
 80064ce:	b963      	cbnz	r3, 80064ea <_dtoa_r+0x8f2>
 80064d0:	4639      	mov	r1, r7
 80064d2:	2205      	movs	r2, #5
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 fceb 	bl	8006eb0 <__multadd>
 80064da:	4601      	mov	r1, r0
 80064dc:	4607      	mov	r7, r0
 80064de:	9804      	ldr	r0, [sp, #16]
 80064e0:	f000 feee 	bl	80072c0 <__mcmp>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	f73f adcc 	bgt.w	8006082 <_dtoa_r+0x48a>
 80064ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ec:	465d      	mov	r5, fp
 80064ee:	ea6f 0a03 	mvn.w	sl, r3
 80064f2:	f04f 0900 	mov.w	r9, #0
 80064f6:	4639      	mov	r1, r7
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fcc2 	bl	8006e82 <_Bfree>
 80064fe:	2e00      	cmp	r6, #0
 8006500:	f43f aeb7 	beq.w	8006272 <_dtoa_r+0x67a>
 8006504:	f1b9 0f00 	cmp.w	r9, #0
 8006508:	d005      	beq.n	8006516 <_dtoa_r+0x91e>
 800650a:	45b1      	cmp	r9, r6
 800650c:	d003      	beq.n	8006516 <_dtoa_r+0x91e>
 800650e:	4649      	mov	r1, r9
 8006510:	4620      	mov	r0, r4
 8006512:	f000 fcb6 	bl	8006e82 <_Bfree>
 8006516:	4631      	mov	r1, r6
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fcb2 	bl	8006e82 <_Bfree>
 800651e:	e6a8      	b.n	8006272 <_dtoa_r+0x67a>
 8006520:	2700      	movs	r7, #0
 8006522:	463e      	mov	r6, r7
 8006524:	e7e1      	b.n	80064ea <_dtoa_r+0x8f2>
 8006526:	f8dd a020 	ldr.w	sl, [sp, #32]
 800652a:	463e      	mov	r6, r7
 800652c:	e5a9      	b.n	8006082 <_dtoa_r+0x48a>
 800652e:	bf00      	nop
 8006530:	40240000 	.word	0x40240000
 8006534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006536:	f8cd 9008 	str.w	r9, [sp, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 80fa 	beq.w	8006734 <_dtoa_r+0xb3c>
 8006540:	2d00      	cmp	r5, #0
 8006542:	dd05      	ble.n	8006550 <_dtoa_r+0x958>
 8006544:	4631      	mov	r1, r6
 8006546:	462a      	mov	r2, r5
 8006548:	4620      	mov	r0, r4
 800654a:	f000 fe65 	bl	8007218 <__lshift>
 800654e:	4606      	mov	r6, r0
 8006550:	9b07      	ldr	r3, [sp, #28]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d04c      	beq.n	80065f0 <_dtoa_r+0x9f8>
 8006556:	6871      	ldr	r1, [r6, #4]
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fc5e 	bl	8006e1a <_Balloc>
 800655e:	6932      	ldr	r2, [r6, #16]
 8006560:	3202      	adds	r2, #2
 8006562:	4605      	mov	r5, r0
 8006564:	0092      	lsls	r2, r2, #2
 8006566:	f106 010c 	add.w	r1, r6, #12
 800656a:	300c      	adds	r0, #12
 800656c:	f000 fc48 	bl	8006e00 <memcpy>
 8006570:	2201      	movs	r2, #1
 8006572:	4629      	mov	r1, r5
 8006574:	4620      	mov	r0, r4
 8006576:	f000 fe4f 	bl	8007218 <__lshift>
 800657a:	9b00      	ldr	r3, [sp, #0]
 800657c:	f8cd b014 	str.w	fp, [sp, #20]
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	46b1      	mov	r9, r6
 8006586:	9307      	str	r3, [sp, #28]
 8006588:	4606      	mov	r6, r0
 800658a:	4639      	mov	r1, r7
 800658c:	9804      	ldr	r0, [sp, #16]
 800658e:	f7ff faa5 	bl	8005adc <quorem>
 8006592:	4649      	mov	r1, r9
 8006594:	4605      	mov	r5, r0
 8006596:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800659a:	9804      	ldr	r0, [sp, #16]
 800659c:	f000 fe90 	bl	80072c0 <__mcmp>
 80065a0:	4632      	mov	r2, r6
 80065a2:	9000      	str	r0, [sp, #0]
 80065a4:	4639      	mov	r1, r7
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 fea4 	bl	80072f4 <__mdiff>
 80065ac:	68c3      	ldr	r3, [r0, #12]
 80065ae:	4602      	mov	r2, r0
 80065b0:	bb03      	cbnz	r3, 80065f4 <_dtoa_r+0x9fc>
 80065b2:	4601      	mov	r1, r0
 80065b4:	9008      	str	r0, [sp, #32]
 80065b6:	9804      	ldr	r0, [sp, #16]
 80065b8:	f000 fe82 	bl	80072c0 <__mcmp>
 80065bc:	9a08      	ldr	r2, [sp, #32]
 80065be:	4603      	mov	r3, r0
 80065c0:	4611      	mov	r1, r2
 80065c2:	4620      	mov	r0, r4
 80065c4:	9308      	str	r3, [sp, #32]
 80065c6:	f000 fc5c 	bl	8006e82 <_Bfree>
 80065ca:	9b08      	ldr	r3, [sp, #32]
 80065cc:	b9a3      	cbnz	r3, 80065f8 <_dtoa_r+0xa00>
 80065ce:	9a06      	ldr	r2, [sp, #24]
 80065d0:	b992      	cbnz	r2, 80065f8 <_dtoa_r+0xa00>
 80065d2:	9a07      	ldr	r2, [sp, #28]
 80065d4:	b982      	cbnz	r2, 80065f8 <_dtoa_r+0xa00>
 80065d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065da:	d029      	beq.n	8006630 <_dtoa_r+0xa38>
 80065dc:	9b00      	ldr	r3, [sp, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	dd01      	ble.n	80065e6 <_dtoa_r+0x9ee>
 80065e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80065e6:	9b05      	ldr	r3, [sp, #20]
 80065e8:	1c5d      	adds	r5, r3, #1
 80065ea:	f883 8000 	strb.w	r8, [r3]
 80065ee:	e782      	b.n	80064f6 <_dtoa_r+0x8fe>
 80065f0:	4630      	mov	r0, r6
 80065f2:	e7c2      	b.n	800657a <_dtoa_r+0x982>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e7e3      	b.n	80065c0 <_dtoa_r+0x9c8>
 80065f8:	9a00      	ldr	r2, [sp, #0]
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	db04      	blt.n	8006608 <_dtoa_r+0xa10>
 80065fe:	d125      	bne.n	800664c <_dtoa_r+0xa54>
 8006600:	9a06      	ldr	r2, [sp, #24]
 8006602:	bb1a      	cbnz	r2, 800664c <_dtoa_r+0xa54>
 8006604:	9a07      	ldr	r2, [sp, #28]
 8006606:	bb0a      	cbnz	r2, 800664c <_dtoa_r+0xa54>
 8006608:	2b00      	cmp	r3, #0
 800660a:	ddec      	ble.n	80065e6 <_dtoa_r+0x9ee>
 800660c:	2201      	movs	r2, #1
 800660e:	9904      	ldr	r1, [sp, #16]
 8006610:	4620      	mov	r0, r4
 8006612:	f000 fe01 	bl	8007218 <__lshift>
 8006616:	4639      	mov	r1, r7
 8006618:	9004      	str	r0, [sp, #16]
 800661a:	f000 fe51 	bl	80072c0 <__mcmp>
 800661e:	2800      	cmp	r0, #0
 8006620:	dc03      	bgt.n	800662a <_dtoa_r+0xa32>
 8006622:	d1e0      	bne.n	80065e6 <_dtoa_r+0x9ee>
 8006624:	f018 0f01 	tst.w	r8, #1
 8006628:	d0dd      	beq.n	80065e6 <_dtoa_r+0x9ee>
 800662a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800662e:	d1d8      	bne.n	80065e2 <_dtoa_r+0x9ea>
 8006630:	9b05      	ldr	r3, [sp, #20]
 8006632:	9a05      	ldr	r2, [sp, #20]
 8006634:	1c5d      	adds	r5, r3, #1
 8006636:	2339      	movs	r3, #57	; 0x39
 8006638:	7013      	strb	r3, [r2, #0]
 800663a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800663e:	2b39      	cmp	r3, #57	; 0x39
 8006640:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006644:	d04f      	beq.n	80066e6 <_dtoa_r+0xaee>
 8006646:	3301      	adds	r3, #1
 8006648:	7013      	strb	r3, [r2, #0]
 800664a:	e754      	b.n	80064f6 <_dtoa_r+0x8fe>
 800664c:	9a05      	ldr	r2, [sp, #20]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f102 0501 	add.w	r5, r2, #1
 8006654:	dd06      	ble.n	8006664 <_dtoa_r+0xa6c>
 8006656:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800665a:	d0e9      	beq.n	8006630 <_dtoa_r+0xa38>
 800665c:	f108 0801 	add.w	r8, r8, #1
 8006660:	9b05      	ldr	r3, [sp, #20]
 8006662:	e7c2      	b.n	80065ea <_dtoa_r+0x9f2>
 8006664:	9a02      	ldr	r2, [sp, #8]
 8006666:	f805 8c01 	strb.w	r8, [r5, #-1]
 800666a:	eba5 030b 	sub.w	r3, r5, fp
 800666e:	4293      	cmp	r3, r2
 8006670:	d021      	beq.n	80066b6 <_dtoa_r+0xabe>
 8006672:	2300      	movs	r3, #0
 8006674:	220a      	movs	r2, #10
 8006676:	9904      	ldr	r1, [sp, #16]
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fc19 	bl	8006eb0 <__multadd>
 800667e:	45b1      	cmp	r9, r6
 8006680:	9004      	str	r0, [sp, #16]
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	f04f 020a 	mov.w	r2, #10
 800668a:	4649      	mov	r1, r9
 800668c:	4620      	mov	r0, r4
 800668e:	d105      	bne.n	800669c <_dtoa_r+0xaa4>
 8006690:	f000 fc0e 	bl	8006eb0 <__multadd>
 8006694:	4681      	mov	r9, r0
 8006696:	4606      	mov	r6, r0
 8006698:	9505      	str	r5, [sp, #20]
 800669a:	e776      	b.n	800658a <_dtoa_r+0x992>
 800669c:	f000 fc08 	bl	8006eb0 <__multadd>
 80066a0:	4631      	mov	r1, r6
 80066a2:	4681      	mov	r9, r0
 80066a4:	2300      	movs	r3, #0
 80066a6:	220a      	movs	r2, #10
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 fc01 	bl	8006eb0 <__multadd>
 80066ae:	4606      	mov	r6, r0
 80066b0:	e7f2      	b.n	8006698 <_dtoa_r+0xaa0>
 80066b2:	f04f 0900 	mov.w	r9, #0
 80066b6:	2201      	movs	r2, #1
 80066b8:	9904      	ldr	r1, [sp, #16]
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 fdac 	bl	8007218 <__lshift>
 80066c0:	4639      	mov	r1, r7
 80066c2:	9004      	str	r0, [sp, #16]
 80066c4:	f000 fdfc 	bl	80072c0 <__mcmp>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	dcb6      	bgt.n	800663a <_dtoa_r+0xa42>
 80066cc:	d102      	bne.n	80066d4 <_dtoa_r+0xadc>
 80066ce:	f018 0f01 	tst.w	r8, #1
 80066d2:	d1b2      	bne.n	800663a <_dtoa_r+0xa42>
 80066d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066d8:	2b30      	cmp	r3, #48	; 0x30
 80066da:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80066de:	f47f af0a 	bne.w	80064f6 <_dtoa_r+0x8fe>
 80066e2:	4615      	mov	r5, r2
 80066e4:	e7f6      	b.n	80066d4 <_dtoa_r+0xadc>
 80066e6:	4593      	cmp	fp, r2
 80066e8:	d105      	bne.n	80066f6 <_dtoa_r+0xafe>
 80066ea:	2331      	movs	r3, #49	; 0x31
 80066ec:	f10a 0a01 	add.w	sl, sl, #1
 80066f0:	f88b 3000 	strb.w	r3, [fp]
 80066f4:	e6ff      	b.n	80064f6 <_dtoa_r+0x8fe>
 80066f6:	4615      	mov	r5, r2
 80066f8:	e79f      	b.n	800663a <_dtoa_r+0xa42>
 80066fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006760 <_dtoa_r+0xb68>
 80066fe:	e007      	b.n	8006710 <_dtoa_r+0xb18>
 8006700:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006702:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006764 <_dtoa_r+0xb6c>
 8006706:	b11b      	cbz	r3, 8006710 <_dtoa_r+0xb18>
 8006708:	f10b 0308 	add.w	r3, fp, #8
 800670c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	4658      	mov	r0, fp
 8006712:	b017      	add	sp, #92	; 0x5c
 8006714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006718:	9b06      	ldr	r3, [sp, #24]
 800671a:	2b01      	cmp	r3, #1
 800671c:	f77f ae35 	ble.w	800638a <_dtoa_r+0x792>
 8006720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006722:	9307      	str	r3, [sp, #28]
 8006724:	e649      	b.n	80063ba <_dtoa_r+0x7c2>
 8006726:	9b02      	ldr	r3, [sp, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	dc03      	bgt.n	8006734 <_dtoa_r+0xb3c>
 800672c:	9b06      	ldr	r3, [sp, #24]
 800672e:	2b02      	cmp	r3, #2
 8006730:	f73f aecc 	bgt.w	80064cc <_dtoa_r+0x8d4>
 8006734:	465d      	mov	r5, fp
 8006736:	4639      	mov	r1, r7
 8006738:	9804      	ldr	r0, [sp, #16]
 800673a:	f7ff f9cf 	bl	8005adc <quorem>
 800673e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006742:	f805 8b01 	strb.w	r8, [r5], #1
 8006746:	9a02      	ldr	r2, [sp, #8]
 8006748:	eba5 030b 	sub.w	r3, r5, fp
 800674c:	429a      	cmp	r2, r3
 800674e:	ddb0      	ble.n	80066b2 <_dtoa_r+0xaba>
 8006750:	2300      	movs	r3, #0
 8006752:	220a      	movs	r2, #10
 8006754:	9904      	ldr	r1, [sp, #16]
 8006756:	4620      	mov	r0, r4
 8006758:	f000 fbaa 	bl	8006eb0 <__multadd>
 800675c:	9004      	str	r0, [sp, #16]
 800675e:	e7ea      	b.n	8006736 <_dtoa_r+0xb3e>
 8006760:	08007e1a 	.word	0x08007e1a
 8006764:	08007e98 	.word	0x08007e98

08006768 <rshift>:
 8006768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676a:	6906      	ldr	r6, [r0, #16]
 800676c:	114b      	asrs	r3, r1, #5
 800676e:	429e      	cmp	r6, r3
 8006770:	f100 0414 	add.w	r4, r0, #20
 8006774:	dd30      	ble.n	80067d8 <rshift+0x70>
 8006776:	f011 011f 	ands.w	r1, r1, #31
 800677a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800677e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006782:	d108      	bne.n	8006796 <rshift+0x2e>
 8006784:	4621      	mov	r1, r4
 8006786:	42b2      	cmp	r2, r6
 8006788:	460b      	mov	r3, r1
 800678a:	d211      	bcs.n	80067b0 <rshift+0x48>
 800678c:	f852 3b04 	ldr.w	r3, [r2], #4
 8006790:	f841 3b04 	str.w	r3, [r1], #4
 8006794:	e7f7      	b.n	8006786 <rshift+0x1e>
 8006796:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800679a:	f1c1 0c20 	rsb	ip, r1, #32
 800679e:	40cd      	lsrs	r5, r1
 80067a0:	3204      	adds	r2, #4
 80067a2:	4623      	mov	r3, r4
 80067a4:	42b2      	cmp	r2, r6
 80067a6:	4617      	mov	r7, r2
 80067a8:	d30c      	bcc.n	80067c4 <rshift+0x5c>
 80067aa:	601d      	str	r5, [r3, #0]
 80067ac:	b105      	cbz	r5, 80067b0 <rshift+0x48>
 80067ae:	3304      	adds	r3, #4
 80067b0:	1b1a      	subs	r2, r3, r4
 80067b2:	42a3      	cmp	r3, r4
 80067b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80067b8:	bf08      	it	eq
 80067ba:	2300      	moveq	r3, #0
 80067bc:	6102      	str	r2, [r0, #16]
 80067be:	bf08      	it	eq
 80067c0:	6143      	streq	r3, [r0, #20]
 80067c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c4:	683f      	ldr	r7, [r7, #0]
 80067c6:	fa07 f70c 	lsl.w	r7, r7, ip
 80067ca:	433d      	orrs	r5, r7
 80067cc:	f843 5b04 	str.w	r5, [r3], #4
 80067d0:	f852 5b04 	ldr.w	r5, [r2], #4
 80067d4:	40cd      	lsrs	r5, r1
 80067d6:	e7e5      	b.n	80067a4 <rshift+0x3c>
 80067d8:	4623      	mov	r3, r4
 80067da:	e7e9      	b.n	80067b0 <rshift+0x48>

080067dc <__hexdig_fun>:
 80067dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80067e0:	2b09      	cmp	r3, #9
 80067e2:	d802      	bhi.n	80067ea <__hexdig_fun+0xe>
 80067e4:	3820      	subs	r0, #32
 80067e6:	b2c0      	uxtb	r0, r0
 80067e8:	4770      	bx	lr
 80067ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80067ee:	2b05      	cmp	r3, #5
 80067f0:	d801      	bhi.n	80067f6 <__hexdig_fun+0x1a>
 80067f2:	3847      	subs	r0, #71	; 0x47
 80067f4:	e7f7      	b.n	80067e6 <__hexdig_fun+0xa>
 80067f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80067fa:	2b05      	cmp	r3, #5
 80067fc:	d801      	bhi.n	8006802 <__hexdig_fun+0x26>
 80067fe:	3827      	subs	r0, #39	; 0x27
 8006800:	e7f1      	b.n	80067e6 <__hexdig_fun+0xa>
 8006802:	2000      	movs	r0, #0
 8006804:	4770      	bx	lr

08006806 <__gethex>:
 8006806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	b08b      	sub	sp, #44	; 0x2c
 800680c:	468a      	mov	sl, r1
 800680e:	9002      	str	r0, [sp, #8]
 8006810:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006812:	9306      	str	r3, [sp, #24]
 8006814:	4690      	mov	r8, r2
 8006816:	f000 fad0 	bl	8006dba <__localeconv_l>
 800681a:	6803      	ldr	r3, [r0, #0]
 800681c:	9303      	str	r3, [sp, #12]
 800681e:	4618      	mov	r0, r3
 8006820:	f7f9 fcd6 	bl	80001d0 <strlen>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	9001      	str	r0, [sp, #4]
 8006828:	4403      	add	r3, r0
 800682a:	f04f 0b00 	mov.w	fp, #0
 800682e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006832:	9307      	str	r3, [sp, #28]
 8006834:	f8da 3000 	ldr.w	r3, [sl]
 8006838:	3302      	adds	r3, #2
 800683a:	461f      	mov	r7, r3
 800683c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006840:	2830      	cmp	r0, #48	; 0x30
 8006842:	d06c      	beq.n	800691e <__gethex+0x118>
 8006844:	f7ff ffca 	bl	80067dc <__hexdig_fun>
 8006848:	4604      	mov	r4, r0
 800684a:	2800      	cmp	r0, #0
 800684c:	d16a      	bne.n	8006924 <__gethex+0x11e>
 800684e:	9a01      	ldr	r2, [sp, #4]
 8006850:	9903      	ldr	r1, [sp, #12]
 8006852:	4638      	mov	r0, r7
 8006854:	f001 f840 	bl	80078d8 <strncmp>
 8006858:	2800      	cmp	r0, #0
 800685a:	d166      	bne.n	800692a <__gethex+0x124>
 800685c:	9b01      	ldr	r3, [sp, #4]
 800685e:	5cf8      	ldrb	r0, [r7, r3]
 8006860:	18fe      	adds	r6, r7, r3
 8006862:	f7ff ffbb 	bl	80067dc <__hexdig_fun>
 8006866:	2800      	cmp	r0, #0
 8006868:	d062      	beq.n	8006930 <__gethex+0x12a>
 800686a:	4633      	mov	r3, r6
 800686c:	7818      	ldrb	r0, [r3, #0]
 800686e:	2830      	cmp	r0, #48	; 0x30
 8006870:	461f      	mov	r7, r3
 8006872:	f103 0301 	add.w	r3, r3, #1
 8006876:	d0f9      	beq.n	800686c <__gethex+0x66>
 8006878:	f7ff ffb0 	bl	80067dc <__hexdig_fun>
 800687c:	fab0 f580 	clz	r5, r0
 8006880:	096d      	lsrs	r5, r5, #5
 8006882:	4634      	mov	r4, r6
 8006884:	f04f 0b01 	mov.w	fp, #1
 8006888:	463a      	mov	r2, r7
 800688a:	4616      	mov	r6, r2
 800688c:	3201      	adds	r2, #1
 800688e:	7830      	ldrb	r0, [r6, #0]
 8006890:	f7ff ffa4 	bl	80067dc <__hexdig_fun>
 8006894:	2800      	cmp	r0, #0
 8006896:	d1f8      	bne.n	800688a <__gethex+0x84>
 8006898:	9a01      	ldr	r2, [sp, #4]
 800689a:	9903      	ldr	r1, [sp, #12]
 800689c:	4630      	mov	r0, r6
 800689e:	f001 f81b 	bl	80078d8 <strncmp>
 80068a2:	b950      	cbnz	r0, 80068ba <__gethex+0xb4>
 80068a4:	b954      	cbnz	r4, 80068bc <__gethex+0xb6>
 80068a6:	9b01      	ldr	r3, [sp, #4]
 80068a8:	18f4      	adds	r4, r6, r3
 80068aa:	4622      	mov	r2, r4
 80068ac:	4616      	mov	r6, r2
 80068ae:	3201      	adds	r2, #1
 80068b0:	7830      	ldrb	r0, [r6, #0]
 80068b2:	f7ff ff93 	bl	80067dc <__hexdig_fun>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d1f8      	bne.n	80068ac <__gethex+0xa6>
 80068ba:	b10c      	cbz	r4, 80068c0 <__gethex+0xba>
 80068bc:	1ba4      	subs	r4, r4, r6
 80068be:	00a4      	lsls	r4, r4, #2
 80068c0:	7833      	ldrb	r3, [r6, #0]
 80068c2:	2b50      	cmp	r3, #80	; 0x50
 80068c4:	d001      	beq.n	80068ca <__gethex+0xc4>
 80068c6:	2b70      	cmp	r3, #112	; 0x70
 80068c8:	d140      	bne.n	800694c <__gethex+0x146>
 80068ca:	7873      	ldrb	r3, [r6, #1]
 80068cc:	2b2b      	cmp	r3, #43	; 0x2b
 80068ce:	d031      	beq.n	8006934 <__gethex+0x12e>
 80068d0:	2b2d      	cmp	r3, #45	; 0x2d
 80068d2:	d033      	beq.n	800693c <__gethex+0x136>
 80068d4:	1c71      	adds	r1, r6, #1
 80068d6:	f04f 0900 	mov.w	r9, #0
 80068da:	7808      	ldrb	r0, [r1, #0]
 80068dc:	f7ff ff7e 	bl	80067dc <__hexdig_fun>
 80068e0:	1e43      	subs	r3, r0, #1
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b18      	cmp	r3, #24
 80068e6:	d831      	bhi.n	800694c <__gethex+0x146>
 80068e8:	f1a0 0210 	sub.w	r2, r0, #16
 80068ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80068f0:	f7ff ff74 	bl	80067dc <__hexdig_fun>
 80068f4:	1e43      	subs	r3, r0, #1
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b18      	cmp	r3, #24
 80068fa:	d922      	bls.n	8006942 <__gethex+0x13c>
 80068fc:	f1b9 0f00 	cmp.w	r9, #0
 8006900:	d000      	beq.n	8006904 <__gethex+0xfe>
 8006902:	4252      	negs	r2, r2
 8006904:	4414      	add	r4, r2
 8006906:	f8ca 1000 	str.w	r1, [sl]
 800690a:	b30d      	cbz	r5, 8006950 <__gethex+0x14a>
 800690c:	f1bb 0f00 	cmp.w	fp, #0
 8006910:	bf0c      	ite	eq
 8006912:	2706      	moveq	r7, #6
 8006914:	2700      	movne	r7, #0
 8006916:	4638      	mov	r0, r7
 8006918:	b00b      	add	sp, #44	; 0x2c
 800691a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691e:	f10b 0b01 	add.w	fp, fp, #1
 8006922:	e78a      	b.n	800683a <__gethex+0x34>
 8006924:	2500      	movs	r5, #0
 8006926:	462c      	mov	r4, r5
 8006928:	e7ae      	b.n	8006888 <__gethex+0x82>
 800692a:	463e      	mov	r6, r7
 800692c:	2501      	movs	r5, #1
 800692e:	e7c7      	b.n	80068c0 <__gethex+0xba>
 8006930:	4604      	mov	r4, r0
 8006932:	e7fb      	b.n	800692c <__gethex+0x126>
 8006934:	f04f 0900 	mov.w	r9, #0
 8006938:	1cb1      	adds	r1, r6, #2
 800693a:	e7ce      	b.n	80068da <__gethex+0xd4>
 800693c:	f04f 0901 	mov.w	r9, #1
 8006940:	e7fa      	b.n	8006938 <__gethex+0x132>
 8006942:	230a      	movs	r3, #10
 8006944:	fb03 0202 	mla	r2, r3, r2, r0
 8006948:	3a10      	subs	r2, #16
 800694a:	e7cf      	b.n	80068ec <__gethex+0xe6>
 800694c:	4631      	mov	r1, r6
 800694e:	e7da      	b.n	8006906 <__gethex+0x100>
 8006950:	1bf3      	subs	r3, r6, r7
 8006952:	3b01      	subs	r3, #1
 8006954:	4629      	mov	r1, r5
 8006956:	2b07      	cmp	r3, #7
 8006958:	dc49      	bgt.n	80069ee <__gethex+0x1e8>
 800695a:	9802      	ldr	r0, [sp, #8]
 800695c:	f000 fa5d 	bl	8006e1a <_Balloc>
 8006960:	9b01      	ldr	r3, [sp, #4]
 8006962:	f100 0914 	add.w	r9, r0, #20
 8006966:	f04f 0b00 	mov.w	fp, #0
 800696a:	f1c3 0301 	rsb	r3, r3, #1
 800696e:	4605      	mov	r5, r0
 8006970:	f8cd 9010 	str.w	r9, [sp, #16]
 8006974:	46da      	mov	sl, fp
 8006976:	9308      	str	r3, [sp, #32]
 8006978:	42b7      	cmp	r7, r6
 800697a:	d33b      	bcc.n	80069f4 <__gethex+0x1ee>
 800697c:	9804      	ldr	r0, [sp, #16]
 800697e:	f840 ab04 	str.w	sl, [r0], #4
 8006982:	eba0 0009 	sub.w	r0, r0, r9
 8006986:	1080      	asrs	r0, r0, #2
 8006988:	6128      	str	r0, [r5, #16]
 800698a:	0147      	lsls	r7, r0, #5
 800698c:	4650      	mov	r0, sl
 800698e:	f000 fb08 	bl	8006fa2 <__hi0bits>
 8006992:	f8d8 6000 	ldr.w	r6, [r8]
 8006996:	1a3f      	subs	r7, r7, r0
 8006998:	42b7      	cmp	r7, r6
 800699a:	dd64      	ble.n	8006a66 <__gethex+0x260>
 800699c:	1bbf      	subs	r7, r7, r6
 800699e:	4639      	mov	r1, r7
 80069a0:	4628      	mov	r0, r5
 80069a2:	f000 fe17 	bl	80075d4 <__any_on>
 80069a6:	4682      	mov	sl, r0
 80069a8:	b178      	cbz	r0, 80069ca <__gethex+0x1c4>
 80069aa:	1e7b      	subs	r3, r7, #1
 80069ac:	1159      	asrs	r1, r3, #5
 80069ae:	f003 021f 	and.w	r2, r3, #31
 80069b2:	f04f 0a01 	mov.w	sl, #1
 80069b6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80069ba:	fa0a f202 	lsl.w	r2, sl, r2
 80069be:	420a      	tst	r2, r1
 80069c0:	d003      	beq.n	80069ca <__gethex+0x1c4>
 80069c2:	4553      	cmp	r3, sl
 80069c4:	dc46      	bgt.n	8006a54 <__gethex+0x24e>
 80069c6:	f04f 0a02 	mov.w	sl, #2
 80069ca:	4639      	mov	r1, r7
 80069cc:	4628      	mov	r0, r5
 80069ce:	f7ff fecb 	bl	8006768 <rshift>
 80069d2:	443c      	add	r4, r7
 80069d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80069d8:	42a3      	cmp	r3, r4
 80069da:	da52      	bge.n	8006a82 <__gethex+0x27c>
 80069dc:	4629      	mov	r1, r5
 80069de:	9802      	ldr	r0, [sp, #8]
 80069e0:	f000 fa4f 	bl	8006e82 <_Bfree>
 80069e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80069e6:	2300      	movs	r3, #0
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	27a3      	movs	r7, #163	; 0xa3
 80069ec:	e793      	b.n	8006916 <__gethex+0x110>
 80069ee:	3101      	adds	r1, #1
 80069f0:	105b      	asrs	r3, r3, #1
 80069f2:	e7b0      	b.n	8006956 <__gethex+0x150>
 80069f4:	1e73      	subs	r3, r6, #1
 80069f6:	9305      	str	r3, [sp, #20]
 80069f8:	9a07      	ldr	r2, [sp, #28]
 80069fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d018      	beq.n	8006a34 <__gethex+0x22e>
 8006a02:	f1bb 0f20 	cmp.w	fp, #32
 8006a06:	d107      	bne.n	8006a18 <__gethex+0x212>
 8006a08:	9b04      	ldr	r3, [sp, #16]
 8006a0a:	f8c3 a000 	str.w	sl, [r3]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	f04f 0a00 	mov.w	sl, #0
 8006a14:	9304      	str	r3, [sp, #16]
 8006a16:	46d3      	mov	fp, sl
 8006a18:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006a1c:	f7ff fede 	bl	80067dc <__hexdig_fun>
 8006a20:	f000 000f 	and.w	r0, r0, #15
 8006a24:	fa00 f00b 	lsl.w	r0, r0, fp
 8006a28:	ea4a 0a00 	orr.w	sl, sl, r0
 8006a2c:	f10b 0b04 	add.w	fp, fp, #4
 8006a30:	9b05      	ldr	r3, [sp, #20]
 8006a32:	e00d      	b.n	8006a50 <__gethex+0x24a>
 8006a34:	9b05      	ldr	r3, [sp, #20]
 8006a36:	9a08      	ldr	r2, [sp, #32]
 8006a38:	4413      	add	r3, r2
 8006a3a:	42bb      	cmp	r3, r7
 8006a3c:	d3e1      	bcc.n	8006a02 <__gethex+0x1fc>
 8006a3e:	4618      	mov	r0, r3
 8006a40:	9a01      	ldr	r2, [sp, #4]
 8006a42:	9903      	ldr	r1, [sp, #12]
 8006a44:	9309      	str	r3, [sp, #36]	; 0x24
 8006a46:	f000 ff47 	bl	80078d8 <strncmp>
 8006a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d1d8      	bne.n	8006a02 <__gethex+0x1fc>
 8006a50:	461e      	mov	r6, r3
 8006a52:	e791      	b.n	8006978 <__gethex+0x172>
 8006a54:	1eb9      	subs	r1, r7, #2
 8006a56:	4628      	mov	r0, r5
 8006a58:	f000 fdbc 	bl	80075d4 <__any_on>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d0b2      	beq.n	80069c6 <__gethex+0x1c0>
 8006a60:	f04f 0a03 	mov.w	sl, #3
 8006a64:	e7b1      	b.n	80069ca <__gethex+0x1c4>
 8006a66:	da09      	bge.n	8006a7c <__gethex+0x276>
 8006a68:	1bf7      	subs	r7, r6, r7
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	463a      	mov	r2, r7
 8006a6e:	9802      	ldr	r0, [sp, #8]
 8006a70:	f000 fbd2 	bl	8007218 <__lshift>
 8006a74:	1be4      	subs	r4, r4, r7
 8006a76:	4605      	mov	r5, r0
 8006a78:	f100 0914 	add.w	r9, r0, #20
 8006a7c:	f04f 0a00 	mov.w	sl, #0
 8006a80:	e7a8      	b.n	80069d4 <__gethex+0x1ce>
 8006a82:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006a86:	42a0      	cmp	r0, r4
 8006a88:	dd6a      	ble.n	8006b60 <__gethex+0x35a>
 8006a8a:	1b04      	subs	r4, r0, r4
 8006a8c:	42a6      	cmp	r6, r4
 8006a8e:	dc2e      	bgt.n	8006aee <__gethex+0x2e8>
 8006a90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d022      	beq.n	8006ade <__gethex+0x2d8>
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d024      	beq.n	8006ae6 <__gethex+0x2e0>
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d115      	bne.n	8006acc <__gethex+0x2c6>
 8006aa0:	42a6      	cmp	r6, r4
 8006aa2:	d113      	bne.n	8006acc <__gethex+0x2c6>
 8006aa4:	2e01      	cmp	r6, #1
 8006aa6:	dc0b      	bgt.n	8006ac0 <__gethex+0x2ba>
 8006aa8:	9a06      	ldr	r2, [sp, #24]
 8006aaa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	612b      	str	r3, [r5, #16]
 8006ab4:	f8c9 3000 	str.w	r3, [r9]
 8006ab8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006aba:	2762      	movs	r7, #98	; 0x62
 8006abc:	601d      	str	r5, [r3, #0]
 8006abe:	e72a      	b.n	8006916 <__gethex+0x110>
 8006ac0:	1e71      	subs	r1, r6, #1
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	f000 fd86 	bl	80075d4 <__any_on>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d1ed      	bne.n	8006aa8 <__gethex+0x2a2>
 8006acc:	4629      	mov	r1, r5
 8006ace:	9802      	ldr	r0, [sp, #8]
 8006ad0:	f000 f9d7 	bl	8006e82 <_Bfree>
 8006ad4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	2750      	movs	r7, #80	; 0x50
 8006adc:	e71b      	b.n	8006916 <__gethex+0x110>
 8006ade:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0e1      	beq.n	8006aa8 <__gethex+0x2a2>
 8006ae4:	e7f2      	b.n	8006acc <__gethex+0x2c6>
 8006ae6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1dd      	bne.n	8006aa8 <__gethex+0x2a2>
 8006aec:	e7ee      	b.n	8006acc <__gethex+0x2c6>
 8006aee:	1e67      	subs	r7, r4, #1
 8006af0:	f1ba 0f00 	cmp.w	sl, #0
 8006af4:	d131      	bne.n	8006b5a <__gethex+0x354>
 8006af6:	b127      	cbz	r7, 8006b02 <__gethex+0x2fc>
 8006af8:	4639      	mov	r1, r7
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 fd6a 	bl	80075d4 <__any_on>
 8006b00:	4682      	mov	sl, r0
 8006b02:	117a      	asrs	r2, r7, #5
 8006b04:	2301      	movs	r3, #1
 8006b06:	f007 071f 	and.w	r7, r7, #31
 8006b0a:	fa03 f707 	lsl.w	r7, r3, r7
 8006b0e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006b12:	4621      	mov	r1, r4
 8006b14:	421f      	tst	r7, r3
 8006b16:	4628      	mov	r0, r5
 8006b18:	bf18      	it	ne
 8006b1a:	f04a 0a02 	orrne.w	sl, sl, #2
 8006b1e:	1b36      	subs	r6, r6, r4
 8006b20:	f7ff fe22 	bl	8006768 <rshift>
 8006b24:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006b28:	2702      	movs	r7, #2
 8006b2a:	f1ba 0f00 	cmp.w	sl, #0
 8006b2e:	d048      	beq.n	8006bc2 <__gethex+0x3bc>
 8006b30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d015      	beq.n	8006b64 <__gethex+0x35e>
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d017      	beq.n	8006b6c <__gethex+0x366>
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d109      	bne.n	8006b54 <__gethex+0x34e>
 8006b40:	f01a 0f02 	tst.w	sl, #2
 8006b44:	d006      	beq.n	8006b54 <__gethex+0x34e>
 8006b46:	f8d9 3000 	ldr.w	r3, [r9]
 8006b4a:	ea4a 0a03 	orr.w	sl, sl, r3
 8006b4e:	f01a 0f01 	tst.w	sl, #1
 8006b52:	d10e      	bne.n	8006b72 <__gethex+0x36c>
 8006b54:	f047 0710 	orr.w	r7, r7, #16
 8006b58:	e033      	b.n	8006bc2 <__gethex+0x3bc>
 8006b5a:	f04f 0a01 	mov.w	sl, #1
 8006b5e:	e7d0      	b.n	8006b02 <__gethex+0x2fc>
 8006b60:	2701      	movs	r7, #1
 8006b62:	e7e2      	b.n	8006b2a <__gethex+0x324>
 8006b64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b66:	f1c3 0301 	rsb	r3, r3, #1
 8006b6a:	9315      	str	r3, [sp, #84]	; 0x54
 8006b6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <__gethex+0x34e>
 8006b72:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006b76:	f105 0314 	add.w	r3, r5, #20
 8006b7a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006b7e:	eb03 010a 	add.w	r1, r3, sl
 8006b82:	f04f 0c00 	mov.w	ip, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b8c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006b90:	d01c      	beq.n	8006bcc <__gethex+0x3c6>
 8006b92:	3201      	adds	r2, #1
 8006b94:	6002      	str	r2, [r0, #0]
 8006b96:	2f02      	cmp	r7, #2
 8006b98:	f105 0314 	add.w	r3, r5, #20
 8006b9c:	d138      	bne.n	8006c10 <__gethex+0x40a>
 8006b9e:	f8d8 2000 	ldr.w	r2, [r8]
 8006ba2:	3a01      	subs	r2, #1
 8006ba4:	42b2      	cmp	r2, r6
 8006ba6:	d10a      	bne.n	8006bbe <__gethex+0x3b8>
 8006ba8:	1171      	asrs	r1, r6, #5
 8006baa:	2201      	movs	r2, #1
 8006bac:	f006 061f 	and.w	r6, r6, #31
 8006bb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bb4:	fa02 f606 	lsl.w	r6, r2, r6
 8006bb8:	421e      	tst	r6, r3
 8006bba:	bf18      	it	ne
 8006bbc:	4617      	movne	r7, r2
 8006bbe:	f047 0720 	orr.w	r7, r7, #32
 8006bc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006bc4:	601d      	str	r5, [r3, #0]
 8006bc6:	9b06      	ldr	r3, [sp, #24]
 8006bc8:	601c      	str	r4, [r3, #0]
 8006bca:	e6a4      	b.n	8006916 <__gethex+0x110>
 8006bcc:	4299      	cmp	r1, r3
 8006bce:	f843 cc04 	str.w	ip, [r3, #-4]
 8006bd2:	d8d8      	bhi.n	8006b86 <__gethex+0x380>
 8006bd4:	68ab      	ldr	r3, [r5, #8]
 8006bd6:	4599      	cmp	r9, r3
 8006bd8:	db12      	blt.n	8006c00 <__gethex+0x3fa>
 8006bda:	6869      	ldr	r1, [r5, #4]
 8006bdc:	9802      	ldr	r0, [sp, #8]
 8006bde:	3101      	adds	r1, #1
 8006be0:	f000 f91b 	bl	8006e1a <_Balloc>
 8006be4:	692a      	ldr	r2, [r5, #16]
 8006be6:	3202      	adds	r2, #2
 8006be8:	f105 010c 	add.w	r1, r5, #12
 8006bec:	4683      	mov	fp, r0
 8006bee:	0092      	lsls	r2, r2, #2
 8006bf0:	300c      	adds	r0, #12
 8006bf2:	f000 f905 	bl	8006e00 <memcpy>
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	9802      	ldr	r0, [sp, #8]
 8006bfa:	f000 f942 	bl	8006e82 <_Bfree>
 8006bfe:	465d      	mov	r5, fp
 8006c00:	692b      	ldr	r3, [r5, #16]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006c08:	612a      	str	r2, [r5, #16]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	615a      	str	r2, [r3, #20]
 8006c0e:	e7c2      	b.n	8006b96 <__gethex+0x390>
 8006c10:	692a      	ldr	r2, [r5, #16]
 8006c12:	454a      	cmp	r2, r9
 8006c14:	dd0b      	ble.n	8006c2e <__gethex+0x428>
 8006c16:	2101      	movs	r1, #1
 8006c18:	4628      	mov	r0, r5
 8006c1a:	f7ff fda5 	bl	8006768 <rshift>
 8006c1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c22:	3401      	adds	r4, #1
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	f6ff aed9 	blt.w	80069dc <__gethex+0x1d6>
 8006c2a:	2701      	movs	r7, #1
 8006c2c:	e7c7      	b.n	8006bbe <__gethex+0x3b8>
 8006c2e:	f016 061f 	ands.w	r6, r6, #31
 8006c32:	d0fa      	beq.n	8006c2a <__gethex+0x424>
 8006c34:	449a      	add	sl, r3
 8006c36:	f1c6 0620 	rsb	r6, r6, #32
 8006c3a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006c3e:	f000 f9b0 	bl	8006fa2 <__hi0bits>
 8006c42:	42b0      	cmp	r0, r6
 8006c44:	dbe7      	blt.n	8006c16 <__gethex+0x410>
 8006c46:	e7f0      	b.n	8006c2a <__gethex+0x424>

08006c48 <L_shift>:
 8006c48:	f1c2 0208 	rsb	r2, r2, #8
 8006c4c:	0092      	lsls	r2, r2, #2
 8006c4e:	b570      	push	{r4, r5, r6, lr}
 8006c50:	f1c2 0620 	rsb	r6, r2, #32
 8006c54:	6843      	ldr	r3, [r0, #4]
 8006c56:	6804      	ldr	r4, [r0, #0]
 8006c58:	fa03 f506 	lsl.w	r5, r3, r6
 8006c5c:	432c      	orrs	r4, r5
 8006c5e:	40d3      	lsrs	r3, r2
 8006c60:	6004      	str	r4, [r0, #0]
 8006c62:	f840 3f04 	str.w	r3, [r0, #4]!
 8006c66:	4288      	cmp	r0, r1
 8006c68:	d3f4      	bcc.n	8006c54 <L_shift+0xc>
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}

08006c6c <__match>:
 8006c6c:	b530      	push	{r4, r5, lr}
 8006c6e:	6803      	ldr	r3, [r0, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c76:	b914      	cbnz	r4, 8006c7e <__match+0x12>
 8006c78:	6003      	str	r3, [r0, #0]
 8006c7a:	2001      	movs	r0, #1
 8006c7c:	bd30      	pop	{r4, r5, pc}
 8006c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006c86:	2d19      	cmp	r5, #25
 8006c88:	bf98      	it	ls
 8006c8a:	3220      	addls	r2, #32
 8006c8c:	42a2      	cmp	r2, r4
 8006c8e:	d0f0      	beq.n	8006c72 <__match+0x6>
 8006c90:	2000      	movs	r0, #0
 8006c92:	e7f3      	b.n	8006c7c <__match+0x10>

08006c94 <__hexnan>:
 8006c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c98:	680b      	ldr	r3, [r1, #0]
 8006c9a:	6801      	ldr	r1, [r0, #0]
 8006c9c:	115f      	asrs	r7, r3, #5
 8006c9e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006ca2:	f013 031f 	ands.w	r3, r3, #31
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	bf18      	it	ne
 8006caa:	3704      	addne	r7, #4
 8006cac:	2500      	movs	r5, #0
 8006cae:	1f3e      	subs	r6, r7, #4
 8006cb0:	4682      	mov	sl, r0
 8006cb2:	4690      	mov	r8, r2
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	f847 5c04 	str.w	r5, [r7, #-4]
 8006cba:	46b1      	mov	r9, r6
 8006cbc:	4634      	mov	r4, r6
 8006cbe:	9502      	str	r5, [sp, #8]
 8006cc0:	46ab      	mov	fp, r5
 8006cc2:	784a      	ldrb	r2, [r1, #1]
 8006cc4:	1c4b      	adds	r3, r1, #1
 8006cc6:	9303      	str	r3, [sp, #12]
 8006cc8:	b342      	cbz	r2, 8006d1c <__hexnan+0x88>
 8006cca:	4610      	mov	r0, r2
 8006ccc:	9105      	str	r1, [sp, #20]
 8006cce:	9204      	str	r2, [sp, #16]
 8006cd0:	f7ff fd84 	bl	80067dc <__hexdig_fun>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d143      	bne.n	8006d60 <__hexnan+0xcc>
 8006cd8:	9a04      	ldr	r2, [sp, #16]
 8006cda:	9905      	ldr	r1, [sp, #20]
 8006cdc:	2a20      	cmp	r2, #32
 8006cde:	d818      	bhi.n	8006d12 <__hexnan+0x7e>
 8006ce0:	9b02      	ldr	r3, [sp, #8]
 8006ce2:	459b      	cmp	fp, r3
 8006ce4:	dd13      	ble.n	8006d0e <__hexnan+0x7a>
 8006ce6:	454c      	cmp	r4, r9
 8006ce8:	d206      	bcs.n	8006cf8 <__hexnan+0x64>
 8006cea:	2d07      	cmp	r5, #7
 8006cec:	dc04      	bgt.n	8006cf8 <__hexnan+0x64>
 8006cee:	462a      	mov	r2, r5
 8006cf0:	4649      	mov	r1, r9
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	f7ff ffa8 	bl	8006c48 <L_shift>
 8006cf8:	4544      	cmp	r4, r8
 8006cfa:	d944      	bls.n	8006d86 <__hexnan+0xf2>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f1a4 0904 	sub.w	r9, r4, #4
 8006d02:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d06:	f8cd b008 	str.w	fp, [sp, #8]
 8006d0a:	464c      	mov	r4, r9
 8006d0c:	461d      	mov	r5, r3
 8006d0e:	9903      	ldr	r1, [sp, #12]
 8006d10:	e7d7      	b.n	8006cc2 <__hexnan+0x2e>
 8006d12:	2a29      	cmp	r2, #41	; 0x29
 8006d14:	d14a      	bne.n	8006dac <__hexnan+0x118>
 8006d16:	3102      	adds	r1, #2
 8006d18:	f8ca 1000 	str.w	r1, [sl]
 8006d1c:	f1bb 0f00 	cmp.w	fp, #0
 8006d20:	d044      	beq.n	8006dac <__hexnan+0x118>
 8006d22:	454c      	cmp	r4, r9
 8006d24:	d206      	bcs.n	8006d34 <__hexnan+0xa0>
 8006d26:	2d07      	cmp	r5, #7
 8006d28:	dc04      	bgt.n	8006d34 <__hexnan+0xa0>
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	4649      	mov	r1, r9
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7ff ff8a 	bl	8006c48 <L_shift>
 8006d34:	4544      	cmp	r4, r8
 8006d36:	d928      	bls.n	8006d8a <__hexnan+0xf6>
 8006d38:	4643      	mov	r3, r8
 8006d3a:	f854 2b04 	ldr.w	r2, [r4], #4
 8006d3e:	f843 2b04 	str.w	r2, [r3], #4
 8006d42:	42a6      	cmp	r6, r4
 8006d44:	d2f9      	bcs.n	8006d3a <__hexnan+0xa6>
 8006d46:	2200      	movs	r2, #0
 8006d48:	f843 2b04 	str.w	r2, [r3], #4
 8006d4c:	429e      	cmp	r6, r3
 8006d4e:	d2fb      	bcs.n	8006d48 <__hexnan+0xb4>
 8006d50:	6833      	ldr	r3, [r6, #0]
 8006d52:	b91b      	cbnz	r3, 8006d5c <__hexnan+0xc8>
 8006d54:	4546      	cmp	r6, r8
 8006d56:	d127      	bne.n	8006da8 <__hexnan+0x114>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	6033      	str	r3, [r6, #0]
 8006d5c:	2005      	movs	r0, #5
 8006d5e:	e026      	b.n	8006dae <__hexnan+0x11a>
 8006d60:	3501      	adds	r5, #1
 8006d62:	2d08      	cmp	r5, #8
 8006d64:	f10b 0b01 	add.w	fp, fp, #1
 8006d68:	dd06      	ble.n	8006d78 <__hexnan+0xe4>
 8006d6a:	4544      	cmp	r4, r8
 8006d6c:	d9cf      	bls.n	8006d0e <__hexnan+0x7a>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d74:	2501      	movs	r5, #1
 8006d76:	3c04      	subs	r4, #4
 8006d78:	6822      	ldr	r2, [r4, #0]
 8006d7a:	f000 000f 	and.w	r0, r0, #15
 8006d7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006d82:	6020      	str	r0, [r4, #0]
 8006d84:	e7c3      	b.n	8006d0e <__hexnan+0x7a>
 8006d86:	2508      	movs	r5, #8
 8006d88:	e7c1      	b.n	8006d0e <__hexnan+0x7a>
 8006d8a:	9b01      	ldr	r3, [sp, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0df      	beq.n	8006d50 <__hexnan+0xbc>
 8006d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d94:	f1c3 0320 	rsb	r3, r3, #32
 8006d98:	fa22 f303 	lsr.w	r3, r2, r3
 8006d9c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006da0:	401a      	ands	r2, r3
 8006da2:	f847 2c04 	str.w	r2, [r7, #-4]
 8006da6:	e7d3      	b.n	8006d50 <__hexnan+0xbc>
 8006da8:	3e04      	subs	r6, #4
 8006daa:	e7d1      	b.n	8006d50 <__hexnan+0xbc>
 8006dac:	2004      	movs	r0, #4
 8006dae:	b007      	add	sp, #28
 8006db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006db4 <__locale_ctype_ptr_l>:
 8006db4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006db8:	4770      	bx	lr

08006dba <__localeconv_l>:
 8006dba:	30f0      	adds	r0, #240	; 0xf0
 8006dbc:	4770      	bx	lr
	...

08006dc0 <_localeconv_r>:
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <_localeconv_r+0x14>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6a18      	ldr	r0, [r3, #32]
 8006dc6:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <_localeconv_r+0x18>)
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	bf08      	it	eq
 8006dcc:	4618      	moveq	r0, r3
 8006dce:	30f0      	adds	r0, #240	; 0xf0
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	20000184 	.word	0x20000184
 8006dd8:	200001e8 	.word	0x200001e8

08006ddc <__ascii_mbtowc>:
 8006ddc:	b082      	sub	sp, #8
 8006dde:	b901      	cbnz	r1, 8006de2 <__ascii_mbtowc+0x6>
 8006de0:	a901      	add	r1, sp, #4
 8006de2:	b142      	cbz	r2, 8006df6 <__ascii_mbtowc+0x1a>
 8006de4:	b14b      	cbz	r3, 8006dfa <__ascii_mbtowc+0x1e>
 8006de6:	7813      	ldrb	r3, [r2, #0]
 8006de8:	600b      	str	r3, [r1, #0]
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	1c10      	adds	r0, r2, #0
 8006dee:	bf18      	it	ne
 8006df0:	2001      	movne	r0, #1
 8006df2:	b002      	add	sp, #8
 8006df4:	4770      	bx	lr
 8006df6:	4610      	mov	r0, r2
 8006df8:	e7fb      	b.n	8006df2 <__ascii_mbtowc+0x16>
 8006dfa:	f06f 0001 	mvn.w	r0, #1
 8006dfe:	e7f8      	b.n	8006df2 <__ascii_mbtowc+0x16>

08006e00 <memcpy>:
 8006e00:	b510      	push	{r4, lr}
 8006e02:	1e43      	subs	r3, r0, #1
 8006e04:	440a      	add	r2, r1
 8006e06:	4291      	cmp	r1, r2
 8006e08:	d100      	bne.n	8006e0c <memcpy+0xc>
 8006e0a:	bd10      	pop	{r4, pc}
 8006e0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e14:	e7f7      	b.n	8006e06 <memcpy+0x6>

08006e16 <__malloc_lock>:
 8006e16:	4770      	bx	lr

08006e18 <__malloc_unlock>:
 8006e18:	4770      	bx	lr

08006e1a <_Balloc>:
 8006e1a:	b570      	push	{r4, r5, r6, lr}
 8006e1c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e1e:	4604      	mov	r4, r0
 8006e20:	460e      	mov	r6, r1
 8006e22:	b93d      	cbnz	r5, 8006e34 <_Balloc+0x1a>
 8006e24:	2010      	movs	r0, #16
 8006e26:	f7fd f877 	bl	8003f18 <malloc>
 8006e2a:	6260      	str	r0, [r4, #36]	; 0x24
 8006e2c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e30:	6005      	str	r5, [r0, #0]
 8006e32:	60c5      	str	r5, [r0, #12]
 8006e34:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006e36:	68eb      	ldr	r3, [r5, #12]
 8006e38:	b183      	cbz	r3, 8006e5c <_Balloc+0x42>
 8006e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006e42:	b9b8      	cbnz	r0, 8006e74 <_Balloc+0x5a>
 8006e44:	2101      	movs	r1, #1
 8006e46:	fa01 f506 	lsl.w	r5, r1, r6
 8006e4a:	1d6a      	adds	r2, r5, #5
 8006e4c:	0092      	lsls	r2, r2, #2
 8006e4e:	4620      	mov	r0, r4
 8006e50:	f000 fbe1 	bl	8007616 <_calloc_r>
 8006e54:	b160      	cbz	r0, 8006e70 <_Balloc+0x56>
 8006e56:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006e5a:	e00e      	b.n	8006e7a <_Balloc+0x60>
 8006e5c:	2221      	movs	r2, #33	; 0x21
 8006e5e:	2104      	movs	r1, #4
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fbd8 	bl	8007616 <_calloc_r>
 8006e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e68:	60e8      	str	r0, [r5, #12]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e4      	bne.n	8006e3a <_Balloc+0x20>
 8006e70:	2000      	movs	r0, #0
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	6802      	ldr	r2, [r0, #0]
 8006e76:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e80:	e7f7      	b.n	8006e72 <_Balloc+0x58>

08006e82 <_Bfree>:
 8006e82:	b570      	push	{r4, r5, r6, lr}
 8006e84:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e86:	4606      	mov	r6, r0
 8006e88:	460d      	mov	r5, r1
 8006e8a:	b93c      	cbnz	r4, 8006e9c <_Bfree+0x1a>
 8006e8c:	2010      	movs	r0, #16
 8006e8e:	f7fd f843 	bl	8003f18 <malloc>
 8006e92:	6270      	str	r0, [r6, #36]	; 0x24
 8006e94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e98:	6004      	str	r4, [r0, #0]
 8006e9a:	60c4      	str	r4, [r0, #12]
 8006e9c:	b13d      	cbz	r5, 8006eae <_Bfree+0x2c>
 8006e9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ea0:	686a      	ldr	r2, [r5, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ea8:	6029      	str	r1, [r5, #0]
 8006eaa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006eae:	bd70      	pop	{r4, r5, r6, pc}

08006eb0 <__multadd>:
 8006eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eb4:	690d      	ldr	r5, [r1, #16]
 8006eb6:	461f      	mov	r7, r3
 8006eb8:	4606      	mov	r6, r0
 8006eba:	460c      	mov	r4, r1
 8006ebc:	f101 0c14 	add.w	ip, r1, #20
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	f8dc 0000 	ldr.w	r0, [ip]
 8006ec6:	b281      	uxth	r1, r0
 8006ec8:	fb02 7101 	mla	r1, r2, r1, r7
 8006ecc:	0c0f      	lsrs	r7, r1, #16
 8006ece:	0c00      	lsrs	r0, r0, #16
 8006ed0:	fb02 7000 	mla	r0, r2, r0, r7
 8006ed4:	b289      	uxth	r1, r1
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006edc:	429d      	cmp	r5, r3
 8006ede:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006ee2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ee6:	dcec      	bgt.n	8006ec2 <__multadd+0x12>
 8006ee8:	b1d7      	cbz	r7, 8006f20 <__multadd+0x70>
 8006eea:	68a3      	ldr	r3, [r4, #8]
 8006eec:	42ab      	cmp	r3, r5
 8006eee:	dc12      	bgt.n	8006f16 <__multadd+0x66>
 8006ef0:	6861      	ldr	r1, [r4, #4]
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	3101      	adds	r1, #1
 8006ef6:	f7ff ff90 	bl	8006e1a <_Balloc>
 8006efa:	6922      	ldr	r2, [r4, #16]
 8006efc:	3202      	adds	r2, #2
 8006efe:	f104 010c 	add.w	r1, r4, #12
 8006f02:	4680      	mov	r8, r0
 8006f04:	0092      	lsls	r2, r2, #2
 8006f06:	300c      	adds	r0, #12
 8006f08:	f7ff ff7a 	bl	8006e00 <memcpy>
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f7ff ffb7 	bl	8006e82 <_Bfree>
 8006f14:	4644      	mov	r4, r8
 8006f16:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f1a:	3501      	adds	r5, #1
 8006f1c:	615f      	str	r7, [r3, #20]
 8006f1e:	6125      	str	r5, [r4, #16]
 8006f20:	4620      	mov	r0, r4
 8006f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006f26 <__s2b>:
 8006f26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	4615      	mov	r5, r2
 8006f2e:	461f      	mov	r7, r3
 8006f30:	2209      	movs	r2, #9
 8006f32:	3308      	adds	r3, #8
 8006f34:	4606      	mov	r6, r0
 8006f36:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	db20      	blt.n	8006f84 <__s2b+0x5e>
 8006f42:	4630      	mov	r0, r6
 8006f44:	f7ff ff69 	bl	8006e1a <_Balloc>
 8006f48:	9b08      	ldr	r3, [sp, #32]
 8006f4a:	6143      	str	r3, [r0, #20]
 8006f4c:	2d09      	cmp	r5, #9
 8006f4e:	f04f 0301 	mov.w	r3, #1
 8006f52:	6103      	str	r3, [r0, #16]
 8006f54:	dd19      	ble.n	8006f8a <__s2b+0x64>
 8006f56:	f104 0809 	add.w	r8, r4, #9
 8006f5a:	46c1      	mov	r9, r8
 8006f5c:	442c      	add	r4, r5
 8006f5e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006f62:	4601      	mov	r1, r0
 8006f64:	3b30      	subs	r3, #48	; 0x30
 8006f66:	220a      	movs	r2, #10
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7ff ffa1 	bl	8006eb0 <__multadd>
 8006f6e:	45a1      	cmp	r9, r4
 8006f70:	d1f5      	bne.n	8006f5e <__s2b+0x38>
 8006f72:	eb08 0405 	add.w	r4, r8, r5
 8006f76:	3c08      	subs	r4, #8
 8006f78:	1b2d      	subs	r5, r5, r4
 8006f7a:	1963      	adds	r3, r4, r5
 8006f7c:	42bb      	cmp	r3, r7
 8006f7e:	db07      	blt.n	8006f90 <__s2b+0x6a>
 8006f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f84:	0052      	lsls	r2, r2, #1
 8006f86:	3101      	adds	r1, #1
 8006f88:	e7d9      	b.n	8006f3e <__s2b+0x18>
 8006f8a:	340a      	adds	r4, #10
 8006f8c:	2509      	movs	r5, #9
 8006f8e:	e7f3      	b.n	8006f78 <__s2b+0x52>
 8006f90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f94:	4601      	mov	r1, r0
 8006f96:	3b30      	subs	r3, #48	; 0x30
 8006f98:	220a      	movs	r2, #10
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f7ff ff88 	bl	8006eb0 <__multadd>
 8006fa0:	e7eb      	b.n	8006f7a <__s2b+0x54>

08006fa2 <__hi0bits>:
 8006fa2:	0c02      	lsrs	r2, r0, #16
 8006fa4:	0412      	lsls	r2, r2, #16
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	b9b2      	cbnz	r2, 8006fd8 <__hi0bits+0x36>
 8006faa:	0403      	lsls	r3, r0, #16
 8006fac:	2010      	movs	r0, #16
 8006fae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006fb2:	bf04      	itt	eq
 8006fb4:	021b      	lsleq	r3, r3, #8
 8006fb6:	3008      	addeq	r0, #8
 8006fb8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006fbc:	bf04      	itt	eq
 8006fbe:	011b      	lsleq	r3, r3, #4
 8006fc0:	3004      	addeq	r0, #4
 8006fc2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006fc6:	bf04      	itt	eq
 8006fc8:	009b      	lsleq	r3, r3, #2
 8006fca:	3002      	addeq	r0, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	db06      	blt.n	8006fde <__hi0bits+0x3c>
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	d503      	bpl.n	8006fdc <__hi0bits+0x3a>
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	4770      	bx	lr
 8006fd8:	2000      	movs	r0, #0
 8006fda:	e7e8      	b.n	8006fae <__hi0bits+0xc>
 8006fdc:	2020      	movs	r0, #32
 8006fde:	4770      	bx	lr

08006fe0 <__lo0bits>:
 8006fe0:	6803      	ldr	r3, [r0, #0]
 8006fe2:	f013 0207 	ands.w	r2, r3, #7
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	d00b      	beq.n	8007002 <__lo0bits+0x22>
 8006fea:	07da      	lsls	r2, r3, #31
 8006fec:	d423      	bmi.n	8007036 <__lo0bits+0x56>
 8006fee:	0798      	lsls	r0, r3, #30
 8006ff0:	bf49      	itett	mi
 8006ff2:	085b      	lsrmi	r3, r3, #1
 8006ff4:	089b      	lsrpl	r3, r3, #2
 8006ff6:	2001      	movmi	r0, #1
 8006ff8:	600b      	strmi	r3, [r1, #0]
 8006ffa:	bf5c      	itt	pl
 8006ffc:	600b      	strpl	r3, [r1, #0]
 8006ffe:	2002      	movpl	r0, #2
 8007000:	4770      	bx	lr
 8007002:	b298      	uxth	r0, r3
 8007004:	b9a8      	cbnz	r0, 8007032 <__lo0bits+0x52>
 8007006:	0c1b      	lsrs	r3, r3, #16
 8007008:	2010      	movs	r0, #16
 800700a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800700e:	bf04      	itt	eq
 8007010:	0a1b      	lsreq	r3, r3, #8
 8007012:	3008      	addeq	r0, #8
 8007014:	071a      	lsls	r2, r3, #28
 8007016:	bf04      	itt	eq
 8007018:	091b      	lsreq	r3, r3, #4
 800701a:	3004      	addeq	r0, #4
 800701c:	079a      	lsls	r2, r3, #30
 800701e:	bf04      	itt	eq
 8007020:	089b      	lsreq	r3, r3, #2
 8007022:	3002      	addeq	r0, #2
 8007024:	07da      	lsls	r2, r3, #31
 8007026:	d402      	bmi.n	800702e <__lo0bits+0x4e>
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	d006      	beq.n	800703a <__lo0bits+0x5a>
 800702c:	3001      	adds	r0, #1
 800702e:	600b      	str	r3, [r1, #0]
 8007030:	4770      	bx	lr
 8007032:	4610      	mov	r0, r2
 8007034:	e7e9      	b.n	800700a <__lo0bits+0x2a>
 8007036:	2000      	movs	r0, #0
 8007038:	4770      	bx	lr
 800703a:	2020      	movs	r0, #32
 800703c:	4770      	bx	lr

0800703e <__i2b>:
 800703e:	b510      	push	{r4, lr}
 8007040:	460c      	mov	r4, r1
 8007042:	2101      	movs	r1, #1
 8007044:	f7ff fee9 	bl	8006e1a <_Balloc>
 8007048:	2201      	movs	r2, #1
 800704a:	6144      	str	r4, [r0, #20]
 800704c:	6102      	str	r2, [r0, #16]
 800704e:	bd10      	pop	{r4, pc}

08007050 <__multiply>:
 8007050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007054:	4614      	mov	r4, r2
 8007056:	690a      	ldr	r2, [r1, #16]
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	429a      	cmp	r2, r3
 800705c:	bfb8      	it	lt
 800705e:	460b      	movlt	r3, r1
 8007060:	4688      	mov	r8, r1
 8007062:	bfbc      	itt	lt
 8007064:	46a0      	movlt	r8, r4
 8007066:	461c      	movlt	r4, r3
 8007068:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800706c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007070:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007074:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007078:	eb07 0609 	add.w	r6, r7, r9
 800707c:	42b3      	cmp	r3, r6
 800707e:	bfb8      	it	lt
 8007080:	3101      	addlt	r1, #1
 8007082:	f7ff feca 	bl	8006e1a <_Balloc>
 8007086:	f100 0514 	add.w	r5, r0, #20
 800708a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800708e:	462b      	mov	r3, r5
 8007090:	2200      	movs	r2, #0
 8007092:	4573      	cmp	r3, lr
 8007094:	d316      	bcc.n	80070c4 <__multiply+0x74>
 8007096:	f104 0214 	add.w	r2, r4, #20
 800709a:	f108 0114 	add.w	r1, r8, #20
 800709e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80070a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	9b00      	ldr	r3, [sp, #0]
 80070aa:	9201      	str	r2, [sp, #4]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d80c      	bhi.n	80070ca <__multiply+0x7a>
 80070b0:	2e00      	cmp	r6, #0
 80070b2:	dd03      	ble.n	80070bc <__multiply+0x6c>
 80070b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d05d      	beq.n	8007178 <__multiply+0x128>
 80070bc:	6106      	str	r6, [r0, #16]
 80070be:	b003      	add	sp, #12
 80070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c4:	f843 2b04 	str.w	r2, [r3], #4
 80070c8:	e7e3      	b.n	8007092 <__multiply+0x42>
 80070ca:	f8b2 b000 	ldrh.w	fp, [r2]
 80070ce:	f1bb 0f00 	cmp.w	fp, #0
 80070d2:	d023      	beq.n	800711c <__multiply+0xcc>
 80070d4:	4689      	mov	r9, r1
 80070d6:	46ac      	mov	ip, r5
 80070d8:	f04f 0800 	mov.w	r8, #0
 80070dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80070e0:	f8dc a000 	ldr.w	sl, [ip]
 80070e4:	b2a3      	uxth	r3, r4
 80070e6:	fa1f fa8a 	uxth.w	sl, sl
 80070ea:	fb0b a303 	mla	r3, fp, r3, sl
 80070ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80070f2:	f8dc 4000 	ldr.w	r4, [ip]
 80070f6:	4443      	add	r3, r8
 80070f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80070fc:	fb0b 840a 	mla	r4, fp, sl, r8
 8007100:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007104:	46e2      	mov	sl, ip
 8007106:	b29b      	uxth	r3, r3
 8007108:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800710c:	454f      	cmp	r7, r9
 800710e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007112:	f84a 3b04 	str.w	r3, [sl], #4
 8007116:	d82b      	bhi.n	8007170 <__multiply+0x120>
 8007118:	f8cc 8004 	str.w	r8, [ip, #4]
 800711c:	9b01      	ldr	r3, [sp, #4]
 800711e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007122:	3204      	adds	r2, #4
 8007124:	f1ba 0f00 	cmp.w	sl, #0
 8007128:	d020      	beq.n	800716c <__multiply+0x11c>
 800712a:	682b      	ldr	r3, [r5, #0]
 800712c:	4689      	mov	r9, r1
 800712e:	46a8      	mov	r8, r5
 8007130:	f04f 0b00 	mov.w	fp, #0
 8007134:	f8b9 c000 	ldrh.w	ip, [r9]
 8007138:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800713c:	fb0a 440c 	mla	r4, sl, ip, r4
 8007140:	445c      	add	r4, fp
 8007142:	46c4      	mov	ip, r8
 8007144:	b29b      	uxth	r3, r3
 8007146:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800714a:	f84c 3b04 	str.w	r3, [ip], #4
 800714e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007152:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007156:	0c1b      	lsrs	r3, r3, #16
 8007158:	fb0a b303 	mla	r3, sl, r3, fp
 800715c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007160:	454f      	cmp	r7, r9
 8007162:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007166:	d805      	bhi.n	8007174 <__multiply+0x124>
 8007168:	f8c8 3004 	str.w	r3, [r8, #4]
 800716c:	3504      	adds	r5, #4
 800716e:	e79b      	b.n	80070a8 <__multiply+0x58>
 8007170:	46d4      	mov	ip, sl
 8007172:	e7b3      	b.n	80070dc <__multiply+0x8c>
 8007174:	46e0      	mov	r8, ip
 8007176:	e7dd      	b.n	8007134 <__multiply+0xe4>
 8007178:	3e01      	subs	r6, #1
 800717a:	e799      	b.n	80070b0 <__multiply+0x60>

0800717c <__pow5mult>:
 800717c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007180:	4615      	mov	r5, r2
 8007182:	f012 0203 	ands.w	r2, r2, #3
 8007186:	4606      	mov	r6, r0
 8007188:	460f      	mov	r7, r1
 800718a:	d007      	beq.n	800719c <__pow5mult+0x20>
 800718c:	3a01      	subs	r2, #1
 800718e:	4c21      	ldr	r4, [pc, #132]	; (8007214 <__pow5mult+0x98>)
 8007190:	2300      	movs	r3, #0
 8007192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007196:	f7ff fe8b 	bl	8006eb0 <__multadd>
 800719a:	4607      	mov	r7, r0
 800719c:	10ad      	asrs	r5, r5, #2
 800719e:	d035      	beq.n	800720c <__pow5mult+0x90>
 80071a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071a2:	b93c      	cbnz	r4, 80071b4 <__pow5mult+0x38>
 80071a4:	2010      	movs	r0, #16
 80071a6:	f7fc feb7 	bl	8003f18 <malloc>
 80071aa:	6270      	str	r0, [r6, #36]	; 0x24
 80071ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071b0:	6004      	str	r4, [r0, #0]
 80071b2:	60c4      	str	r4, [r0, #12]
 80071b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071bc:	b94c      	cbnz	r4, 80071d2 <__pow5mult+0x56>
 80071be:	f240 2171 	movw	r1, #625	; 0x271
 80071c2:	4630      	mov	r0, r6
 80071c4:	f7ff ff3b 	bl	800703e <__i2b>
 80071c8:	2300      	movs	r3, #0
 80071ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80071ce:	4604      	mov	r4, r0
 80071d0:	6003      	str	r3, [r0, #0]
 80071d2:	f04f 0800 	mov.w	r8, #0
 80071d6:	07eb      	lsls	r3, r5, #31
 80071d8:	d50a      	bpl.n	80071f0 <__pow5mult+0x74>
 80071da:	4639      	mov	r1, r7
 80071dc:	4622      	mov	r2, r4
 80071de:	4630      	mov	r0, r6
 80071e0:	f7ff ff36 	bl	8007050 <__multiply>
 80071e4:	4639      	mov	r1, r7
 80071e6:	4681      	mov	r9, r0
 80071e8:	4630      	mov	r0, r6
 80071ea:	f7ff fe4a 	bl	8006e82 <_Bfree>
 80071ee:	464f      	mov	r7, r9
 80071f0:	106d      	asrs	r5, r5, #1
 80071f2:	d00b      	beq.n	800720c <__pow5mult+0x90>
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	b938      	cbnz	r0, 8007208 <__pow5mult+0x8c>
 80071f8:	4622      	mov	r2, r4
 80071fa:	4621      	mov	r1, r4
 80071fc:	4630      	mov	r0, r6
 80071fe:	f7ff ff27 	bl	8007050 <__multiply>
 8007202:	6020      	str	r0, [r4, #0]
 8007204:	f8c0 8000 	str.w	r8, [r0]
 8007208:	4604      	mov	r4, r0
 800720a:	e7e4      	b.n	80071d6 <__pow5mult+0x5a>
 800720c:	4638      	mov	r0, r7
 800720e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007212:	bf00      	nop
 8007214:	08007fa0 	.word	0x08007fa0

08007218 <__lshift>:
 8007218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800721c:	460c      	mov	r4, r1
 800721e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	6849      	ldr	r1, [r1, #4]
 8007226:	eb0a 0903 	add.w	r9, sl, r3
 800722a:	68a3      	ldr	r3, [r4, #8]
 800722c:	4607      	mov	r7, r0
 800722e:	4616      	mov	r6, r2
 8007230:	f109 0501 	add.w	r5, r9, #1
 8007234:	42ab      	cmp	r3, r5
 8007236:	db32      	blt.n	800729e <__lshift+0x86>
 8007238:	4638      	mov	r0, r7
 800723a:	f7ff fdee 	bl	8006e1a <_Balloc>
 800723e:	2300      	movs	r3, #0
 8007240:	4680      	mov	r8, r0
 8007242:	f100 0114 	add.w	r1, r0, #20
 8007246:	461a      	mov	r2, r3
 8007248:	4553      	cmp	r3, sl
 800724a:	db2b      	blt.n	80072a4 <__lshift+0x8c>
 800724c:	6920      	ldr	r0, [r4, #16]
 800724e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007252:	f104 0314 	add.w	r3, r4, #20
 8007256:	f016 021f 	ands.w	r2, r6, #31
 800725a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800725e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007262:	d025      	beq.n	80072b0 <__lshift+0x98>
 8007264:	f1c2 0e20 	rsb	lr, r2, #32
 8007268:	2000      	movs	r0, #0
 800726a:	681e      	ldr	r6, [r3, #0]
 800726c:	468a      	mov	sl, r1
 800726e:	4096      	lsls	r6, r2
 8007270:	4330      	orrs	r0, r6
 8007272:	f84a 0b04 	str.w	r0, [sl], #4
 8007276:	f853 0b04 	ldr.w	r0, [r3], #4
 800727a:	459c      	cmp	ip, r3
 800727c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007280:	d814      	bhi.n	80072ac <__lshift+0x94>
 8007282:	6048      	str	r0, [r1, #4]
 8007284:	b108      	cbz	r0, 800728a <__lshift+0x72>
 8007286:	f109 0502 	add.w	r5, r9, #2
 800728a:	3d01      	subs	r5, #1
 800728c:	4638      	mov	r0, r7
 800728e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007292:	4621      	mov	r1, r4
 8007294:	f7ff fdf5 	bl	8006e82 <_Bfree>
 8007298:	4640      	mov	r0, r8
 800729a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729e:	3101      	adds	r1, #1
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	e7c7      	b.n	8007234 <__lshift+0x1c>
 80072a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80072a8:	3301      	adds	r3, #1
 80072aa:	e7cd      	b.n	8007248 <__lshift+0x30>
 80072ac:	4651      	mov	r1, sl
 80072ae:	e7dc      	b.n	800726a <__lshift+0x52>
 80072b0:	3904      	subs	r1, #4
 80072b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80072ba:	459c      	cmp	ip, r3
 80072bc:	d8f9      	bhi.n	80072b2 <__lshift+0x9a>
 80072be:	e7e4      	b.n	800728a <__lshift+0x72>

080072c0 <__mcmp>:
 80072c0:	6903      	ldr	r3, [r0, #16]
 80072c2:	690a      	ldr	r2, [r1, #16]
 80072c4:	1a9b      	subs	r3, r3, r2
 80072c6:	b530      	push	{r4, r5, lr}
 80072c8:	d10c      	bne.n	80072e4 <__mcmp+0x24>
 80072ca:	0092      	lsls	r2, r2, #2
 80072cc:	3014      	adds	r0, #20
 80072ce:	3114      	adds	r1, #20
 80072d0:	1884      	adds	r4, r0, r2
 80072d2:	4411      	add	r1, r2
 80072d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072dc:	4295      	cmp	r5, r2
 80072de:	d003      	beq.n	80072e8 <__mcmp+0x28>
 80072e0:	d305      	bcc.n	80072ee <__mcmp+0x2e>
 80072e2:	2301      	movs	r3, #1
 80072e4:	4618      	mov	r0, r3
 80072e6:	bd30      	pop	{r4, r5, pc}
 80072e8:	42a0      	cmp	r0, r4
 80072ea:	d3f3      	bcc.n	80072d4 <__mcmp+0x14>
 80072ec:	e7fa      	b.n	80072e4 <__mcmp+0x24>
 80072ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072f2:	e7f7      	b.n	80072e4 <__mcmp+0x24>

080072f4 <__mdiff>:
 80072f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f8:	460d      	mov	r5, r1
 80072fa:	4607      	mov	r7, r0
 80072fc:	4611      	mov	r1, r2
 80072fe:	4628      	mov	r0, r5
 8007300:	4614      	mov	r4, r2
 8007302:	f7ff ffdd 	bl	80072c0 <__mcmp>
 8007306:	1e06      	subs	r6, r0, #0
 8007308:	d108      	bne.n	800731c <__mdiff+0x28>
 800730a:	4631      	mov	r1, r6
 800730c:	4638      	mov	r0, r7
 800730e:	f7ff fd84 	bl	8006e1a <_Balloc>
 8007312:	2301      	movs	r3, #1
 8007314:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800731c:	bfa4      	itt	ge
 800731e:	4623      	movge	r3, r4
 8007320:	462c      	movge	r4, r5
 8007322:	4638      	mov	r0, r7
 8007324:	6861      	ldr	r1, [r4, #4]
 8007326:	bfa6      	itte	ge
 8007328:	461d      	movge	r5, r3
 800732a:	2600      	movge	r6, #0
 800732c:	2601      	movlt	r6, #1
 800732e:	f7ff fd74 	bl	8006e1a <_Balloc>
 8007332:	692b      	ldr	r3, [r5, #16]
 8007334:	60c6      	str	r6, [r0, #12]
 8007336:	6926      	ldr	r6, [r4, #16]
 8007338:	f105 0914 	add.w	r9, r5, #20
 800733c:	f104 0214 	add.w	r2, r4, #20
 8007340:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007344:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007348:	f100 0514 	add.w	r5, r0, #20
 800734c:	f04f 0e00 	mov.w	lr, #0
 8007350:	f852 ab04 	ldr.w	sl, [r2], #4
 8007354:	f859 4b04 	ldr.w	r4, [r9], #4
 8007358:	fa1e f18a 	uxtah	r1, lr, sl
 800735c:	b2a3      	uxth	r3, r4
 800735e:	1ac9      	subs	r1, r1, r3
 8007360:	0c23      	lsrs	r3, r4, #16
 8007362:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007366:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800736a:	b289      	uxth	r1, r1
 800736c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007370:	45c8      	cmp	r8, r9
 8007372:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007376:	4694      	mov	ip, r2
 8007378:	f845 3b04 	str.w	r3, [r5], #4
 800737c:	d8e8      	bhi.n	8007350 <__mdiff+0x5c>
 800737e:	45bc      	cmp	ip, r7
 8007380:	d304      	bcc.n	800738c <__mdiff+0x98>
 8007382:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007386:	b183      	cbz	r3, 80073aa <__mdiff+0xb6>
 8007388:	6106      	str	r6, [r0, #16]
 800738a:	e7c5      	b.n	8007318 <__mdiff+0x24>
 800738c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007390:	fa1e f381 	uxtah	r3, lr, r1
 8007394:	141a      	asrs	r2, r3, #16
 8007396:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800739a:	b29b      	uxth	r3, r3
 800739c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80073a4:	f845 3b04 	str.w	r3, [r5], #4
 80073a8:	e7e9      	b.n	800737e <__mdiff+0x8a>
 80073aa:	3e01      	subs	r6, #1
 80073ac:	e7e9      	b.n	8007382 <__mdiff+0x8e>
	...

080073b0 <__ulp>:
 80073b0:	4b12      	ldr	r3, [pc, #72]	; (80073fc <__ulp+0x4c>)
 80073b2:	ee10 2a90 	vmov	r2, s1
 80073b6:	401a      	ands	r2, r3
 80073b8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	dd04      	ble.n	80073ca <__ulp+0x1a>
 80073c0:	2000      	movs	r0, #0
 80073c2:	4619      	mov	r1, r3
 80073c4:	ec41 0b10 	vmov	d0, r0, r1
 80073c8:	4770      	bx	lr
 80073ca:	425b      	negs	r3, r3
 80073cc:	151b      	asrs	r3, r3, #20
 80073ce:	2b13      	cmp	r3, #19
 80073d0:	f04f 0000 	mov.w	r0, #0
 80073d4:	f04f 0100 	mov.w	r1, #0
 80073d8:	dc04      	bgt.n	80073e4 <__ulp+0x34>
 80073da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80073de:	fa42 f103 	asr.w	r1, r2, r3
 80073e2:	e7ef      	b.n	80073c4 <__ulp+0x14>
 80073e4:	3b14      	subs	r3, #20
 80073e6:	2b1e      	cmp	r3, #30
 80073e8:	f04f 0201 	mov.w	r2, #1
 80073ec:	bfda      	itte	le
 80073ee:	f1c3 031f 	rsble	r3, r3, #31
 80073f2:	fa02 f303 	lslle.w	r3, r2, r3
 80073f6:	4613      	movgt	r3, r2
 80073f8:	4618      	mov	r0, r3
 80073fa:	e7e3      	b.n	80073c4 <__ulp+0x14>
 80073fc:	7ff00000 	.word	0x7ff00000

08007400 <__b2d>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	6905      	ldr	r5, [r0, #16]
 8007404:	f100 0714 	add.w	r7, r0, #20
 8007408:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800740c:	1f2e      	subs	r6, r5, #4
 800740e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007412:	4620      	mov	r0, r4
 8007414:	f7ff fdc5 	bl	8006fa2 <__hi0bits>
 8007418:	f1c0 0320 	rsb	r3, r0, #32
 800741c:	280a      	cmp	r0, #10
 800741e:	600b      	str	r3, [r1, #0]
 8007420:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007498 <__b2d+0x98>
 8007424:	dc14      	bgt.n	8007450 <__b2d+0x50>
 8007426:	f1c0 0e0b 	rsb	lr, r0, #11
 800742a:	fa24 f10e 	lsr.w	r1, r4, lr
 800742e:	42b7      	cmp	r7, r6
 8007430:	ea41 030c 	orr.w	r3, r1, ip
 8007434:	bf34      	ite	cc
 8007436:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800743a:	2100      	movcs	r1, #0
 800743c:	3015      	adds	r0, #21
 800743e:	fa04 f000 	lsl.w	r0, r4, r0
 8007442:	fa21 f10e 	lsr.w	r1, r1, lr
 8007446:	ea40 0201 	orr.w	r2, r0, r1
 800744a:	ec43 2b10 	vmov	d0, r2, r3
 800744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007450:	42b7      	cmp	r7, r6
 8007452:	bf3a      	itte	cc
 8007454:	f1a5 0608 	subcc.w	r6, r5, #8
 8007458:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800745c:	2100      	movcs	r1, #0
 800745e:	380b      	subs	r0, #11
 8007460:	d015      	beq.n	800748e <__b2d+0x8e>
 8007462:	4084      	lsls	r4, r0
 8007464:	f1c0 0520 	rsb	r5, r0, #32
 8007468:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800746c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007470:	42be      	cmp	r6, r7
 8007472:	fa21 fc05 	lsr.w	ip, r1, r5
 8007476:	ea44 030c 	orr.w	r3, r4, ip
 800747a:	bf8c      	ite	hi
 800747c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007480:	2400      	movls	r4, #0
 8007482:	fa01 f000 	lsl.w	r0, r1, r0
 8007486:	40ec      	lsrs	r4, r5
 8007488:	ea40 0204 	orr.w	r2, r0, r4
 800748c:	e7dd      	b.n	800744a <__b2d+0x4a>
 800748e:	ea44 030c 	orr.w	r3, r4, ip
 8007492:	460a      	mov	r2, r1
 8007494:	e7d9      	b.n	800744a <__b2d+0x4a>
 8007496:	bf00      	nop
 8007498:	3ff00000 	.word	0x3ff00000

0800749c <__d2b>:
 800749c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074a0:	460e      	mov	r6, r1
 80074a2:	2101      	movs	r1, #1
 80074a4:	ec59 8b10 	vmov	r8, r9, d0
 80074a8:	4615      	mov	r5, r2
 80074aa:	f7ff fcb6 	bl	8006e1a <_Balloc>
 80074ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80074b2:	4607      	mov	r7, r0
 80074b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074b8:	bb34      	cbnz	r4, 8007508 <__d2b+0x6c>
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	f1b8 0300 	subs.w	r3, r8, #0
 80074c0:	d027      	beq.n	8007512 <__d2b+0x76>
 80074c2:	a802      	add	r0, sp, #8
 80074c4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80074c8:	f7ff fd8a 	bl	8006fe0 <__lo0bits>
 80074cc:	9900      	ldr	r1, [sp, #0]
 80074ce:	b1f0      	cbz	r0, 800750e <__d2b+0x72>
 80074d0:	9a01      	ldr	r2, [sp, #4]
 80074d2:	f1c0 0320 	rsb	r3, r0, #32
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	430b      	orrs	r3, r1
 80074dc:	40c2      	lsrs	r2, r0
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	9201      	str	r2, [sp, #4]
 80074e2:	9b01      	ldr	r3, [sp, #4]
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bf14      	ite	ne
 80074ea:	2102      	movne	r1, #2
 80074ec:	2101      	moveq	r1, #1
 80074ee:	6139      	str	r1, [r7, #16]
 80074f0:	b1c4      	cbz	r4, 8007524 <__d2b+0x88>
 80074f2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80074f6:	4404      	add	r4, r0
 80074f8:	6034      	str	r4, [r6, #0]
 80074fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80074fe:	6028      	str	r0, [r5, #0]
 8007500:	4638      	mov	r0, r7
 8007502:	b003      	add	sp, #12
 8007504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800750c:	e7d5      	b.n	80074ba <__d2b+0x1e>
 800750e:	6179      	str	r1, [r7, #20]
 8007510:	e7e7      	b.n	80074e2 <__d2b+0x46>
 8007512:	a801      	add	r0, sp, #4
 8007514:	f7ff fd64 	bl	8006fe0 <__lo0bits>
 8007518:	9b01      	ldr	r3, [sp, #4]
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	2101      	movs	r1, #1
 800751e:	6139      	str	r1, [r7, #16]
 8007520:	3020      	adds	r0, #32
 8007522:	e7e5      	b.n	80074f0 <__d2b+0x54>
 8007524:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007528:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800752c:	6030      	str	r0, [r6, #0]
 800752e:	6918      	ldr	r0, [r3, #16]
 8007530:	f7ff fd37 	bl	8006fa2 <__hi0bits>
 8007534:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007538:	e7e1      	b.n	80074fe <__d2b+0x62>

0800753a <__ratio>:
 800753a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753e:	4688      	mov	r8, r1
 8007540:	4669      	mov	r1, sp
 8007542:	4681      	mov	r9, r0
 8007544:	f7ff ff5c 	bl	8007400 <__b2d>
 8007548:	a901      	add	r1, sp, #4
 800754a:	4640      	mov	r0, r8
 800754c:	ec57 6b10 	vmov	r6, r7, d0
 8007550:	f7ff ff56 	bl	8007400 <__b2d>
 8007554:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007558:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800755c:	eba3 0c02 	sub.w	ip, r3, r2
 8007560:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007564:	1a9b      	subs	r3, r3, r2
 8007566:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800756a:	ec5b ab10 	vmov	sl, fp, d0
 800756e:	2b00      	cmp	r3, #0
 8007570:	bfce      	itee	gt
 8007572:	463a      	movgt	r2, r7
 8007574:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007578:	465a      	movle	r2, fp
 800757a:	4659      	mov	r1, fp
 800757c:	463d      	mov	r5, r7
 800757e:	bfd4      	ite	le
 8007580:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007584:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007588:	4630      	mov	r0, r6
 800758a:	ee10 2a10 	vmov	r2, s0
 800758e:	460b      	mov	r3, r1
 8007590:	4629      	mov	r1, r5
 8007592:	f7f9 f95b 	bl	800084c <__aeabi_ddiv>
 8007596:	ec41 0b10 	vmov	d0, r0, r1
 800759a:	b003      	add	sp, #12
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080075a0 <__copybits>:
 80075a0:	3901      	subs	r1, #1
 80075a2:	b510      	push	{r4, lr}
 80075a4:	1149      	asrs	r1, r1, #5
 80075a6:	6914      	ldr	r4, [r2, #16]
 80075a8:	3101      	adds	r1, #1
 80075aa:	f102 0314 	add.w	r3, r2, #20
 80075ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80075b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	4602      	mov	r2, r0
 80075ba:	d303      	bcc.n	80075c4 <__copybits+0x24>
 80075bc:	2300      	movs	r3, #0
 80075be:	428a      	cmp	r2, r1
 80075c0:	d305      	bcc.n	80075ce <__copybits+0x2e>
 80075c2:	bd10      	pop	{r4, pc}
 80075c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075c8:	f840 2b04 	str.w	r2, [r0], #4
 80075cc:	e7f3      	b.n	80075b6 <__copybits+0x16>
 80075ce:	f842 3b04 	str.w	r3, [r2], #4
 80075d2:	e7f4      	b.n	80075be <__copybits+0x1e>

080075d4 <__any_on>:
 80075d4:	f100 0214 	add.w	r2, r0, #20
 80075d8:	6900      	ldr	r0, [r0, #16]
 80075da:	114b      	asrs	r3, r1, #5
 80075dc:	4298      	cmp	r0, r3
 80075de:	b510      	push	{r4, lr}
 80075e0:	db11      	blt.n	8007606 <__any_on+0x32>
 80075e2:	dd0a      	ble.n	80075fa <__any_on+0x26>
 80075e4:	f011 011f 	ands.w	r1, r1, #31
 80075e8:	d007      	beq.n	80075fa <__any_on+0x26>
 80075ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80075ee:	fa24 f001 	lsr.w	r0, r4, r1
 80075f2:	fa00 f101 	lsl.w	r1, r0, r1
 80075f6:	428c      	cmp	r4, r1
 80075f8:	d10b      	bne.n	8007612 <__any_on+0x3e>
 80075fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075fe:	4293      	cmp	r3, r2
 8007600:	d803      	bhi.n	800760a <__any_on+0x36>
 8007602:	2000      	movs	r0, #0
 8007604:	bd10      	pop	{r4, pc}
 8007606:	4603      	mov	r3, r0
 8007608:	e7f7      	b.n	80075fa <__any_on+0x26>
 800760a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800760e:	2900      	cmp	r1, #0
 8007610:	d0f5      	beq.n	80075fe <__any_on+0x2a>
 8007612:	2001      	movs	r0, #1
 8007614:	e7f6      	b.n	8007604 <__any_on+0x30>

08007616 <_calloc_r>:
 8007616:	b538      	push	{r3, r4, r5, lr}
 8007618:	fb02 f401 	mul.w	r4, r2, r1
 800761c:	4621      	mov	r1, r4
 800761e:	f7fc fce1 	bl	8003fe4 <_malloc_r>
 8007622:	4605      	mov	r5, r0
 8007624:	b118      	cbz	r0, 800762e <_calloc_r+0x18>
 8007626:	4622      	mov	r2, r4
 8007628:	2100      	movs	r1, #0
 800762a:	f7fc fc85 	bl	8003f38 <memset>
 800762e:	4628      	mov	r0, r5
 8007630:	bd38      	pop	{r3, r4, r5, pc}

08007632 <__ssputs_r>:
 8007632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007636:	688e      	ldr	r6, [r1, #8]
 8007638:	429e      	cmp	r6, r3
 800763a:	4682      	mov	sl, r0
 800763c:	460c      	mov	r4, r1
 800763e:	4690      	mov	r8, r2
 8007640:	4699      	mov	r9, r3
 8007642:	d837      	bhi.n	80076b4 <__ssputs_r+0x82>
 8007644:	898a      	ldrh	r2, [r1, #12]
 8007646:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800764a:	d031      	beq.n	80076b0 <__ssputs_r+0x7e>
 800764c:	6825      	ldr	r5, [r4, #0]
 800764e:	6909      	ldr	r1, [r1, #16]
 8007650:	1a6f      	subs	r7, r5, r1
 8007652:	6965      	ldr	r5, [r4, #20]
 8007654:	2302      	movs	r3, #2
 8007656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800765a:	fb95 f5f3 	sdiv	r5, r5, r3
 800765e:	f109 0301 	add.w	r3, r9, #1
 8007662:	443b      	add	r3, r7
 8007664:	429d      	cmp	r5, r3
 8007666:	bf38      	it	cc
 8007668:	461d      	movcc	r5, r3
 800766a:	0553      	lsls	r3, r2, #21
 800766c:	d530      	bpl.n	80076d0 <__ssputs_r+0x9e>
 800766e:	4629      	mov	r1, r5
 8007670:	f7fc fcb8 	bl	8003fe4 <_malloc_r>
 8007674:	4606      	mov	r6, r0
 8007676:	b950      	cbnz	r0, 800768e <__ssputs_r+0x5c>
 8007678:	230c      	movs	r3, #12
 800767a:	f8ca 3000 	str.w	r3, [sl]
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007684:	81a3      	strh	r3, [r4, #12]
 8007686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800768a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768e:	463a      	mov	r2, r7
 8007690:	6921      	ldr	r1, [r4, #16]
 8007692:	f7ff fbb5 	bl	8006e00 <memcpy>
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800769c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a0:	81a3      	strh	r3, [r4, #12]
 80076a2:	6126      	str	r6, [r4, #16]
 80076a4:	6165      	str	r5, [r4, #20]
 80076a6:	443e      	add	r6, r7
 80076a8:	1bed      	subs	r5, r5, r7
 80076aa:	6026      	str	r6, [r4, #0]
 80076ac:	60a5      	str	r5, [r4, #8]
 80076ae:	464e      	mov	r6, r9
 80076b0:	454e      	cmp	r6, r9
 80076b2:	d900      	bls.n	80076b6 <__ssputs_r+0x84>
 80076b4:	464e      	mov	r6, r9
 80076b6:	4632      	mov	r2, r6
 80076b8:	4641      	mov	r1, r8
 80076ba:	6820      	ldr	r0, [r4, #0]
 80076bc:	f000 f92b 	bl	8007916 <memmove>
 80076c0:	68a3      	ldr	r3, [r4, #8]
 80076c2:	1b9b      	subs	r3, r3, r6
 80076c4:	60a3      	str	r3, [r4, #8]
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	441e      	add	r6, r3
 80076ca:	6026      	str	r6, [r4, #0]
 80076cc:	2000      	movs	r0, #0
 80076ce:	e7dc      	b.n	800768a <__ssputs_r+0x58>
 80076d0:	462a      	mov	r2, r5
 80076d2:	f000 f939 	bl	8007948 <_realloc_r>
 80076d6:	4606      	mov	r6, r0
 80076d8:	2800      	cmp	r0, #0
 80076da:	d1e2      	bne.n	80076a2 <__ssputs_r+0x70>
 80076dc:	6921      	ldr	r1, [r4, #16]
 80076de:	4650      	mov	r0, sl
 80076e0:	f7fc fc32 	bl	8003f48 <_free_r>
 80076e4:	e7c8      	b.n	8007678 <__ssputs_r+0x46>
	...

080076e8 <_svfiprintf_r>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	461d      	mov	r5, r3
 80076ee:	898b      	ldrh	r3, [r1, #12]
 80076f0:	061f      	lsls	r7, r3, #24
 80076f2:	b09d      	sub	sp, #116	; 0x74
 80076f4:	4680      	mov	r8, r0
 80076f6:	460c      	mov	r4, r1
 80076f8:	4616      	mov	r6, r2
 80076fa:	d50f      	bpl.n	800771c <_svfiprintf_r+0x34>
 80076fc:	690b      	ldr	r3, [r1, #16]
 80076fe:	b96b      	cbnz	r3, 800771c <_svfiprintf_r+0x34>
 8007700:	2140      	movs	r1, #64	; 0x40
 8007702:	f7fc fc6f 	bl	8003fe4 <_malloc_r>
 8007706:	6020      	str	r0, [r4, #0]
 8007708:	6120      	str	r0, [r4, #16]
 800770a:	b928      	cbnz	r0, 8007718 <_svfiprintf_r+0x30>
 800770c:	230c      	movs	r3, #12
 800770e:	f8c8 3000 	str.w	r3, [r8]
 8007712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007716:	e0c8      	b.n	80078aa <_svfiprintf_r+0x1c2>
 8007718:	2340      	movs	r3, #64	; 0x40
 800771a:	6163      	str	r3, [r4, #20]
 800771c:	2300      	movs	r3, #0
 800771e:	9309      	str	r3, [sp, #36]	; 0x24
 8007720:	2320      	movs	r3, #32
 8007722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007726:	2330      	movs	r3, #48	; 0x30
 8007728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800772c:	9503      	str	r5, [sp, #12]
 800772e:	f04f 0b01 	mov.w	fp, #1
 8007732:	4637      	mov	r7, r6
 8007734:	463d      	mov	r5, r7
 8007736:	f815 3b01 	ldrb.w	r3, [r5], #1
 800773a:	b10b      	cbz	r3, 8007740 <_svfiprintf_r+0x58>
 800773c:	2b25      	cmp	r3, #37	; 0x25
 800773e:	d13e      	bne.n	80077be <_svfiprintf_r+0xd6>
 8007740:	ebb7 0a06 	subs.w	sl, r7, r6
 8007744:	d00b      	beq.n	800775e <_svfiprintf_r+0x76>
 8007746:	4653      	mov	r3, sl
 8007748:	4632      	mov	r2, r6
 800774a:	4621      	mov	r1, r4
 800774c:	4640      	mov	r0, r8
 800774e:	f7ff ff70 	bl	8007632 <__ssputs_r>
 8007752:	3001      	adds	r0, #1
 8007754:	f000 80a4 	beq.w	80078a0 <_svfiprintf_r+0x1b8>
 8007758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775a:	4453      	add	r3, sl
 800775c:	9309      	str	r3, [sp, #36]	; 0x24
 800775e:	783b      	ldrb	r3, [r7, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 809d 	beq.w	80078a0 <_svfiprintf_r+0x1b8>
 8007766:	2300      	movs	r3, #0
 8007768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800776c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007770:	9304      	str	r3, [sp, #16]
 8007772:	9307      	str	r3, [sp, #28]
 8007774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007778:	931a      	str	r3, [sp, #104]	; 0x68
 800777a:	462f      	mov	r7, r5
 800777c:	2205      	movs	r2, #5
 800777e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007782:	4850      	ldr	r0, [pc, #320]	; (80078c4 <_svfiprintf_r+0x1dc>)
 8007784:	f7f8 fd2c 	bl	80001e0 <memchr>
 8007788:	9b04      	ldr	r3, [sp, #16]
 800778a:	b9d0      	cbnz	r0, 80077c2 <_svfiprintf_r+0xda>
 800778c:	06d9      	lsls	r1, r3, #27
 800778e:	bf44      	itt	mi
 8007790:	2220      	movmi	r2, #32
 8007792:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007796:	071a      	lsls	r2, r3, #28
 8007798:	bf44      	itt	mi
 800779a:	222b      	movmi	r2, #43	; 0x2b
 800779c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077a0:	782a      	ldrb	r2, [r5, #0]
 80077a2:	2a2a      	cmp	r2, #42	; 0x2a
 80077a4:	d015      	beq.n	80077d2 <_svfiprintf_r+0xea>
 80077a6:	9a07      	ldr	r2, [sp, #28]
 80077a8:	462f      	mov	r7, r5
 80077aa:	2000      	movs	r0, #0
 80077ac:	250a      	movs	r5, #10
 80077ae:	4639      	mov	r1, r7
 80077b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077b4:	3b30      	subs	r3, #48	; 0x30
 80077b6:	2b09      	cmp	r3, #9
 80077b8:	d94d      	bls.n	8007856 <_svfiprintf_r+0x16e>
 80077ba:	b1b8      	cbz	r0, 80077ec <_svfiprintf_r+0x104>
 80077bc:	e00f      	b.n	80077de <_svfiprintf_r+0xf6>
 80077be:	462f      	mov	r7, r5
 80077c0:	e7b8      	b.n	8007734 <_svfiprintf_r+0x4c>
 80077c2:	4a40      	ldr	r2, [pc, #256]	; (80078c4 <_svfiprintf_r+0x1dc>)
 80077c4:	1a80      	subs	r0, r0, r2
 80077c6:	fa0b f000 	lsl.w	r0, fp, r0
 80077ca:	4318      	orrs	r0, r3
 80077cc:	9004      	str	r0, [sp, #16]
 80077ce:	463d      	mov	r5, r7
 80077d0:	e7d3      	b.n	800777a <_svfiprintf_r+0x92>
 80077d2:	9a03      	ldr	r2, [sp, #12]
 80077d4:	1d11      	adds	r1, r2, #4
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	9103      	str	r1, [sp, #12]
 80077da:	2a00      	cmp	r2, #0
 80077dc:	db01      	blt.n	80077e2 <_svfiprintf_r+0xfa>
 80077de:	9207      	str	r2, [sp, #28]
 80077e0:	e004      	b.n	80077ec <_svfiprintf_r+0x104>
 80077e2:	4252      	negs	r2, r2
 80077e4:	f043 0302 	orr.w	r3, r3, #2
 80077e8:	9207      	str	r2, [sp, #28]
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	783b      	ldrb	r3, [r7, #0]
 80077ee:	2b2e      	cmp	r3, #46	; 0x2e
 80077f0:	d10c      	bne.n	800780c <_svfiprintf_r+0x124>
 80077f2:	787b      	ldrb	r3, [r7, #1]
 80077f4:	2b2a      	cmp	r3, #42	; 0x2a
 80077f6:	d133      	bne.n	8007860 <_svfiprintf_r+0x178>
 80077f8:	9b03      	ldr	r3, [sp, #12]
 80077fa:	1d1a      	adds	r2, r3, #4
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	9203      	str	r2, [sp, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	bfb8      	it	lt
 8007804:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007808:	3702      	adds	r7, #2
 800780a:	9305      	str	r3, [sp, #20]
 800780c:	4d2e      	ldr	r5, [pc, #184]	; (80078c8 <_svfiprintf_r+0x1e0>)
 800780e:	7839      	ldrb	r1, [r7, #0]
 8007810:	2203      	movs	r2, #3
 8007812:	4628      	mov	r0, r5
 8007814:	f7f8 fce4 	bl	80001e0 <memchr>
 8007818:	b138      	cbz	r0, 800782a <_svfiprintf_r+0x142>
 800781a:	2340      	movs	r3, #64	; 0x40
 800781c:	1b40      	subs	r0, r0, r5
 800781e:	fa03 f000 	lsl.w	r0, r3, r0
 8007822:	9b04      	ldr	r3, [sp, #16]
 8007824:	4303      	orrs	r3, r0
 8007826:	3701      	adds	r7, #1
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	7839      	ldrb	r1, [r7, #0]
 800782c:	4827      	ldr	r0, [pc, #156]	; (80078cc <_svfiprintf_r+0x1e4>)
 800782e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007832:	2206      	movs	r2, #6
 8007834:	1c7e      	adds	r6, r7, #1
 8007836:	f7f8 fcd3 	bl	80001e0 <memchr>
 800783a:	2800      	cmp	r0, #0
 800783c:	d038      	beq.n	80078b0 <_svfiprintf_r+0x1c8>
 800783e:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <_svfiprintf_r+0x1e8>)
 8007840:	bb13      	cbnz	r3, 8007888 <_svfiprintf_r+0x1a0>
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	3307      	adds	r3, #7
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	3308      	adds	r3, #8
 800784c:	9303      	str	r3, [sp, #12]
 800784e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007850:	444b      	add	r3, r9
 8007852:	9309      	str	r3, [sp, #36]	; 0x24
 8007854:	e76d      	b.n	8007732 <_svfiprintf_r+0x4a>
 8007856:	fb05 3202 	mla	r2, r5, r2, r3
 800785a:	2001      	movs	r0, #1
 800785c:	460f      	mov	r7, r1
 800785e:	e7a6      	b.n	80077ae <_svfiprintf_r+0xc6>
 8007860:	2300      	movs	r3, #0
 8007862:	3701      	adds	r7, #1
 8007864:	9305      	str	r3, [sp, #20]
 8007866:	4619      	mov	r1, r3
 8007868:	250a      	movs	r5, #10
 800786a:	4638      	mov	r0, r7
 800786c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007870:	3a30      	subs	r2, #48	; 0x30
 8007872:	2a09      	cmp	r2, #9
 8007874:	d903      	bls.n	800787e <_svfiprintf_r+0x196>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0c8      	beq.n	800780c <_svfiprintf_r+0x124>
 800787a:	9105      	str	r1, [sp, #20]
 800787c:	e7c6      	b.n	800780c <_svfiprintf_r+0x124>
 800787e:	fb05 2101 	mla	r1, r5, r1, r2
 8007882:	2301      	movs	r3, #1
 8007884:	4607      	mov	r7, r0
 8007886:	e7f0      	b.n	800786a <_svfiprintf_r+0x182>
 8007888:	ab03      	add	r3, sp, #12
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	4622      	mov	r2, r4
 800788e:	4b11      	ldr	r3, [pc, #68]	; (80078d4 <_svfiprintf_r+0x1ec>)
 8007890:	a904      	add	r1, sp, #16
 8007892:	4640      	mov	r0, r8
 8007894:	f7fc fc94 	bl	80041c0 <_printf_float>
 8007898:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800789c:	4681      	mov	r9, r0
 800789e:	d1d6      	bne.n	800784e <_svfiprintf_r+0x166>
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	065b      	lsls	r3, r3, #25
 80078a4:	f53f af35 	bmi.w	8007712 <_svfiprintf_r+0x2a>
 80078a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078aa:	b01d      	add	sp, #116	; 0x74
 80078ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b0:	ab03      	add	r3, sp, #12
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	4622      	mov	r2, r4
 80078b6:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <_svfiprintf_r+0x1ec>)
 80078b8:	a904      	add	r1, sp, #16
 80078ba:	4640      	mov	r0, r8
 80078bc:	f7fc ff36 	bl	800472c <_printf_i>
 80078c0:	e7ea      	b.n	8007898 <_svfiprintf_r+0x1b0>
 80078c2:	bf00      	nop
 80078c4:	08007fac 	.word	0x08007fac
 80078c8:	08007fb2 	.word	0x08007fb2
 80078cc:	08007fb6 	.word	0x08007fb6
 80078d0:	080041c1 	.word	0x080041c1
 80078d4:	08007633 	.word	0x08007633

080078d8 <strncmp>:
 80078d8:	b510      	push	{r4, lr}
 80078da:	b16a      	cbz	r2, 80078f8 <strncmp+0x20>
 80078dc:	3901      	subs	r1, #1
 80078de:	1884      	adds	r4, r0, r2
 80078e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80078e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d103      	bne.n	80078f4 <strncmp+0x1c>
 80078ec:	42a0      	cmp	r0, r4
 80078ee:	d001      	beq.n	80078f4 <strncmp+0x1c>
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1f5      	bne.n	80078e0 <strncmp+0x8>
 80078f4:	1a98      	subs	r0, r3, r2
 80078f6:	bd10      	pop	{r4, pc}
 80078f8:	4610      	mov	r0, r2
 80078fa:	e7fc      	b.n	80078f6 <strncmp+0x1e>

080078fc <__ascii_wctomb>:
 80078fc:	b149      	cbz	r1, 8007912 <__ascii_wctomb+0x16>
 80078fe:	2aff      	cmp	r2, #255	; 0xff
 8007900:	bf85      	ittet	hi
 8007902:	238a      	movhi	r3, #138	; 0x8a
 8007904:	6003      	strhi	r3, [r0, #0]
 8007906:	700a      	strbls	r2, [r1, #0]
 8007908:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800790c:	bf98      	it	ls
 800790e:	2001      	movls	r0, #1
 8007910:	4770      	bx	lr
 8007912:	4608      	mov	r0, r1
 8007914:	4770      	bx	lr

08007916 <memmove>:
 8007916:	4288      	cmp	r0, r1
 8007918:	b510      	push	{r4, lr}
 800791a:	eb01 0302 	add.w	r3, r1, r2
 800791e:	d807      	bhi.n	8007930 <memmove+0x1a>
 8007920:	1e42      	subs	r2, r0, #1
 8007922:	4299      	cmp	r1, r3
 8007924:	d00a      	beq.n	800793c <memmove+0x26>
 8007926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800792a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800792e:	e7f8      	b.n	8007922 <memmove+0xc>
 8007930:	4283      	cmp	r3, r0
 8007932:	d9f5      	bls.n	8007920 <memmove+0xa>
 8007934:	1881      	adds	r1, r0, r2
 8007936:	1ad2      	subs	r2, r2, r3
 8007938:	42d3      	cmn	r3, r2
 800793a:	d100      	bne.n	800793e <memmove+0x28>
 800793c:	bd10      	pop	{r4, pc}
 800793e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007942:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007946:	e7f7      	b.n	8007938 <memmove+0x22>

08007948 <_realloc_r>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	4607      	mov	r7, r0
 800794c:	4614      	mov	r4, r2
 800794e:	460e      	mov	r6, r1
 8007950:	b921      	cbnz	r1, 800795c <_realloc_r+0x14>
 8007952:	4611      	mov	r1, r2
 8007954:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007958:	f7fc bb44 	b.w	8003fe4 <_malloc_r>
 800795c:	b922      	cbnz	r2, 8007968 <_realloc_r+0x20>
 800795e:	f7fc faf3 	bl	8003f48 <_free_r>
 8007962:	4625      	mov	r5, r4
 8007964:	4628      	mov	r0, r5
 8007966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007968:	f000 f814 	bl	8007994 <_malloc_usable_size_r>
 800796c:	42a0      	cmp	r0, r4
 800796e:	d20f      	bcs.n	8007990 <_realloc_r+0x48>
 8007970:	4621      	mov	r1, r4
 8007972:	4638      	mov	r0, r7
 8007974:	f7fc fb36 	bl	8003fe4 <_malloc_r>
 8007978:	4605      	mov	r5, r0
 800797a:	2800      	cmp	r0, #0
 800797c:	d0f2      	beq.n	8007964 <_realloc_r+0x1c>
 800797e:	4631      	mov	r1, r6
 8007980:	4622      	mov	r2, r4
 8007982:	f7ff fa3d 	bl	8006e00 <memcpy>
 8007986:	4631      	mov	r1, r6
 8007988:	4638      	mov	r0, r7
 800798a:	f7fc fadd 	bl	8003f48 <_free_r>
 800798e:	e7e9      	b.n	8007964 <_realloc_r+0x1c>
 8007990:	4635      	mov	r5, r6
 8007992:	e7e7      	b.n	8007964 <_realloc_r+0x1c>

08007994 <_malloc_usable_size_r>:
 8007994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007998:	1f18      	subs	r0, r3, #4
 800799a:	2b00      	cmp	r3, #0
 800799c:	bfbc      	itt	lt
 800799e:	580b      	ldrlt	r3, [r1, r0]
 80079a0:	18c0      	addlt	r0, r0, r3
 80079a2:	4770      	bx	lr

080079a4 <_init>:
 80079a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079a6:	bf00      	nop
 80079a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079aa:	bc08      	pop	{r3}
 80079ac:	469e      	mov	lr, r3
 80079ae:	4770      	bx	lr

080079b0 <_fini>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	bf00      	nop
 80079b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b6:	bc08      	pop	{r3}
 80079b8:	469e      	mov	lr, r3
 80079ba:	4770      	bx	lr
